// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/org/huntgroup.proto

package com.tcn.cloud.api.api.commons.org;

/**
 * <pre>
 * CompareOperatorType differentiates between operator types in a SimpleCompareExpression
 * </pre>
 *
 * Protobuf enum {@code api.commons.org.CompareOperatorType}
 */
public enum CompareOperatorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Not specified
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_UNSPECIFIED = 0;</code>
   */
  COMPARE_OPERATOR_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * Equals
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_EQUALS = 1;</code>
   */
  COMPARE_OPERATOR_TYPE_EQUALS(1),
  /**
   * <pre>
   * Not equals
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_NOT_EQUALS = 2;</code>
   */
  COMPARE_OPERATOR_TYPE_NOT_EQUALS(2),
  /**
   * <pre>
   * Greater than
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_GREATER_THAN = 3;</code>
   */
  COMPARE_OPERATOR_TYPE_GREATER_THAN(3),
  /**
   * <pre>
   * Less than
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_LESS_THAN = 4;</code>
   */
  COMPARE_OPERATOR_TYPE_LESS_THAN(4),
  /**
   * <pre>
   * Greater than or equal to
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_GREATER_THAN_OR_EQUAL_TO = 5;</code>
   */
  COMPARE_OPERATOR_TYPE_GREATER_THAN_OR_EQUAL_TO(5),
  /**
   * <pre>
   * Less than or equal to
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_LESS_THAN_OR_EQUAL_TO = 6;</code>
   */
  COMPARE_OPERATOR_TYPE_LESS_THAN_OR_EQUAL_TO(6),
  /**
   * <pre>
   * Text contains
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_CONTAINS = 7;</code>
   */
  COMPARE_OPERATOR_TYPE_CONTAINS(7),
  /**
   * <pre>
   * Text does not contain
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_DOES_NOT_CONTAIN = 8;</code>
   */
  COMPARE_OPERATOR_TYPE_DOES_NOT_CONTAIN(8),
  /**
   * <pre>
   * Blank
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_BLANK = 9;</code>
   */
  COMPARE_OPERATOR_TYPE_BLANK(9),
  /**
   * <pre>
   * Not blank
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_NOT_BALNK = 10;</code>
   */
  COMPARE_OPERATOR_TYPE_NOT_BALNK(10),
  /**
   * <pre>
   * Text starts with
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_STARTS_WITH = 11;</code>
   */
  COMPARE_OPERATOR_TYPE_STARTS_WITH(11),
  /**
   * <pre>
   * Text does not start with
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_DOES_NOT_START_WITH = 12;</code>
   */
  COMPARE_OPERATOR_TYPE_DOES_NOT_START_WITH(12),
  /**
   * <pre>
   * Text ends with
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_ENDS_WITH = 13;</code>
   */
  COMPARE_OPERATOR_TYPE_ENDS_WITH(13),
  /**
   * <pre>
   * Text does not end with
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_DOES_NOT_END_WITH = 14;</code>
   */
  COMPARE_OPERATOR_TYPE_DOES_NOT_END_WITH(14),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Not specified
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Equals
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_EQUALS = 1;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_EQUALS_VALUE = 1;
  /**
   * <pre>
   * Not equals
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_NOT_EQUALS = 2;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_NOT_EQUALS_VALUE = 2;
  /**
   * <pre>
   * Greater than
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_GREATER_THAN = 3;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_GREATER_THAN_VALUE = 3;
  /**
   * <pre>
   * Less than
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_LESS_THAN = 4;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_LESS_THAN_VALUE = 4;
  /**
   * <pre>
   * Greater than or equal to
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_GREATER_THAN_OR_EQUAL_TO = 5;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_GREATER_THAN_OR_EQUAL_TO_VALUE = 5;
  /**
   * <pre>
   * Less than or equal to
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_LESS_THAN_OR_EQUAL_TO = 6;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_LESS_THAN_OR_EQUAL_TO_VALUE = 6;
  /**
   * <pre>
   * Text contains
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_CONTAINS = 7;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_CONTAINS_VALUE = 7;
  /**
   * <pre>
   * Text does not contain
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_DOES_NOT_CONTAIN = 8;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_DOES_NOT_CONTAIN_VALUE = 8;
  /**
   * <pre>
   * Blank
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_BLANK = 9;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_BLANK_VALUE = 9;
  /**
   * <pre>
   * Not blank
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_NOT_BALNK = 10;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_NOT_BALNK_VALUE = 10;
  /**
   * <pre>
   * Text starts with
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_STARTS_WITH = 11;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_STARTS_WITH_VALUE = 11;
  /**
   * <pre>
   * Text does not start with
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_DOES_NOT_START_WITH = 12;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_DOES_NOT_START_WITH_VALUE = 12;
  /**
   * <pre>
   * Text ends with
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_ENDS_WITH = 13;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_ENDS_WITH_VALUE = 13;
  /**
   * <pre>
   * Text does not end with
   * </pre>
   *
   * <code>COMPARE_OPERATOR_TYPE_DOES_NOT_END_WITH = 14;</code>
   */
  public static final int COMPARE_OPERATOR_TYPE_DOES_NOT_END_WITH_VALUE = 14;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CompareOperatorType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static CompareOperatorType forNumber(int value) {
    switch (value) {
      case 0: return COMPARE_OPERATOR_TYPE_UNSPECIFIED;
      case 1: return COMPARE_OPERATOR_TYPE_EQUALS;
      case 2: return COMPARE_OPERATOR_TYPE_NOT_EQUALS;
      case 3: return COMPARE_OPERATOR_TYPE_GREATER_THAN;
      case 4: return COMPARE_OPERATOR_TYPE_LESS_THAN;
      case 5: return COMPARE_OPERATOR_TYPE_GREATER_THAN_OR_EQUAL_TO;
      case 6: return COMPARE_OPERATOR_TYPE_LESS_THAN_OR_EQUAL_TO;
      case 7: return COMPARE_OPERATOR_TYPE_CONTAINS;
      case 8: return COMPARE_OPERATOR_TYPE_DOES_NOT_CONTAIN;
      case 9: return COMPARE_OPERATOR_TYPE_BLANK;
      case 10: return COMPARE_OPERATOR_TYPE_NOT_BALNK;
      case 11: return COMPARE_OPERATOR_TYPE_STARTS_WITH;
      case 12: return COMPARE_OPERATOR_TYPE_DOES_NOT_START_WITH;
      case 13: return COMPARE_OPERATOR_TYPE_ENDS_WITH;
      case 14: return COMPARE_OPERATOR_TYPE_DOES_NOT_END_WITH;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CompareOperatorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CompareOperatorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CompareOperatorType>() {
          public CompareOperatorType findValueByNumber(int number) {
            return CompareOperatorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.org.HuntgroupProto.getDescriptor().getEnumTypes().get(10);
  }

  private static final CompareOperatorType[] VALUES = values();

  public static CompareOperatorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CompareOperatorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.org.CompareOperatorType)
}

