// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/scorecards.proto

package com.tcn.cloud.api.api.commons;

public interface ScorecardQuestionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.commons.ScorecardQuestion)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * unique id of the scorecard question
   * </pre>
   *
   * <code>int64 scorecard_question_id = 2 [json_name = "scorecardQuestionId"];</code>
   * @return The scorecardQuestionId.
   */
  long getScorecardQuestionId();

  /**
   * <pre>
   * question to display
   * </pre>
   *
   * <code>string question = 3 [json_name = "question"];</code>
   * @return The question.
   */
  java.lang.String getQuestion();
  /**
   * <pre>
   * question to display
   * </pre>
   *
   * <code>string question = 3 [json_name = "question"];</code>
   * @return The bytes for question.
   */
  com.google.protobuf.ByteString
      getQuestionBytes();

  /**
   * <pre>
   * optional; additional info about question
   * </pre>
   *
   * <code>string description = 4 [json_name = "description"];</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * optional; additional info about question
   * </pre>
   *
   * <code>string description = 4 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * optional; library question id
   * </pre>
   *
   * <code>int64 question_id = 5 [json_name = "questionId"];</code>
   * @return The questionId.
   */
  long getQuestionId();

  /**
   * <pre>
   * question can be excluded from scoring (allow n/a)
   * </pre>
   *
   * <code>bool allow_skip = 6 [json_name = "allowSkip"];</code>
   * @return The allowSkip.
   */
  boolean getAllowSkip();

  /**
   * <pre>
   * the answer options with point values
   * </pre>
   *
   * <code>repeated .api.commons.ScorecardQuestion.Answer answers = 7 [json_name = "answers"];</code>
   */
  java.util.List<com.tcn.cloud.api.api.commons.ScorecardQuestion.Answer> 
      getAnswersList();
  /**
   * <pre>
   * the answer options with point values
   * </pre>
   *
   * <code>repeated .api.commons.ScorecardQuestion.Answer answers = 7 [json_name = "answers"];</code>
   */
  com.tcn.cloud.api.api.commons.ScorecardQuestion.Answer getAnswers(int index);
  /**
   * <pre>
   * the answer options with point values
   * </pre>
   *
   * <code>repeated .api.commons.ScorecardQuestion.Answer answers = 7 [json_name = "answers"];</code>
   */
  int getAnswersCount();
  /**
   * <pre>
   * the answer options with point values
   * </pre>
   *
   * <code>repeated .api.commons.ScorecardQuestion.Answer answers = 7 [json_name = "answers"];</code>
   */
  java.util.List<? extends com.tcn.cloud.api.api.commons.ScorecardQuestion.AnswerOrBuilder> 
      getAnswersOrBuilderList();
  /**
   * <pre>
   * the answer options with point values
   * </pre>
   *
   * <code>repeated .api.commons.ScorecardQuestion.Answer answers = 7 [json_name = "answers"];</code>
   */
  com.tcn.cloud.api.api.commons.ScorecardQuestion.AnswerOrBuilder getAnswersOrBuilder(
      int index);

  /**
   * <pre>
   * single-select if nil; otherwise multiselect
   * </pre>
   *
   * <code>.api.commons.ScorecardQuestion.MultiSelect multi_select = 8 [json_name = "multiSelect"];</code>
   * @return Whether the multiSelect field is set.
   */
  boolean hasMultiSelect();
  /**
   * <pre>
   * single-select if nil; otherwise multiselect
   * </pre>
   *
   * <code>.api.commons.ScorecardQuestion.MultiSelect multi_select = 8 [json_name = "multiSelect"];</code>
   * @return The multiSelect.
   */
  com.tcn.cloud.api.api.commons.ScorecardQuestion.MultiSelect getMultiSelect();
  /**
   * <pre>
   * single-select if nil; otherwise multiselect
   * </pre>
   *
   * <code>.api.commons.ScorecardQuestion.MultiSelect multi_select = 8 [json_name = "multiSelect"];</code>
   */
  com.tcn.cloud.api.api.commons.ScorecardQuestion.MultiSelectOrBuilder getMultiSelectOrBuilder();

  /**
   * <pre>
   * question belongs to scorecard
   * </pre>
   *
   * <code>int64 scorecard_id = 9 [json_name = "scorecardId"];</code>
   * @return The scorecardId.
   */
  long getScorecardId();

  /**
   * <pre>
   * question belongs to scorecard section
   * </pre>
   *
   * <code>int64 section_id = 10 [json_name = "sectionId"];</code>
   * @return The sectionId.
   */
  long getSectionId();

  /**
   * <pre>
   * current version of scorecard question
   * </pre>
   *
   * <code>int32 version = 11 [json_name = "version"];</code>
   * @return The version.
   */
  int getVersion();

  /**
   * <pre>
   * order number of scorecard question
   * </pre>
   *
   * <code>int32 sort_order = 12 [json_name = "sortOrder"];</code>
   * @return The sortOrder.
   */
  int getSortOrder();
}
