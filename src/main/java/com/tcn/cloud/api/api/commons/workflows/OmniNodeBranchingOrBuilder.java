// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/workflows/omni.proto

package com.tcn.cloud.api.api.commons.workflows;

public interface OmniNodeBranchingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.commons.workflows.OmniNodeBranching)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * key of data stored in the payload to compare against the options (likely references an OmniNodeUserInput.store_id)
   * </pre>
   *
   * <code>string store_id = 1 [json_name = "storeId"];</code>
   * @return The storeId.
   */
  java.lang.String getStoreId();
  /**
   * <pre>
   * key of data stored in the payload to compare against the options (likely references an OmniNodeUserInput.store_id)
   * </pre>
   *
   * <code>string store_id = 1 [json_name = "storeId"];</code>
   * @return The bytes for storeId.
   */
  com.google.protobuf.ByteString
      getStoreIdBytes();

  /**
   * <pre>
   * the list of options to use for branching
   * </pre>
   *
   * <code>repeated string options = 2 [json_name = "options"];</code>
   * @return A list containing the options.
   */
  java.util.List<java.lang.String>
      getOptionsList();
  /**
   * <pre>
   * the list of options to use for branching
   * </pre>
   *
   * <code>repeated string options = 2 [json_name = "options"];</code>
   * @return The count of options.
   */
  int getOptionsCount();
  /**
   * <pre>
   * the list of options to use for branching
   * </pre>
   *
   * <code>repeated string options = 2 [json_name = "options"];</code>
   * @param index The index of the element to return.
   * @return The options at the given index.
   */
  java.lang.String getOptions(int index);
  /**
   * <pre>
   * the list of options to use for branching
   * </pre>
   *
   * <code>repeated string options = 2 [json_name = "options"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the options at the given index.
   */
  com.google.protobuf.ByteString
      getOptionsBytes(int index);
}
