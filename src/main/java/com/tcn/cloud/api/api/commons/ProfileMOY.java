// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/wfm.proto

package com.tcn.cloud.api.api.commons;

/**
 * <pre>
 * a profile for each month of the year
 * </pre>
 *
 * Protobuf type {@code api.commons.ProfileMOY}
 */
public final class ProfileMOY extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:api.commons.ProfileMOY)
    ProfileMOYOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ProfileMOY.newBuilder() to construct.
  private ProfileMOY(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ProfileMOY() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ProfileMOY();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ProfileMOY(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 13: {

            january_ = input.readFloat();
            break;
          }
          case 21: {

            february_ = input.readFloat();
            break;
          }
          case 29: {

            march_ = input.readFloat();
            break;
          }
          case 37: {

            april_ = input.readFloat();
            break;
          }
          case 45: {

            may_ = input.readFloat();
            break;
          }
          case 53: {

            june_ = input.readFloat();
            break;
          }
          case 61: {

            july_ = input.readFloat();
            break;
          }
          case 69: {

            august_ = input.readFloat();
            break;
          }
          case 77: {

            september_ = input.readFloat();
            break;
          }
          case 85: {

            october_ = input.readFloat();
            break;
          }
          case 93: {

            november_ = input.readFloat();
            break;
          }
          case 101: {

            december_ = input.readFloat();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileMOY_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileMOY_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.tcn.cloud.api.api.commons.ProfileMOY.class, com.tcn.cloud.api.api.commons.ProfileMOY.Builder.class);
  }

  public static final int JANUARY_FIELD_NUMBER = 1;
  private float january_;
  /**
   * <code>float january = 1 [json_name = "january"];</code>
   * @return The january.
   */
  @java.lang.Override
  public float getJanuary() {
    return january_;
  }

  public static final int FEBRUARY_FIELD_NUMBER = 2;
  private float february_;
  /**
   * <code>float february = 2 [json_name = "february"];</code>
   * @return The february.
   */
  @java.lang.Override
  public float getFebruary() {
    return february_;
  }

  public static final int MARCH_FIELD_NUMBER = 3;
  private float march_;
  /**
   * <code>float march = 3 [json_name = "march"];</code>
   * @return The march.
   */
  @java.lang.Override
  public float getMarch() {
    return march_;
  }

  public static final int APRIL_FIELD_NUMBER = 4;
  private float april_;
  /**
   * <code>float april = 4 [json_name = "april"];</code>
   * @return The april.
   */
  @java.lang.Override
  public float getApril() {
    return april_;
  }

  public static final int MAY_FIELD_NUMBER = 5;
  private float may_;
  /**
   * <code>float may = 5 [json_name = "may"];</code>
   * @return The may.
   */
  @java.lang.Override
  public float getMay() {
    return may_;
  }

  public static final int JUNE_FIELD_NUMBER = 6;
  private float june_;
  /**
   * <code>float june = 6 [json_name = "june"];</code>
   * @return The june.
   */
  @java.lang.Override
  public float getJune() {
    return june_;
  }

  public static final int JULY_FIELD_NUMBER = 7;
  private float july_;
  /**
   * <code>float july = 7 [json_name = "july"];</code>
   * @return The july.
   */
  @java.lang.Override
  public float getJuly() {
    return july_;
  }

  public static final int AUGUST_FIELD_NUMBER = 8;
  private float august_;
  /**
   * <code>float august = 8 [json_name = "august"];</code>
   * @return The august.
   */
  @java.lang.Override
  public float getAugust() {
    return august_;
  }

  public static final int SEPTEMBER_FIELD_NUMBER = 9;
  private float september_;
  /**
   * <code>float september = 9 [json_name = "september"];</code>
   * @return The september.
   */
  @java.lang.Override
  public float getSeptember() {
    return september_;
  }

  public static final int OCTOBER_FIELD_NUMBER = 10;
  private float october_;
  /**
   * <code>float october = 10 [json_name = "october"];</code>
   * @return The october.
   */
  @java.lang.Override
  public float getOctober() {
    return october_;
  }

  public static final int NOVEMBER_FIELD_NUMBER = 11;
  private float november_;
  /**
   * <code>float november = 11 [json_name = "november"];</code>
   * @return The november.
   */
  @java.lang.Override
  public float getNovember() {
    return november_;
  }

  public static final int DECEMBER_FIELD_NUMBER = 12;
  private float december_;
  /**
   * <code>float december = 12 [json_name = "december"];</code>
   * @return The december.
   */
  @java.lang.Override
  public float getDecember() {
    return december_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (january_ != 0F) {
      output.writeFloat(1, january_);
    }
    if (february_ != 0F) {
      output.writeFloat(2, february_);
    }
    if (march_ != 0F) {
      output.writeFloat(3, march_);
    }
    if (april_ != 0F) {
      output.writeFloat(4, april_);
    }
    if (may_ != 0F) {
      output.writeFloat(5, may_);
    }
    if (june_ != 0F) {
      output.writeFloat(6, june_);
    }
    if (july_ != 0F) {
      output.writeFloat(7, july_);
    }
    if (august_ != 0F) {
      output.writeFloat(8, august_);
    }
    if (september_ != 0F) {
      output.writeFloat(9, september_);
    }
    if (october_ != 0F) {
      output.writeFloat(10, october_);
    }
    if (november_ != 0F) {
      output.writeFloat(11, november_);
    }
    if (december_ != 0F) {
      output.writeFloat(12, december_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (january_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(1, january_);
    }
    if (february_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, february_);
    }
    if (march_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, march_);
    }
    if (april_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(4, april_);
    }
    if (may_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(5, may_);
    }
    if (june_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(6, june_);
    }
    if (july_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, july_);
    }
    if (august_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(8, august_);
    }
    if (september_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(9, september_);
    }
    if (october_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(10, october_);
    }
    if (november_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(11, november_);
    }
    if (december_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(12, december_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.tcn.cloud.api.api.commons.ProfileMOY)) {
      return super.equals(obj);
    }
    com.tcn.cloud.api.api.commons.ProfileMOY other = (com.tcn.cloud.api.api.commons.ProfileMOY) obj;

    if (java.lang.Float.floatToIntBits(getJanuary())
        != java.lang.Float.floatToIntBits(
            other.getJanuary())) return false;
    if (java.lang.Float.floatToIntBits(getFebruary())
        != java.lang.Float.floatToIntBits(
            other.getFebruary())) return false;
    if (java.lang.Float.floatToIntBits(getMarch())
        != java.lang.Float.floatToIntBits(
            other.getMarch())) return false;
    if (java.lang.Float.floatToIntBits(getApril())
        != java.lang.Float.floatToIntBits(
            other.getApril())) return false;
    if (java.lang.Float.floatToIntBits(getMay())
        != java.lang.Float.floatToIntBits(
            other.getMay())) return false;
    if (java.lang.Float.floatToIntBits(getJune())
        != java.lang.Float.floatToIntBits(
            other.getJune())) return false;
    if (java.lang.Float.floatToIntBits(getJuly())
        != java.lang.Float.floatToIntBits(
            other.getJuly())) return false;
    if (java.lang.Float.floatToIntBits(getAugust())
        != java.lang.Float.floatToIntBits(
            other.getAugust())) return false;
    if (java.lang.Float.floatToIntBits(getSeptember())
        != java.lang.Float.floatToIntBits(
            other.getSeptember())) return false;
    if (java.lang.Float.floatToIntBits(getOctober())
        != java.lang.Float.floatToIntBits(
            other.getOctober())) return false;
    if (java.lang.Float.floatToIntBits(getNovember())
        != java.lang.Float.floatToIntBits(
            other.getNovember())) return false;
    if (java.lang.Float.floatToIntBits(getDecember())
        != java.lang.Float.floatToIntBits(
            other.getDecember())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + JANUARY_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getJanuary());
    hash = (37 * hash) + FEBRUARY_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getFebruary());
    hash = (37 * hash) + MARCH_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getMarch());
    hash = (37 * hash) + APRIL_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getApril());
    hash = (37 * hash) + MAY_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getMay());
    hash = (37 * hash) + JUNE_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getJune());
    hash = (37 * hash) + JULY_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getJuly());
    hash = (37 * hash) + AUGUST_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getAugust());
    hash = (37 * hash) + SEPTEMBER_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getSeptember());
    hash = (37 * hash) + OCTOBER_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getOctober());
    hash = (37 * hash) + NOVEMBER_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getNovember());
    hash = (37 * hash) + DECEMBER_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getDecember());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.tcn.cloud.api.api.commons.ProfileMOY parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.tcn.cloud.api.api.commons.ProfileMOY prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * a profile for each month of the year
   * </pre>
   *
   * Protobuf type {@code api.commons.ProfileMOY}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:api.commons.ProfileMOY)
      com.tcn.cloud.api.api.commons.ProfileMOYOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileMOY_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileMOY_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.tcn.cloud.api.api.commons.ProfileMOY.class, com.tcn.cloud.api.api.commons.ProfileMOY.Builder.class);
    }

    // Construct using com.tcn.cloud.api.api.commons.ProfileMOY.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      january_ = 0F;

      february_ = 0F;

      march_ = 0F;

      april_ = 0F;

      may_ = 0F;

      june_ = 0F;

      july_ = 0F;

      august_ = 0F;

      september_ = 0F;

      october_ = 0F;

      november_ = 0F;

      december_ = 0F;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileMOY_descriptor;
    }

    @java.lang.Override
    public com.tcn.cloud.api.api.commons.ProfileMOY getDefaultInstanceForType() {
      return com.tcn.cloud.api.api.commons.ProfileMOY.getDefaultInstance();
    }

    @java.lang.Override
    public com.tcn.cloud.api.api.commons.ProfileMOY build() {
      com.tcn.cloud.api.api.commons.ProfileMOY result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.tcn.cloud.api.api.commons.ProfileMOY buildPartial() {
      com.tcn.cloud.api.api.commons.ProfileMOY result = new com.tcn.cloud.api.api.commons.ProfileMOY(this);
      result.january_ = january_;
      result.february_ = february_;
      result.march_ = march_;
      result.april_ = april_;
      result.may_ = may_;
      result.june_ = june_;
      result.july_ = july_;
      result.august_ = august_;
      result.september_ = september_;
      result.october_ = october_;
      result.november_ = november_;
      result.december_ = december_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.tcn.cloud.api.api.commons.ProfileMOY) {
        return mergeFrom((com.tcn.cloud.api.api.commons.ProfileMOY)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.tcn.cloud.api.api.commons.ProfileMOY other) {
      if (other == com.tcn.cloud.api.api.commons.ProfileMOY.getDefaultInstance()) return this;
      if (other.getJanuary() != 0F) {
        setJanuary(other.getJanuary());
      }
      if (other.getFebruary() != 0F) {
        setFebruary(other.getFebruary());
      }
      if (other.getMarch() != 0F) {
        setMarch(other.getMarch());
      }
      if (other.getApril() != 0F) {
        setApril(other.getApril());
      }
      if (other.getMay() != 0F) {
        setMay(other.getMay());
      }
      if (other.getJune() != 0F) {
        setJune(other.getJune());
      }
      if (other.getJuly() != 0F) {
        setJuly(other.getJuly());
      }
      if (other.getAugust() != 0F) {
        setAugust(other.getAugust());
      }
      if (other.getSeptember() != 0F) {
        setSeptember(other.getSeptember());
      }
      if (other.getOctober() != 0F) {
        setOctober(other.getOctober());
      }
      if (other.getNovember() != 0F) {
        setNovember(other.getNovember());
      }
      if (other.getDecember() != 0F) {
        setDecember(other.getDecember());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.tcn.cloud.api.api.commons.ProfileMOY parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.tcn.cloud.api.api.commons.ProfileMOY) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private float january_ ;
    /**
     * <code>float january = 1 [json_name = "january"];</code>
     * @return The january.
     */
    @java.lang.Override
    public float getJanuary() {
      return january_;
    }
    /**
     * <code>float january = 1 [json_name = "january"];</code>
     * @param value The january to set.
     * @return This builder for chaining.
     */
    public Builder setJanuary(float value) {
      
      january_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float january = 1 [json_name = "january"];</code>
     * @return This builder for chaining.
     */
    public Builder clearJanuary() {
      
      january_ = 0F;
      onChanged();
      return this;
    }

    private float february_ ;
    /**
     * <code>float february = 2 [json_name = "february"];</code>
     * @return The february.
     */
    @java.lang.Override
    public float getFebruary() {
      return february_;
    }
    /**
     * <code>float february = 2 [json_name = "february"];</code>
     * @param value The february to set.
     * @return This builder for chaining.
     */
    public Builder setFebruary(float value) {
      
      february_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float february = 2 [json_name = "february"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFebruary() {
      
      february_ = 0F;
      onChanged();
      return this;
    }

    private float march_ ;
    /**
     * <code>float march = 3 [json_name = "march"];</code>
     * @return The march.
     */
    @java.lang.Override
    public float getMarch() {
      return march_;
    }
    /**
     * <code>float march = 3 [json_name = "march"];</code>
     * @param value The march to set.
     * @return This builder for chaining.
     */
    public Builder setMarch(float value) {
      
      march_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float march = 3 [json_name = "march"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMarch() {
      
      march_ = 0F;
      onChanged();
      return this;
    }

    private float april_ ;
    /**
     * <code>float april = 4 [json_name = "april"];</code>
     * @return The april.
     */
    @java.lang.Override
    public float getApril() {
      return april_;
    }
    /**
     * <code>float april = 4 [json_name = "april"];</code>
     * @param value The april to set.
     * @return This builder for chaining.
     */
    public Builder setApril(float value) {
      
      april_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float april = 4 [json_name = "april"];</code>
     * @return This builder for chaining.
     */
    public Builder clearApril() {
      
      april_ = 0F;
      onChanged();
      return this;
    }

    private float may_ ;
    /**
     * <code>float may = 5 [json_name = "may"];</code>
     * @return The may.
     */
    @java.lang.Override
    public float getMay() {
      return may_;
    }
    /**
     * <code>float may = 5 [json_name = "may"];</code>
     * @param value The may to set.
     * @return This builder for chaining.
     */
    public Builder setMay(float value) {
      
      may_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float may = 5 [json_name = "may"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMay() {
      
      may_ = 0F;
      onChanged();
      return this;
    }

    private float june_ ;
    /**
     * <code>float june = 6 [json_name = "june"];</code>
     * @return The june.
     */
    @java.lang.Override
    public float getJune() {
      return june_;
    }
    /**
     * <code>float june = 6 [json_name = "june"];</code>
     * @param value The june to set.
     * @return This builder for chaining.
     */
    public Builder setJune(float value) {
      
      june_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float june = 6 [json_name = "june"];</code>
     * @return This builder for chaining.
     */
    public Builder clearJune() {
      
      june_ = 0F;
      onChanged();
      return this;
    }

    private float july_ ;
    /**
     * <code>float july = 7 [json_name = "july"];</code>
     * @return The july.
     */
    @java.lang.Override
    public float getJuly() {
      return july_;
    }
    /**
     * <code>float july = 7 [json_name = "july"];</code>
     * @param value The july to set.
     * @return This builder for chaining.
     */
    public Builder setJuly(float value) {
      
      july_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float july = 7 [json_name = "july"];</code>
     * @return This builder for chaining.
     */
    public Builder clearJuly() {
      
      july_ = 0F;
      onChanged();
      return this;
    }

    private float august_ ;
    /**
     * <code>float august = 8 [json_name = "august"];</code>
     * @return The august.
     */
    @java.lang.Override
    public float getAugust() {
      return august_;
    }
    /**
     * <code>float august = 8 [json_name = "august"];</code>
     * @param value The august to set.
     * @return This builder for chaining.
     */
    public Builder setAugust(float value) {
      
      august_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float august = 8 [json_name = "august"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAugust() {
      
      august_ = 0F;
      onChanged();
      return this;
    }

    private float september_ ;
    /**
     * <code>float september = 9 [json_name = "september"];</code>
     * @return The september.
     */
    @java.lang.Override
    public float getSeptember() {
      return september_;
    }
    /**
     * <code>float september = 9 [json_name = "september"];</code>
     * @param value The september to set.
     * @return This builder for chaining.
     */
    public Builder setSeptember(float value) {
      
      september_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float september = 9 [json_name = "september"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSeptember() {
      
      september_ = 0F;
      onChanged();
      return this;
    }

    private float october_ ;
    /**
     * <code>float october = 10 [json_name = "october"];</code>
     * @return The october.
     */
    @java.lang.Override
    public float getOctober() {
      return october_;
    }
    /**
     * <code>float october = 10 [json_name = "october"];</code>
     * @param value The october to set.
     * @return This builder for chaining.
     */
    public Builder setOctober(float value) {
      
      october_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float october = 10 [json_name = "october"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOctober() {
      
      october_ = 0F;
      onChanged();
      return this;
    }

    private float november_ ;
    /**
     * <code>float november = 11 [json_name = "november"];</code>
     * @return The november.
     */
    @java.lang.Override
    public float getNovember() {
      return november_;
    }
    /**
     * <code>float november = 11 [json_name = "november"];</code>
     * @param value The november to set.
     * @return This builder for chaining.
     */
    public Builder setNovember(float value) {
      
      november_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float november = 11 [json_name = "november"];</code>
     * @return This builder for chaining.
     */
    public Builder clearNovember() {
      
      november_ = 0F;
      onChanged();
      return this;
    }

    private float december_ ;
    /**
     * <code>float december = 12 [json_name = "december"];</code>
     * @return The december.
     */
    @java.lang.Override
    public float getDecember() {
      return december_;
    }
    /**
     * <code>float december = 12 [json_name = "december"];</code>
     * @param value The december to set.
     * @return This builder for chaining.
     */
    public Builder setDecember(float value) {
      
      december_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float december = 12 [json_name = "december"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDecember() {
      
      december_ = 0F;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:api.commons.ProfileMOY)
  }

  // @@protoc_insertion_point(class_scope:api.commons.ProfileMOY)
  private static final com.tcn.cloud.api.api.commons.ProfileMOY DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.tcn.cloud.api.api.commons.ProfileMOY();
  }

  public static com.tcn.cloud.api.api.commons.ProfileMOY getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ProfileMOY>
      PARSER = new com.google.protobuf.AbstractParser<ProfileMOY>() {
    @java.lang.Override
    public ProfileMOY parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ProfileMOY(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ProfileMOY> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ProfileMOY> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.tcn.cloud.api.api.commons.ProfileMOY getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

