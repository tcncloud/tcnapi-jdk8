// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/integrations/integrations.proto

package com.tcn.cloud.api.api.commons.integrations;

/**
 * <pre>
 * Validation is an enum that appears on FieldDefinition.
 * it is a hint of what the value should look like for the user,
 * and usually applies to VALUE_TYPE_STRING fields.
 * </pre>
 *
 * Protobuf enum {@code api.commons.integrations.Validation}
 */
public enum Validation
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * the value can be literally anything that matches the ValueType
   * </pre>
   *
   * <code>VALIDATION_NONE = 0;</code>
   */
  VALIDATION_NONE(0),
  /**
   * <pre>
   * the value must be a credit card number.
   * </pre>
   *
   * <code>VALIDATION_CREDITCARD = 101;</code>
   */
  VALIDATION_CREDITCARD(101),
  /**
   * <pre>
   * the value must be len() == 3, and all three characters must be digits
   * </pre>
   *
   * <code>VALIDATION_CVC = 102;</code>
   */
  VALIDATION_CVC(102),
  /**
   * <pre>
   * value must be a two digit month.
   * </pre>
   *
   * <code>VALIDATION_MONTH_2_DIGIT = 103;</code>
   */
  VALIDATION_MONTH_2_DIGIT(103),
  /**
   * <pre>
   * value must be a 4 digit yearn
   * </pre>
   *
   * <code>VALIDATION_YEAR_4_DIGIT = 104;</code>
   */
  VALIDATION_YEAR_4_DIGIT(104),
  /**
   * <pre>
   * value must be last 4 digits of ssn
   * </pre>
   *
   * <code>VALIDATION_LAST_4_SSN = 105;</code>
   */
  VALIDATION_LAST_4_SSN(105),
  /**
   * <pre>
   * value must be a US zip code.
   * </pre>
   *
   * <code>VALIDATION_US_ZIP = 106;</code>
   */
  VALIDATION_US_ZIP(106),
  /**
   * <pre>
   * value must be a month and year expiration for credit/debit cards,
   * and must not be expired
   * </pre>
   *
   * <code>VALIDATION_CC_EXPIRATION_DATE = 107;</code>
   */
  VALIDATION_CC_EXPIRATION_DATE(107),
  /**
   * <pre>
   * value must be an integer with no '.' or fraction value
   * </pre>
   *
   * <code>VALIDATION_INTEGER = 201;</code>
   */
  VALIDATION_INTEGER(201),
  /**
   * <pre>
   * value must be a float with a '.' and at least 1 decimal spot, but unlimited
   * maximum decimal spots
   * </pre>
   *
   * <code>VALIDATION_FLOAT = 202;</code>
   */
  VALIDATION_FLOAT(202),
  /**
   * <pre>
   * the value should be formatted with a $ and to 2 decimal spots, even if
   * there fraction value
   * </pre>
   *
   * <code>VALIDATION_CURRENCY_USD = 203;</code>
   */
  VALIDATION_CURRENCY_USD(203),
  /**
   * <pre>
   * value must be any date
   * </pre>
   *
   * <code>VALIDATION_DATE = 301;</code>
   */
  VALIDATION_DATE(301),
  /**
   * <pre>
   * value must be a date of birth.
   * This rules out future dates, and dates in the distant past.
   * </pre>
   *
   * <code>VALIDATION_DOB = 302;</code>
   */
  VALIDATION_DOB(302),
  /**
   * <pre>
   * value must be a boolean string
   * </pre>
   *
   * <code>VALIDATION_BOOL = 401;</code>
   */
  VALIDATION_BOOL(401),
  /**
   * <pre>
   * value must match a provided regular expression.
   * regular expression must be specified using 'FieldDefintion.format'.
   * The default regular expression is '.*' (match anything).
   * </pre>
   *
   * <code>VALIDATION_REGEX = 402;</code>
   */
  VALIDATION_REGEX(402),
  /**
   * <code>VALIDATION_ROUTING = 501;</code>
   */
  VALIDATION_ROUTING(501),
  /**
   * <code>VALIDATION_ACCOUNT = 502;</code>
   */
  VALIDATION_ACCOUNT(502),
  /**
   * <code>VALIDATION_TRANSACTION_ID = 601;</code>
   */
  VALIDATION_TRANSACTION_ID(601),
  /**
   * <pre>
   * a select is for a predefined list of values,
   * these values are given on the "formats" field of the field defintition proto.
   * </pre>
   *
   * <code>VALIDATION_SELECT = 701;</code>
   */
  VALIDATION_SELECT(701),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * the value can be literally anything that matches the ValueType
   * </pre>
   *
   * <code>VALIDATION_NONE = 0;</code>
   */
  public static final int VALIDATION_NONE_VALUE = 0;
  /**
   * <pre>
   * the value must be a credit card number.
   * </pre>
   *
   * <code>VALIDATION_CREDITCARD = 101;</code>
   */
  public static final int VALIDATION_CREDITCARD_VALUE = 101;
  /**
   * <pre>
   * the value must be len() == 3, and all three characters must be digits
   * </pre>
   *
   * <code>VALIDATION_CVC = 102;</code>
   */
  public static final int VALIDATION_CVC_VALUE = 102;
  /**
   * <pre>
   * value must be a two digit month.
   * </pre>
   *
   * <code>VALIDATION_MONTH_2_DIGIT = 103;</code>
   */
  public static final int VALIDATION_MONTH_2_DIGIT_VALUE = 103;
  /**
   * <pre>
   * value must be a 4 digit yearn
   * </pre>
   *
   * <code>VALIDATION_YEAR_4_DIGIT = 104;</code>
   */
  public static final int VALIDATION_YEAR_4_DIGIT_VALUE = 104;
  /**
   * <pre>
   * value must be last 4 digits of ssn
   * </pre>
   *
   * <code>VALIDATION_LAST_4_SSN = 105;</code>
   */
  public static final int VALIDATION_LAST_4_SSN_VALUE = 105;
  /**
   * <pre>
   * value must be a US zip code.
   * </pre>
   *
   * <code>VALIDATION_US_ZIP = 106;</code>
   */
  public static final int VALIDATION_US_ZIP_VALUE = 106;
  /**
   * <pre>
   * value must be a month and year expiration for credit/debit cards,
   * and must not be expired
   * </pre>
   *
   * <code>VALIDATION_CC_EXPIRATION_DATE = 107;</code>
   */
  public static final int VALIDATION_CC_EXPIRATION_DATE_VALUE = 107;
  /**
   * <pre>
   * value must be an integer with no '.' or fraction value
   * </pre>
   *
   * <code>VALIDATION_INTEGER = 201;</code>
   */
  public static final int VALIDATION_INTEGER_VALUE = 201;
  /**
   * <pre>
   * value must be a float with a '.' and at least 1 decimal spot, but unlimited
   * maximum decimal spots
   * </pre>
   *
   * <code>VALIDATION_FLOAT = 202;</code>
   */
  public static final int VALIDATION_FLOAT_VALUE = 202;
  /**
   * <pre>
   * the value should be formatted with a $ and to 2 decimal spots, even if
   * there fraction value
   * </pre>
   *
   * <code>VALIDATION_CURRENCY_USD = 203;</code>
   */
  public static final int VALIDATION_CURRENCY_USD_VALUE = 203;
  /**
   * <pre>
   * value must be any date
   * </pre>
   *
   * <code>VALIDATION_DATE = 301;</code>
   */
  public static final int VALIDATION_DATE_VALUE = 301;
  /**
   * <pre>
   * value must be a date of birth.
   * This rules out future dates, and dates in the distant past.
   * </pre>
   *
   * <code>VALIDATION_DOB = 302;</code>
   */
  public static final int VALIDATION_DOB_VALUE = 302;
  /**
   * <pre>
   * value must be a boolean string
   * </pre>
   *
   * <code>VALIDATION_BOOL = 401;</code>
   */
  public static final int VALIDATION_BOOL_VALUE = 401;
  /**
   * <pre>
   * value must match a provided regular expression.
   * regular expression must be specified using 'FieldDefintion.format'.
   * The default regular expression is '.*' (match anything).
   * </pre>
   *
   * <code>VALIDATION_REGEX = 402;</code>
   */
  public static final int VALIDATION_REGEX_VALUE = 402;
  /**
   * <code>VALIDATION_ROUTING = 501;</code>
   */
  public static final int VALIDATION_ROUTING_VALUE = 501;
  /**
   * <code>VALIDATION_ACCOUNT = 502;</code>
   */
  public static final int VALIDATION_ACCOUNT_VALUE = 502;
  /**
   * <code>VALIDATION_TRANSACTION_ID = 601;</code>
   */
  public static final int VALIDATION_TRANSACTION_ID_VALUE = 601;
  /**
   * <pre>
   * a select is for a predefined list of values,
   * these values are given on the "formats" field of the field defintition proto.
   * </pre>
   *
   * <code>VALIDATION_SELECT = 701;</code>
   */
  public static final int VALIDATION_SELECT_VALUE = 701;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Validation valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Validation forNumber(int value) {
    switch (value) {
      case 0: return VALIDATION_NONE;
      case 101: return VALIDATION_CREDITCARD;
      case 102: return VALIDATION_CVC;
      case 103: return VALIDATION_MONTH_2_DIGIT;
      case 104: return VALIDATION_YEAR_4_DIGIT;
      case 105: return VALIDATION_LAST_4_SSN;
      case 106: return VALIDATION_US_ZIP;
      case 107: return VALIDATION_CC_EXPIRATION_DATE;
      case 201: return VALIDATION_INTEGER;
      case 202: return VALIDATION_FLOAT;
      case 203: return VALIDATION_CURRENCY_USD;
      case 301: return VALIDATION_DATE;
      case 302: return VALIDATION_DOB;
      case 401: return VALIDATION_BOOL;
      case 402: return VALIDATION_REGEX;
      case 501: return VALIDATION_ROUTING;
      case 502: return VALIDATION_ACCOUNT;
      case 601: return VALIDATION_TRANSACTION_ID;
      case 701: return VALIDATION_SELECT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Validation>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Validation> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Validation>() {
          public Validation findValueByNumber(int number) {
            return Validation.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.integrations.IntegrationsProto.getDescriptor().getEnumTypes().get(10);
  }

  private static final Validation[] VALUES = values();

  public static Validation valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Validation(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.integrations.Validation)
}

