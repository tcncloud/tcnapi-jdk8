// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/v1alpha1/wfm/wfm.proto

package com.tcn.cloud.api.api.v1alpha1.wfm;

public interface ReplaceAgentOnPublishedScheduleRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.v1alpha1.wfm.ReplaceAgentOnPublishedScheduleRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * An optional field used to limit the datetime range of the shifts being updated.
   * If left blank, the full schedule range will be updated.
   * </pre>
   *
   * <code>.api.commons.DatetimeRange datetime_range = 1 [json_name = "datetimeRange"];</code>
   * @return Whether the datetimeRange field is set.
   */
  boolean hasDatetimeRange();
  /**
   * <pre>
   * An optional field used to limit the datetime range of the shifts being updated.
   * If left blank, the full schedule range will be updated.
   * </pre>
   *
   * <code>.api.commons.DatetimeRange datetime_range = 1 [json_name = "datetimeRange"];</code>
   * @return The datetimeRange.
   */
  com.tcn.cloud.api.api.commons.DatetimeRange getDatetimeRange();
  /**
   * <pre>
   * An optional field used to limit the datetime range of the shifts being updated.
   * If left blank, the full schedule range will be updated.
   * </pre>
   *
   * <code>.api.commons.DatetimeRange datetime_range = 1 [json_name = "datetimeRange"];</code>
   */
  com.tcn.cloud.api.api.commons.DatetimeRangeOrBuilder getDatetimeRangeOrBuilder();

  /**
   * <pre>
   * An optional field indicating the node to get shifts from.
   * Otherwise shifts will be updated for all nodes on the &#64;schedule_selector.
   * </pre>
   *
   * <code>.api.v1alpha1.wfm.ParentEntity node_selector = 2 [json_name = "nodeSelector"];</code>
   * @return Whether the nodeSelector field is set.
   */
  boolean hasNodeSelector();
  /**
   * <pre>
   * An optional field indicating the node to get shifts from.
   * Otherwise shifts will be updated for all nodes on the &#64;schedule_selector.
   * </pre>
   *
   * <code>.api.v1alpha1.wfm.ParentEntity node_selector = 2 [json_name = "nodeSelector"];</code>
   * @return The nodeSelector.
   */
  com.tcn.cloud.api.api.v1alpha1.wfm.ParentEntity getNodeSelector();
  /**
   * <pre>
   * An optional field indicating the node to get shifts from.
   * Otherwise shifts will be updated for all nodes on the &#64;schedule_selector.
   * </pre>
   *
   * <code>.api.v1alpha1.wfm.ParentEntity node_selector = 2 [json_name = "nodeSelector"];</code>
   */
  com.tcn.cloud.api.api.v1alpha1.wfm.ParentEntityOrBuilder getNodeSelectorOrBuilder();

  /**
   * <pre>
   * ID of the WFM agent to remove from the schedule.
   * </pre>
   *
   * <code>int64 wfm_agent_sid_to_remove = 3 [json_name = "wfmAgentSidToRemove"];</code>
   * @return The wfmAgentSidToRemove.
   */
  long getWfmAgentSidToRemove();

  /**
   * <pre>
   * ID of the WFM agent to add to the schedule, in place of &#64;wfm_agent_sid_to_remove.
   * </pre>
   *
   * <code>int64 wfm_agent_sid_to_add = 4 [json_name = "wfmAgentSidToAdd"];</code>
   * @return The wfmAgentSidToAdd.
   */
  long getWfmAgentSidToAdd();

  /**
   * <pre>
   * If set to true, any overlapping shift conflicts will be skipped.
   * Otherwise, any overlap conflicts will raise a diagnostic and prevent any shifts from being updated.
   * </pre>
   *
   * <code>bool skip_overlapping_shifts = 5 [json_name = "skipOverlappingShifts"];</code>
   * @return The skipOverlappingShifts.
   */
  boolean getSkipOverlappingShifts();
}
