// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/scorecards.proto

package com.tcn.cloud.api.api.commons;

/**
 * <pre>
 * ScorecardState is state of the scorecard, which
 * determines if, or how, it can be used.
 * </pre>
 *
 * Protobuf enum {@code api.commons.ScorecardState}
 */
public enum ScorecardState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Default. All scorecards start as draft.
   * User must change to not draft in order to use.
   * </pre>
   *
   * <code>SCORECARD_IS_DRAFT = 0;</code>
   */
  SCORECARD_IS_DRAFT(0),
  /**
   * <pre>
   * Scorecard is no longer a draft, but has not been used.
   * Updates are allowed.
   * </pre>
   *
   * <code>SCORECARD_IS_READY = 1;</code>
   */
  SCORECARD_IS_READY(1),
  /**
   * <pre>
   * Scorecard is in use and cannot be edited.
   * The system marks as in use on first use.
   * UI cannot update to, or from, this state.
   * </pre>
   *
   * <code>SCORECARD_IS_IN_USE = 2;</code>
   */
  SCORECARD_IS_IN_USE(2),
  /**
   * <pre>
   * Scorecard is a template and is read-only.
   * Scorecards cannot be updated to, or from, this state.
   * </pre>
   *
   * <code>SCORECARD_IS_TEMPLATE = 3;</code>
   */
  SCORECARD_IS_TEMPLATE(3),
  /**
   * <pre>
   * Scorecard is disabled and cannot be used for scoring.
   * Can only be reached from, or updated to, READY.
   * </pre>
   *
   * <code>SCORECARD_IS_READY_DISABLED = 4;</code>
   */
  SCORECARD_IS_READY_DISABLED(4),
  /**
   * <pre>
   * Scorecard is disabled and cannot be used for scoring.
   * Can only be reached from, or updated to, IN_USE.
   * </pre>
   *
   * <code>SCORECARD_IS_IN_USE_DISABLED = 5;</code>
   */
  SCORECARD_IS_IN_USE_DISABLED(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Default. All scorecards start as draft.
   * User must change to not draft in order to use.
   * </pre>
   *
   * <code>SCORECARD_IS_DRAFT = 0;</code>
   */
  public static final int SCORECARD_IS_DRAFT_VALUE = 0;
  /**
   * <pre>
   * Scorecard is no longer a draft, but has not been used.
   * Updates are allowed.
   * </pre>
   *
   * <code>SCORECARD_IS_READY = 1;</code>
   */
  public static final int SCORECARD_IS_READY_VALUE = 1;
  /**
   * <pre>
   * Scorecard is in use and cannot be edited.
   * The system marks as in use on first use.
   * UI cannot update to, or from, this state.
   * </pre>
   *
   * <code>SCORECARD_IS_IN_USE = 2;</code>
   */
  public static final int SCORECARD_IS_IN_USE_VALUE = 2;
  /**
   * <pre>
   * Scorecard is a template and is read-only.
   * Scorecards cannot be updated to, or from, this state.
   * </pre>
   *
   * <code>SCORECARD_IS_TEMPLATE = 3;</code>
   */
  public static final int SCORECARD_IS_TEMPLATE_VALUE = 3;
  /**
   * <pre>
   * Scorecard is disabled and cannot be used for scoring.
   * Can only be reached from, or updated to, READY.
   * </pre>
   *
   * <code>SCORECARD_IS_READY_DISABLED = 4;</code>
   */
  public static final int SCORECARD_IS_READY_DISABLED_VALUE = 4;
  /**
   * <pre>
   * Scorecard is disabled and cannot be used for scoring.
   * Can only be reached from, or updated to, IN_USE.
   * </pre>
   *
   * <code>SCORECARD_IS_IN_USE_DISABLED = 5;</code>
   */
  public static final int SCORECARD_IS_IN_USE_DISABLED_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ScorecardState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ScorecardState forNumber(int value) {
    switch (value) {
      case 0: return SCORECARD_IS_DRAFT;
      case 1: return SCORECARD_IS_READY;
      case 2: return SCORECARD_IS_IN_USE;
      case 3: return SCORECARD_IS_TEMPLATE;
      case 4: return SCORECARD_IS_READY_DISABLED;
      case 5: return SCORECARD_IS_IN_USE_DISABLED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ScorecardState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ScorecardState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ScorecardState>() {
          public ScorecardState findValueByNumber(int number) {
            return ScorecardState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.ScorecardsProto.getDescriptor().getEnumTypes().get(4);
  }

  private static final ScorecardState[] VALUES = values();

  public static ScorecardState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ScorecardState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.ScorecardState)
}

