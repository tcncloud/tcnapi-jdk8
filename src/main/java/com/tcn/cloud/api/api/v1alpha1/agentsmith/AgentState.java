// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/v1alpha1/agentsmith/service.proto

package com.tcn.cloud.api.api.v1alpha1.agentsmith;

/**
 * <pre>
 * AgentState is the state of the agent
 * </pre>
 *
 * Protobuf enum {@code api.v1alpha1.agentsmith.AgentState}
 */
public enum AgentState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN = 0;</code>
   */
  UNKNOWN(0),
  /**
   * <code>UNAVAILABLE = 1;</code>
   */
  UNAVAILABLE(1),
  /**
   * <code>IDLE = 2;</code>
   */
  IDLE(2),
  /**
   * <code>READY = 3;</code>
   */
  READY(3),
  /**
   * <code>HUNGUP = 4;</code>
   */
  HUNGUP(4),
  /**
   * <code>DESTROYED = 5;</code>
   */
  DESTROYED(5),
  /**
   * <code>PEERED = 6;</code>
   */
  PEERED(6),
  /**
   * <code>PAUSED = 7;</code>
   */
  PAUSED(7),
  /**
   * <code>WRAPUP = 8;</code>
   */
  WRAPUP(8),
  /**
   * <code>PREPARING_AFTER_IDLE = 10;</code>
   */
  PREPARING_AFTER_IDLE(10),
  /**
   * <code>PREPARING_AFTER_WRAPUP = 11;</code>
   */
  PREPARING_AFTER_WRAPUP(11),
  /**
   * <code>PREPARING_AFTER_PAUSE = 12;</code>
   */
  PREPARING_AFTER_PAUSE(12),
  /**
   * <code>PREPARING_AFTER_DIAL_CANCEL = 13;</code>
   */
  PREPARING_AFTER_DIAL_CANCEL(13),
  /**
   * <code>PREPARING_AFTER_PBX_REJECT = 14;</code>
   */
  PREPARING_AFTER_PBX_REJECT(14),
  /**
   * <code>PREPARING_AFTER_PBX_HANGUP = 15;</code>
   */
  PREPARING_AFTER_PBX_HANGUP(15),
  /**
   * <code>PREPARING_AFTER_PBX_WAS_TAKEN = 16;</code>
   */
  PREPARING_AFTER_PBX_WAS_TAKEN(16),
  /**
   * <code>PREPARING_AFTER_GUI_BUSY = 17;</code>
   */
  PREPARING_AFTER_GUI_BUSY(17),
  /**
   * <code>MANUAL_DIAL_PREPARED = 18;</code>
   */
  MANUAL_DIAL_PREPARED(18),
  /**
   * <code>PREVIEW_DIAL_PREPARED = 19;</code>
   */
  PREVIEW_DIAL_PREPARED(19),
  /**
   * <code>MANUAL_DIAL_STARTED = 20;</code>
   */
  MANUAL_DIAL_STARTED(20),
  /**
   * <code>PREVIEW_DIAL_STARTED = 21;</code>
   */
  PREVIEW_DIAL_STARTED(21),
  /**
   * <code>OUTBOUND_LOCKED = 22;</code>
   */
  OUTBOUND_LOCKED(22),
  /**
   * <code>WARM_AGENT_TRANSFER_STARTED_SOURCE = 23;</code>
   */
  WARM_AGENT_TRANSFER_STARTED_SOURCE(23),
  /**
   * <code>WARM_AGENT_TRANSFER_STARTED_DESTINATION = 24;</code>
   */
  WARM_AGENT_TRANSFER_STARTED_DESTINATION(24),
  /**
   * <code>WARM_OUTBOUND_TRANSFER_STARTED = 25;</code>
   */
  WARM_OUTBOUND_TRANSFER_STARTED(25),
  /**
   * <code>WARM_OUTBOUND_TRANSFER_PEER_LOST = 26;</code>
   */
  WARM_OUTBOUND_TRANSFER_PEER_LOST(26),
  /**
   * <code>PBX_POPUP_LOCKED = 27;</code>
   */
  PBX_POPUP_LOCKED(27),
  /**
   * <code>PEERED_WITH_CALL_ON_HOLD = 28;</code>
   */
  PEERED_WITH_CALL_ON_HOLD(28),
  /**
   * <code>CALLBACK_RESUMING = 29;</code>
   */
  CALLBACK_RESUMING(29),
  /**
   * <code>GUI_BUSY = 30;</code>
   */
  GUI_BUSY(30),
  /**
   * <code>INTERCOM = 31;</code>
   */
  INTERCOM(31),
  /**
   * <code>INTERCOM_RINGING_SOURCE = 32;</code>
   */
  INTERCOM_RINGING_SOURCE(32),
  /**
   * <code>INTERCOM_RINGING_DESTINATION = 33;</code>
   */
  INTERCOM_RINGING_DESTINATION(33),
  /**
   * <code>WARM_OUTBOUND_TRANSFER_OUTBOUND_LOST = 34;</code>
   */
  WARM_OUTBOUND_TRANSFER_OUTBOUND_LOST(34),
  /**
   * <code>PREPARED_TO_PEER = 35;</code>
   */
  PREPARED_TO_PEER(35),
  /**
   * <code>WARM_SKILL_TRANSFER_SOURCE_PENDING = 36;</code>
   */
  WARM_SKILL_TRANSFER_SOURCE_PENDING(36),
  /**
   * <pre>
   * when the transfer has started
   * </pre>
   *
   * <code>CALLER_TRANSFER_STARTED = 37;</code>
   */
  CALLER_TRANSFER_STARTED(37),
  /**
   * <pre>
   * when the transfer is running and the peer hangs up
   * </pre>
   *
   * <code>CALLER_TRANSFER_LOST_PEER = 38;</code>
   */
  CALLER_TRANSFER_LOST_PEER(38),
  /**
   * <pre>
   * when the transfer is running and the dest caller hangs up
   * </pre>
   *
   * <code>CALLER_TRANSFER_LOST_MERGED_CALLER = 39;</code>
   */
  CALLER_TRANSFER_LOST_MERGED_CALLER(39),
  /**
   * <pre>
   * interim state for cold outbound transfer
   * </pre>
   *
   * <code>COLD_OUTBOUND_TRANSFER_STARTED = 40;</code>
   */
  COLD_OUTBOUND_TRANSFER_STARTED(40),
  /**
   * <pre>
   * interim state for cold agent transfer
   * </pre>
   *
   * <code>COLD_AGENT_TRANSFER_STARTED = 41;</code>
   */
  COLD_AGENT_TRANSFER_STARTED(41),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN = 0;</code>
   */
  public static final int UNKNOWN_VALUE = 0;
  /**
   * <code>UNAVAILABLE = 1;</code>
   */
  public static final int UNAVAILABLE_VALUE = 1;
  /**
   * <code>IDLE = 2;</code>
   */
  public static final int IDLE_VALUE = 2;
  /**
   * <code>READY = 3;</code>
   */
  public static final int READY_VALUE = 3;
  /**
   * <code>HUNGUP = 4;</code>
   */
  public static final int HUNGUP_VALUE = 4;
  /**
   * <code>DESTROYED = 5;</code>
   */
  public static final int DESTROYED_VALUE = 5;
  /**
   * <code>PEERED = 6;</code>
   */
  public static final int PEERED_VALUE = 6;
  /**
   * <code>PAUSED = 7;</code>
   */
  public static final int PAUSED_VALUE = 7;
  /**
   * <code>WRAPUP = 8;</code>
   */
  public static final int WRAPUP_VALUE = 8;
  /**
   * <code>PREPARING_AFTER_IDLE = 10;</code>
   */
  public static final int PREPARING_AFTER_IDLE_VALUE = 10;
  /**
   * <code>PREPARING_AFTER_WRAPUP = 11;</code>
   */
  public static final int PREPARING_AFTER_WRAPUP_VALUE = 11;
  /**
   * <code>PREPARING_AFTER_PAUSE = 12;</code>
   */
  public static final int PREPARING_AFTER_PAUSE_VALUE = 12;
  /**
   * <code>PREPARING_AFTER_DIAL_CANCEL = 13;</code>
   */
  public static final int PREPARING_AFTER_DIAL_CANCEL_VALUE = 13;
  /**
   * <code>PREPARING_AFTER_PBX_REJECT = 14;</code>
   */
  public static final int PREPARING_AFTER_PBX_REJECT_VALUE = 14;
  /**
   * <code>PREPARING_AFTER_PBX_HANGUP = 15;</code>
   */
  public static final int PREPARING_AFTER_PBX_HANGUP_VALUE = 15;
  /**
   * <code>PREPARING_AFTER_PBX_WAS_TAKEN = 16;</code>
   */
  public static final int PREPARING_AFTER_PBX_WAS_TAKEN_VALUE = 16;
  /**
   * <code>PREPARING_AFTER_GUI_BUSY = 17;</code>
   */
  public static final int PREPARING_AFTER_GUI_BUSY_VALUE = 17;
  /**
   * <code>MANUAL_DIAL_PREPARED = 18;</code>
   */
  public static final int MANUAL_DIAL_PREPARED_VALUE = 18;
  /**
   * <code>PREVIEW_DIAL_PREPARED = 19;</code>
   */
  public static final int PREVIEW_DIAL_PREPARED_VALUE = 19;
  /**
   * <code>MANUAL_DIAL_STARTED = 20;</code>
   */
  public static final int MANUAL_DIAL_STARTED_VALUE = 20;
  /**
   * <code>PREVIEW_DIAL_STARTED = 21;</code>
   */
  public static final int PREVIEW_DIAL_STARTED_VALUE = 21;
  /**
   * <code>OUTBOUND_LOCKED = 22;</code>
   */
  public static final int OUTBOUND_LOCKED_VALUE = 22;
  /**
   * <code>WARM_AGENT_TRANSFER_STARTED_SOURCE = 23;</code>
   */
  public static final int WARM_AGENT_TRANSFER_STARTED_SOURCE_VALUE = 23;
  /**
   * <code>WARM_AGENT_TRANSFER_STARTED_DESTINATION = 24;</code>
   */
  public static final int WARM_AGENT_TRANSFER_STARTED_DESTINATION_VALUE = 24;
  /**
   * <code>WARM_OUTBOUND_TRANSFER_STARTED = 25;</code>
   */
  public static final int WARM_OUTBOUND_TRANSFER_STARTED_VALUE = 25;
  /**
   * <code>WARM_OUTBOUND_TRANSFER_PEER_LOST = 26;</code>
   */
  public static final int WARM_OUTBOUND_TRANSFER_PEER_LOST_VALUE = 26;
  /**
   * <code>PBX_POPUP_LOCKED = 27;</code>
   */
  public static final int PBX_POPUP_LOCKED_VALUE = 27;
  /**
   * <code>PEERED_WITH_CALL_ON_HOLD = 28;</code>
   */
  public static final int PEERED_WITH_CALL_ON_HOLD_VALUE = 28;
  /**
   * <code>CALLBACK_RESUMING = 29;</code>
   */
  public static final int CALLBACK_RESUMING_VALUE = 29;
  /**
   * <code>GUI_BUSY = 30;</code>
   */
  public static final int GUI_BUSY_VALUE = 30;
  /**
   * <code>INTERCOM = 31;</code>
   */
  public static final int INTERCOM_VALUE = 31;
  /**
   * <code>INTERCOM_RINGING_SOURCE = 32;</code>
   */
  public static final int INTERCOM_RINGING_SOURCE_VALUE = 32;
  /**
   * <code>INTERCOM_RINGING_DESTINATION = 33;</code>
   */
  public static final int INTERCOM_RINGING_DESTINATION_VALUE = 33;
  /**
   * <code>WARM_OUTBOUND_TRANSFER_OUTBOUND_LOST = 34;</code>
   */
  public static final int WARM_OUTBOUND_TRANSFER_OUTBOUND_LOST_VALUE = 34;
  /**
   * <code>PREPARED_TO_PEER = 35;</code>
   */
  public static final int PREPARED_TO_PEER_VALUE = 35;
  /**
   * <code>WARM_SKILL_TRANSFER_SOURCE_PENDING = 36;</code>
   */
  public static final int WARM_SKILL_TRANSFER_SOURCE_PENDING_VALUE = 36;
  /**
   * <pre>
   * when the transfer has started
   * </pre>
   *
   * <code>CALLER_TRANSFER_STARTED = 37;</code>
   */
  public static final int CALLER_TRANSFER_STARTED_VALUE = 37;
  /**
   * <pre>
   * when the transfer is running and the peer hangs up
   * </pre>
   *
   * <code>CALLER_TRANSFER_LOST_PEER = 38;</code>
   */
  public static final int CALLER_TRANSFER_LOST_PEER_VALUE = 38;
  /**
   * <pre>
   * when the transfer is running and the dest caller hangs up
   * </pre>
   *
   * <code>CALLER_TRANSFER_LOST_MERGED_CALLER = 39;</code>
   */
  public static final int CALLER_TRANSFER_LOST_MERGED_CALLER_VALUE = 39;
  /**
   * <pre>
   * interim state for cold outbound transfer
   * </pre>
   *
   * <code>COLD_OUTBOUND_TRANSFER_STARTED = 40;</code>
   */
  public static final int COLD_OUTBOUND_TRANSFER_STARTED_VALUE = 40;
  /**
   * <pre>
   * interim state for cold agent transfer
   * </pre>
   *
   * <code>COLD_AGENT_TRANSFER_STARTED = 41;</code>
   */
  public static final int COLD_AGENT_TRANSFER_STARTED_VALUE = 41;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AgentState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static AgentState forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN;
      case 1: return UNAVAILABLE;
      case 2: return IDLE;
      case 3: return READY;
      case 4: return HUNGUP;
      case 5: return DESTROYED;
      case 6: return PEERED;
      case 7: return PAUSED;
      case 8: return WRAPUP;
      case 10: return PREPARING_AFTER_IDLE;
      case 11: return PREPARING_AFTER_WRAPUP;
      case 12: return PREPARING_AFTER_PAUSE;
      case 13: return PREPARING_AFTER_DIAL_CANCEL;
      case 14: return PREPARING_AFTER_PBX_REJECT;
      case 15: return PREPARING_AFTER_PBX_HANGUP;
      case 16: return PREPARING_AFTER_PBX_WAS_TAKEN;
      case 17: return PREPARING_AFTER_GUI_BUSY;
      case 18: return MANUAL_DIAL_PREPARED;
      case 19: return PREVIEW_DIAL_PREPARED;
      case 20: return MANUAL_DIAL_STARTED;
      case 21: return PREVIEW_DIAL_STARTED;
      case 22: return OUTBOUND_LOCKED;
      case 23: return WARM_AGENT_TRANSFER_STARTED_SOURCE;
      case 24: return WARM_AGENT_TRANSFER_STARTED_DESTINATION;
      case 25: return WARM_OUTBOUND_TRANSFER_STARTED;
      case 26: return WARM_OUTBOUND_TRANSFER_PEER_LOST;
      case 27: return PBX_POPUP_LOCKED;
      case 28: return PEERED_WITH_CALL_ON_HOLD;
      case 29: return CALLBACK_RESUMING;
      case 30: return GUI_BUSY;
      case 31: return INTERCOM;
      case 32: return INTERCOM_RINGING_SOURCE;
      case 33: return INTERCOM_RINGING_DESTINATION;
      case 34: return WARM_OUTBOUND_TRANSFER_OUTBOUND_LOST;
      case 35: return PREPARED_TO_PEER;
      case 36: return WARM_SKILL_TRANSFER_SOURCE_PENDING;
      case 37: return CALLER_TRANSFER_STARTED;
      case 38: return CALLER_TRANSFER_LOST_PEER;
      case 39: return CALLER_TRANSFER_LOST_MERGED_CALLER;
      case 40: return COLD_OUTBOUND_TRANSFER_STARTED;
      case 41: return COLD_AGENT_TRANSFER_STARTED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AgentState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AgentState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AgentState>() {
          public AgentState findValueByNumber(int number) {
            return AgentState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.v1alpha1.agentsmith.ServiceProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final AgentState[] VALUES = values();

  public static AgentState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AgentState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.v1alpha1.agentsmith.AgentState)
}

