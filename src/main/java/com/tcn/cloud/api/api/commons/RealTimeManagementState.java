// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/wfm.proto

package com.tcn.cloud.api.api.commons;

/**
 * <pre>
 * The RealTimeManagementState, which is translated as a reduced AgentStatus from the acd service.
 * </pre>
 *
 * Protobuf enum {@code api.commons.RealTimeManagementState}
 */
public enum RealTimeManagementState
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Not set.
   * </pre>
   *
   * <code>UNSPECIFIED = 0;</code>
   */
  UNSPECIFIED(0),
  /**
   * <pre>
   * The agent is logged in.
   * </pre>
   *
   * <code>LOGGED_IN = 1;</code>
   */
  LOGGED_IN(1),
  /**
   * <pre>
   * The agent's call is on hold.
   * </pre>
   *
   * <code>CALL_ON_HOLD = 4;</code>
   */
  CALL_ON_HOLD(4),
  /**
   * <pre>
   * Agent is on an outbound call.
   * </pre>
   *
   * <code>OUTBOUND_CALL = 5;</code>
   */
  OUTBOUND_CALL(5),
  /**
   * <pre>
   * Agent is on a transfered call.
   * </pre>
   *
   * <code>TRANSFER = 7;</code>
   */
  TRANSFER(7),
  /**
   * <pre>
   * Agent is on a conference call.
   * </pre>
   *
   * <code>CONFERENCE = 8;</code>
   */
  CONFERENCE(8),
  /**
   * <pre>
   * Agent is ready to accept a call.
   * </pre>
   *
   * <code>READY = 9;</code>
   */
  READY(9),
  /**
   * <pre>
   * Agent is not_ready to accept a call.
   * </pre>
   *
   * <code>NOT_READY = 10;</code>
   */
  NOT_READY(10),
  /**
   * <pre>
   * The agent is is the wrap up state.
   * </pre>
   *
   * <code>WRAP_UP = 11;</code>
   */
  WRAP_UP(11),
  /**
   * <pre>
   * The agent is logged out.
   * </pre>
   *
   * <code>LOGGED_OUT = 13;</code>
   */
  LOGGED_OUT(13),
  /**
   * <pre>
   * The agent is in pause.
   * </pre>
   *
   * <code>PAUSE = 14;</code>
   */
  PAUSE(14),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Not set.
   * </pre>
   *
   * <code>UNSPECIFIED = 0;</code>
   */
  public static final int UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * The agent is logged in.
   * </pre>
   *
   * <code>LOGGED_IN = 1;</code>
   */
  public static final int LOGGED_IN_VALUE = 1;
  /**
   * <pre>
   * The agent's call is on hold.
   * </pre>
   *
   * <code>CALL_ON_HOLD = 4;</code>
   */
  public static final int CALL_ON_HOLD_VALUE = 4;
  /**
   * <pre>
   * Agent is on an outbound call.
   * </pre>
   *
   * <code>OUTBOUND_CALL = 5;</code>
   */
  public static final int OUTBOUND_CALL_VALUE = 5;
  /**
   * <pre>
   * Agent is on a transfered call.
   * </pre>
   *
   * <code>TRANSFER = 7;</code>
   */
  public static final int TRANSFER_VALUE = 7;
  /**
   * <pre>
   * Agent is on a conference call.
   * </pre>
   *
   * <code>CONFERENCE = 8;</code>
   */
  public static final int CONFERENCE_VALUE = 8;
  /**
   * <pre>
   * Agent is ready to accept a call.
   * </pre>
   *
   * <code>READY = 9;</code>
   */
  public static final int READY_VALUE = 9;
  /**
   * <pre>
   * Agent is not_ready to accept a call.
   * </pre>
   *
   * <code>NOT_READY = 10;</code>
   */
  public static final int NOT_READY_VALUE = 10;
  /**
   * <pre>
   * The agent is is the wrap up state.
   * </pre>
   *
   * <code>WRAP_UP = 11;</code>
   */
  public static final int WRAP_UP_VALUE = 11;
  /**
   * <pre>
   * The agent is logged out.
   * </pre>
   *
   * <code>LOGGED_OUT = 13;</code>
   */
  public static final int LOGGED_OUT_VALUE = 13;
  /**
   * <pre>
   * The agent is in pause.
   * </pre>
   *
   * <code>PAUSE = 14;</code>
   */
  public static final int PAUSE_VALUE = 14;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static RealTimeManagementState valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static RealTimeManagementState forNumber(int value) {
    switch (value) {
      case 0: return UNSPECIFIED;
      case 1: return LOGGED_IN;
      case 4: return CALL_ON_HOLD;
      case 5: return OUTBOUND_CALL;
      case 7: return TRANSFER;
      case 8: return CONFERENCE;
      case 9: return READY;
      case 10: return NOT_READY;
      case 11: return WRAP_UP;
      case 13: return LOGGED_OUT;
      case 14: return PAUSE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<RealTimeManagementState>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      RealTimeManagementState> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<RealTimeManagementState>() {
          public RealTimeManagementState findValueByNumber(int number) {
            return RealTimeManagementState.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.WfmProto.getDescriptor().getEnumTypes().get(20);
  }

  private static final RealTimeManagementState[] VALUES = values();

  public static RealTimeManagementState valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private RealTimeManagementState(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.RealTimeManagementState)
}

