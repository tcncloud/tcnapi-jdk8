// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/ana.proto

package com.tcn.cloud.api.api.commons;

/**
 * Protobuf enum {@code api.commons.WallaceDataType}
 */
public enum WallaceDataType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>WALLACE_DATA_TYPE_UNDEFINED = 0;</code>
   */
  WALLACE_DATA_TYPE_UNDEFINED(0),
  /**
   * <code>WALLACE_DATA_TYPE_KEYWORD = 1;</code>
   */
  WALLACE_DATA_TYPE_KEYWORD(1),
  /**
   * <code>WALLACE_DATA_TYPE_LONG = 2;</code>
   */
  WALLACE_DATA_TYPE_LONG(2),
  /**
   * <code>WALLACE_DATA_TYPE_DOUBLE = 3;</code>
   */
  WALLACE_DATA_TYPE_DOUBLE(3),
  /**
   * <code>WALLACE_DATA_TYPE_BOOLEAN = 4;</code>
   */
  WALLACE_DATA_TYPE_BOOLEAN(4),
  /**
   * <code>WALLACE_DATA_TYPE_DATE = 5;</code>
   */
  WALLACE_DATA_TYPE_DATE(5),
  /**
   * <code>WALLACE_DATA_TYPE_STRING = 6;</code>
   */
  WALLACE_DATA_TYPE_STRING(6),
  /**
   * <code>WALLACE_DATA_TYPE_NESTED = 7;</code>
   */
  WALLACE_DATA_TYPE_NESTED(7),
  /**
   * <code>WALLACE_DATA_TYPE_OBJECT = 8;</code>
   */
  WALLACE_DATA_TYPE_OBJECT(8),
  /**
   * <code>WALLACE_DATA_TYPE_FLATTENED = 9;</code>
   */
  WALLACE_DATA_TYPE_FLATTENED(9),
  /**
   * <code>WALLACE_DATA_TYPE_INTEGER_RANGE = 10;</code>
   */
  WALLACE_DATA_TYPE_INTEGER_RANGE(10),
  /**
   * <code>WALLACE_DATA_TYPE_FLOAT_RANGE = 11;</code>
   */
  WALLACE_DATA_TYPE_FLOAT_RANGE(11),
  /**
   * <code>WALLACE_DATA_TYPE_LONG_RANGE = 12;</code>
   */
  WALLACE_DATA_TYPE_LONG_RANGE(12),
  /**
   * <code>WALLACE_DATA_TYPE_DOUBLE_RANGE = 13;</code>
   */
  WALLACE_DATA_TYPE_DOUBLE_RANGE(13),
  /**
   * <code>WALLACE_DATA_TYPE_DATE_RANGE = 14;</code>
   */
  WALLACE_DATA_TYPE_DATE_RANGE(14),
  /**
   * <code>WALLACE_DATA_TYPE_IP_RANGE = 15;</code>
   */
  WALLACE_DATA_TYPE_IP_RANGE(15),
  /**
   * <pre>
   * dynamic objects
   * </pre>
   *
   * <code>WALLACE_DATA_TYPE_DOUBLE_KEYWORD = 20;</code>
   */
  WALLACE_DATA_TYPE_DOUBLE_KEYWORD(20),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>WALLACE_DATA_TYPE_UNDEFINED = 0;</code>
   */
  public static final int WALLACE_DATA_TYPE_UNDEFINED_VALUE = 0;
  /**
   * <code>WALLACE_DATA_TYPE_KEYWORD = 1;</code>
   */
  public static final int WALLACE_DATA_TYPE_KEYWORD_VALUE = 1;
  /**
   * <code>WALLACE_DATA_TYPE_LONG = 2;</code>
   */
  public static final int WALLACE_DATA_TYPE_LONG_VALUE = 2;
  /**
   * <code>WALLACE_DATA_TYPE_DOUBLE = 3;</code>
   */
  public static final int WALLACE_DATA_TYPE_DOUBLE_VALUE = 3;
  /**
   * <code>WALLACE_DATA_TYPE_BOOLEAN = 4;</code>
   */
  public static final int WALLACE_DATA_TYPE_BOOLEAN_VALUE = 4;
  /**
   * <code>WALLACE_DATA_TYPE_DATE = 5;</code>
   */
  public static final int WALLACE_DATA_TYPE_DATE_VALUE = 5;
  /**
   * <code>WALLACE_DATA_TYPE_STRING = 6;</code>
   */
  public static final int WALLACE_DATA_TYPE_STRING_VALUE = 6;
  /**
   * <code>WALLACE_DATA_TYPE_NESTED = 7;</code>
   */
  public static final int WALLACE_DATA_TYPE_NESTED_VALUE = 7;
  /**
   * <code>WALLACE_DATA_TYPE_OBJECT = 8;</code>
   */
  public static final int WALLACE_DATA_TYPE_OBJECT_VALUE = 8;
  /**
   * <code>WALLACE_DATA_TYPE_FLATTENED = 9;</code>
   */
  public static final int WALLACE_DATA_TYPE_FLATTENED_VALUE = 9;
  /**
   * <code>WALLACE_DATA_TYPE_INTEGER_RANGE = 10;</code>
   */
  public static final int WALLACE_DATA_TYPE_INTEGER_RANGE_VALUE = 10;
  /**
   * <code>WALLACE_DATA_TYPE_FLOAT_RANGE = 11;</code>
   */
  public static final int WALLACE_DATA_TYPE_FLOAT_RANGE_VALUE = 11;
  /**
   * <code>WALLACE_DATA_TYPE_LONG_RANGE = 12;</code>
   */
  public static final int WALLACE_DATA_TYPE_LONG_RANGE_VALUE = 12;
  /**
   * <code>WALLACE_DATA_TYPE_DOUBLE_RANGE = 13;</code>
   */
  public static final int WALLACE_DATA_TYPE_DOUBLE_RANGE_VALUE = 13;
  /**
   * <code>WALLACE_DATA_TYPE_DATE_RANGE = 14;</code>
   */
  public static final int WALLACE_DATA_TYPE_DATE_RANGE_VALUE = 14;
  /**
   * <code>WALLACE_DATA_TYPE_IP_RANGE = 15;</code>
   */
  public static final int WALLACE_DATA_TYPE_IP_RANGE_VALUE = 15;
  /**
   * <pre>
   * dynamic objects
   * </pre>
   *
   * <code>WALLACE_DATA_TYPE_DOUBLE_KEYWORD = 20;</code>
   */
  public static final int WALLACE_DATA_TYPE_DOUBLE_KEYWORD_VALUE = 20;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static WallaceDataType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static WallaceDataType forNumber(int value) {
    switch (value) {
      case 0: return WALLACE_DATA_TYPE_UNDEFINED;
      case 1: return WALLACE_DATA_TYPE_KEYWORD;
      case 2: return WALLACE_DATA_TYPE_LONG;
      case 3: return WALLACE_DATA_TYPE_DOUBLE;
      case 4: return WALLACE_DATA_TYPE_BOOLEAN;
      case 5: return WALLACE_DATA_TYPE_DATE;
      case 6: return WALLACE_DATA_TYPE_STRING;
      case 7: return WALLACE_DATA_TYPE_NESTED;
      case 8: return WALLACE_DATA_TYPE_OBJECT;
      case 9: return WALLACE_DATA_TYPE_FLATTENED;
      case 10: return WALLACE_DATA_TYPE_INTEGER_RANGE;
      case 11: return WALLACE_DATA_TYPE_FLOAT_RANGE;
      case 12: return WALLACE_DATA_TYPE_LONG_RANGE;
      case 13: return WALLACE_DATA_TYPE_DOUBLE_RANGE;
      case 14: return WALLACE_DATA_TYPE_DATE_RANGE;
      case 15: return WALLACE_DATA_TYPE_IP_RANGE;
      case 20: return WALLACE_DATA_TYPE_DOUBLE_KEYWORD;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<WallaceDataType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      WallaceDataType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<WallaceDataType>() {
          public WallaceDataType findValueByNumber(int number) {
            return WallaceDataType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.AnaProto.getDescriptor().getEnumTypes().get(4);
  }

  private static final WallaceDataType[] VALUES = values();

  public static WallaceDataType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private WallaceDataType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.WallaceDataType)
}

