// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/public/integrations.proto

package com.tcn.cloud.api.api.commons.public;

/**
 * Protobuf enum {@code api.commons.public.FieldSource}
 */
public enum FieldSource
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * we don't have a source for the field
   * </pre>
   *
   * <code>FIELD_SOURCE_NONE = 0;</code>
   */
  FIELD_SOURCE_NONE(0),
  /**
   * <pre>
   * we provide the field in the data when creating the link
   * </pre>
   *
   * <code>FIELD_SOURCE_LINK = 1;</code>
   */
  FIELD_SOURCE_LINK(1),
  /**
   * <pre>
   * we provide the field through the verification process's
   * integration_config, or journey collection (whichever is chosen)
   * </pre>
   *
   * <code>FIELD_SOURCE_VERIFICATION_DATA = 2;</code>
   */
  FIELD_SOURCE_VERIFICATION_DATA(2),
  /**
   * <pre>
   * we provide the field through the verification process's
   * api calls. By default this means the verifications api output fields
   * </pre>
   *
   * <code>FIELD_SOURCE_VERIFICATION_API = 3;</code>
   */
  FIELD_SOURCE_VERIFICATION_API(3),
  /**
   * <pre>
   * we provide the field through the invoice process's
   * integration_config, or journey collection (whichever is chosen)
   * </pre>
   *
   * <code>FIELD_SOURCE_INVOICE_DATA = 4;</code>
   */
  FIELD_SOURCE_INVOICE_DATA(4),
  /**
   * <pre>
   * we provide the field through the verification process's
   * api calls. By default this means the invoice api output fields
   * for v1 profiles this isn't possible unless the user is using  custom
   * payment link config
   * </pre>
   *
   * <code>FIELD_SOURCE_INVOICE_API = 5;</code>
   */
  FIELD_SOURCE_INVOICE_API(5),
  /**
   * <pre>
   * we provide the field through the payment process's
   * integration_config, or journey collection (whichever is chosen)
   * </pre>
   *
   * <code>FIELD_SOURCE_PAYMENT_DATA = 6;</code>
   */
  FIELD_SOURCE_PAYMENT_DATA(6),
  /**
   * <pre>
   * we provide the field through the payment process's
   * api calls. By default this means the payment process's request payload's
   * final call for v1 profiles this isn't possible unless the user is using
   * custom payment_link_config
   * </pre>
   *
   * <code>FIELD_SOURCE_PAYMENT_API = 7;</code>
   */
  FIELD_SOURCE_PAYMENT_API(7),
  /**
   * <pre>
   * we provide the field through the payment process's
   * payment form.  This only applies to custom payment_link_configs, since
   * there isn't a way to alter the payment form in v1 payment profiles.
   * </pre>
   *
   * <code>FIELD_SOURCE_PAYMENT_FORM = 8;</code>
   */
  FIELD_SOURCE_PAYMENT_FORM(8),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * we don't have a source for the field
   * </pre>
   *
   * <code>FIELD_SOURCE_NONE = 0;</code>
   */
  public static final int FIELD_SOURCE_NONE_VALUE = 0;
  /**
   * <pre>
   * we provide the field in the data when creating the link
   * </pre>
   *
   * <code>FIELD_SOURCE_LINK = 1;</code>
   */
  public static final int FIELD_SOURCE_LINK_VALUE = 1;
  /**
   * <pre>
   * we provide the field through the verification process's
   * integration_config, or journey collection (whichever is chosen)
   * </pre>
   *
   * <code>FIELD_SOURCE_VERIFICATION_DATA = 2;</code>
   */
  public static final int FIELD_SOURCE_VERIFICATION_DATA_VALUE = 2;
  /**
   * <pre>
   * we provide the field through the verification process's
   * api calls. By default this means the verifications api output fields
   * </pre>
   *
   * <code>FIELD_SOURCE_VERIFICATION_API = 3;</code>
   */
  public static final int FIELD_SOURCE_VERIFICATION_API_VALUE = 3;
  /**
   * <pre>
   * we provide the field through the invoice process's
   * integration_config, or journey collection (whichever is chosen)
   * </pre>
   *
   * <code>FIELD_SOURCE_INVOICE_DATA = 4;</code>
   */
  public static final int FIELD_SOURCE_INVOICE_DATA_VALUE = 4;
  /**
   * <pre>
   * we provide the field through the verification process's
   * api calls. By default this means the invoice api output fields
   * for v1 profiles this isn't possible unless the user is using  custom
   * payment link config
   * </pre>
   *
   * <code>FIELD_SOURCE_INVOICE_API = 5;</code>
   */
  public static final int FIELD_SOURCE_INVOICE_API_VALUE = 5;
  /**
   * <pre>
   * we provide the field through the payment process's
   * integration_config, or journey collection (whichever is chosen)
   * </pre>
   *
   * <code>FIELD_SOURCE_PAYMENT_DATA = 6;</code>
   */
  public static final int FIELD_SOURCE_PAYMENT_DATA_VALUE = 6;
  /**
   * <pre>
   * we provide the field through the payment process's
   * api calls. By default this means the payment process's request payload's
   * final call for v1 profiles this isn't possible unless the user is using
   * custom payment_link_config
   * </pre>
   *
   * <code>FIELD_SOURCE_PAYMENT_API = 7;</code>
   */
  public static final int FIELD_SOURCE_PAYMENT_API_VALUE = 7;
  /**
   * <pre>
   * we provide the field through the payment process's
   * payment form.  This only applies to custom payment_link_configs, since
   * there isn't a way to alter the payment form in v1 payment profiles.
   * </pre>
   *
   * <code>FIELD_SOURCE_PAYMENT_FORM = 8;</code>
   */
  public static final int FIELD_SOURCE_PAYMENT_FORM_VALUE = 8;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FieldSource valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static FieldSource forNumber(int value) {
    switch (value) {
      case 0: return FIELD_SOURCE_NONE;
      case 1: return FIELD_SOURCE_LINK;
      case 2: return FIELD_SOURCE_VERIFICATION_DATA;
      case 3: return FIELD_SOURCE_VERIFICATION_API;
      case 4: return FIELD_SOURCE_INVOICE_DATA;
      case 5: return FIELD_SOURCE_INVOICE_API;
      case 6: return FIELD_SOURCE_PAYMENT_DATA;
      case 7: return FIELD_SOURCE_PAYMENT_API;
      case 8: return FIELD_SOURCE_PAYMENT_FORM;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FieldSource>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      FieldSource> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<FieldSource>() {
          public FieldSource findValueByNumber(int number) {
            return FieldSource.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.public.IntegrationsProto.getDescriptor().getEnumTypes().get(11);
  }

  private static final FieldSource[] VALUES = values();

  public static FieldSource valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FieldSource(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.public.FieldSource)
}

