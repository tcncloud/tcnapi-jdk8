// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/task_group.proto

package com.tcn.cloud.api.api.commons;

/**
 * Protobuf enum {@code api.commons.TaskGroupStatus}
 */
public enum TaskGroupStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>TG_UNKNOWN = 0;</code>
   */
  TG_UNKNOWN(0),
  /**
   * <pre>
   * "TG_PREPARE", "Task Group is being prepared for scheduler"),
   * </pre>
   *
   * <code>TG_PREPARE = 1000;</code>
   */
  TG_PREPARE(1000),
  /**
   * <pre>
   * "TG_SCHEDULED", "Task Group is waiting for scheduler"),
   * </pre>
   *
   * <code>TG_SCHEDULED = 1100;</code>
   */
  TG_SCHEDULED(1100),
  /**
   * <pre>
   * "TG_SCHEDULED_LINKING", "Task Group is scheduling a link campaign"),
   * </pre>
   *
   * <code>TG_SCHEDULED_LINKING = 1110;</code>
   */
  TG_SCHEDULED_LINKING(1110),
  /**
   * <pre>
   * "TG_SCHEDULED_PAUSED", "Task Group will be set to paused when scheduled"),
   * </pre>
   *
   * <code>TG_SCHEDULED_PAUSED = 1120;</code>
   */
  TG_SCHEDULED_PAUSED(1120),
  /**
   * <pre>
   * "TG_RUNNING", "Task Group is currently executing calls"),
   * </pre>
   *
   * <code>TG_RUNNING = 1200;</code>
   */
  TG_RUNNING(1200),
  /**
   * <pre>
   * "TG_PAUSED", "Task Group has been signaled to pause calls until further notice"),
   * </pre>
   *
   * <code>TG_PAUSED = 1210;</code>
   */
  TG_PAUSED(1210),
  /**
   * <pre>
   * "TG_WAITING", "Task Group has been signaled to wait until the schedule rules it will allow it to run again"),
   * </pre>
   *
   * <code>TG_WAITING = 1220;</code>
   */
  TG_WAITING(1220),
  /**
   * <pre>
   * "TG_COMPLETED", "Task Group completed normally"),
   * </pre>
   *
   * <code>TG_COMPLETED = 1300;</code>
   */
  TG_COMPLETED(1300),
  /**
   * <pre>
   * "TG_CANCELLED_TIMEOUT", "Task Group was cancelled due to time restrictions"),
   * </pre>
   *
   * <code>TG_CANCELLED_TIMEOUT = 1310;</code>
   */
  TG_CANCELLED_TIMEOUT(1310),
  /**
   * <pre>
   * "TG_CANCELLED_USER", "Task Group was cancelled by login belonging to client"),
   * </pre>
   *
   * <code>TG_CANCELLED_USER = 1320;</code>
   */
  TG_CANCELLED_USER(1320),
  /**
   * <pre>
   * "TG_CANCELLED_ADMIN", "Task Group was cancelled by some login not belonging to client with permissions"),
   * </pre>
   *
   * <code>TG_CANCELLED_ADMIN = 1330;</code>
   */
  TG_CANCELLED_ADMIN(1330),
  /**
   * <pre>
   * "TG_SUMMED_COMPLETED", "Task Group completed normally and is summed"),
   * </pre>
   *
   * <code>TG_SUMMED_COMPLETED = 1400;</code>
   */
  TG_SUMMED_COMPLETED(1400),
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_TIMEOUT", "Task Group timedout and is summed"),
   * </pre>
   *
   * <code>TG_SUMMED_CANCELLED_TIMEOUT = 1410;</code>
   */
  TG_SUMMED_CANCELLED_TIMEOUT(1410),
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_USER", "Task Group was cancelled by login belonging to client and is summed"),
   * </pre>
   *
   * <code>TG_SUMMED_CANCELLED_USER = 1420;</code>
   */
  TG_SUMMED_CANCELLED_USER(1420),
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_ADMIN", "Task Group was cancelled by login not belonging to client and is summed")
   * </pre>
   *
   * <code>TG_SUMMED_CANCELLED_ADMIN = 1430;</code>
   */
  TG_SUMMED_CANCELLED_ADMIN(1430),
  /**
   * <pre>
   * "TG_SUMMED_COMPLETED", "Task Group completed normally, summed normally, and has been exported into the accounting packages
   * </pre>
   *
   * <code>TG_ACCOUNTINGEXPORT_COMPLETED = 1500;</code>
   */
  TG_ACCOUNTINGEXPORT_COMPLETED(1500),
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_TIMEOUT", "Task Group timedout, was summed normally, and has been exported into the accounting packages
   * </pre>
   *
   * <code>TG_ACCOUNTINGEXPORT_CANCELLED_TIMEOUT = 1510;</code>
   */
  TG_ACCOUNTINGEXPORT_CANCELLED_TIMEOUT(1510),
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_USER", "Task Group was cancelled by login belonging to client, was summed normally, and has been exported into the accounting packages
   * </pre>
   *
   * <code>TG_ACCOUNTINGEXPORT_CANCELLED_USER = 1520;</code>
   */
  TG_ACCOUNTINGEXPORT_CANCELLED_USER(1520),
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_ADMIN", "Task Group was cancelled by login not belonging to client, was summed normally, and has been exported into the accounting packages
   * </pre>
   *
   * <code>TG_ACCOUNTINGEXPORT_CANCELLED_ADMIN = 1530;</code>
   */
  TG_ACCOUNTINGEXPORT_CANCELLED_ADMIN(1530),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>TG_UNKNOWN = 0;</code>
   */
  public static final int TG_UNKNOWN_VALUE = 0;
  /**
   * <pre>
   * "TG_PREPARE", "Task Group is being prepared for scheduler"),
   * </pre>
   *
   * <code>TG_PREPARE = 1000;</code>
   */
  public static final int TG_PREPARE_VALUE = 1000;
  /**
   * <pre>
   * "TG_SCHEDULED", "Task Group is waiting for scheduler"),
   * </pre>
   *
   * <code>TG_SCHEDULED = 1100;</code>
   */
  public static final int TG_SCHEDULED_VALUE = 1100;
  /**
   * <pre>
   * "TG_SCHEDULED_LINKING", "Task Group is scheduling a link campaign"),
   * </pre>
   *
   * <code>TG_SCHEDULED_LINKING = 1110;</code>
   */
  public static final int TG_SCHEDULED_LINKING_VALUE = 1110;
  /**
   * <pre>
   * "TG_SCHEDULED_PAUSED", "Task Group will be set to paused when scheduled"),
   * </pre>
   *
   * <code>TG_SCHEDULED_PAUSED = 1120;</code>
   */
  public static final int TG_SCHEDULED_PAUSED_VALUE = 1120;
  /**
   * <pre>
   * "TG_RUNNING", "Task Group is currently executing calls"),
   * </pre>
   *
   * <code>TG_RUNNING = 1200;</code>
   */
  public static final int TG_RUNNING_VALUE = 1200;
  /**
   * <pre>
   * "TG_PAUSED", "Task Group has been signaled to pause calls until further notice"),
   * </pre>
   *
   * <code>TG_PAUSED = 1210;</code>
   */
  public static final int TG_PAUSED_VALUE = 1210;
  /**
   * <pre>
   * "TG_WAITING", "Task Group has been signaled to wait until the schedule rules it will allow it to run again"),
   * </pre>
   *
   * <code>TG_WAITING = 1220;</code>
   */
  public static final int TG_WAITING_VALUE = 1220;
  /**
   * <pre>
   * "TG_COMPLETED", "Task Group completed normally"),
   * </pre>
   *
   * <code>TG_COMPLETED = 1300;</code>
   */
  public static final int TG_COMPLETED_VALUE = 1300;
  /**
   * <pre>
   * "TG_CANCELLED_TIMEOUT", "Task Group was cancelled due to time restrictions"),
   * </pre>
   *
   * <code>TG_CANCELLED_TIMEOUT = 1310;</code>
   */
  public static final int TG_CANCELLED_TIMEOUT_VALUE = 1310;
  /**
   * <pre>
   * "TG_CANCELLED_USER", "Task Group was cancelled by login belonging to client"),
   * </pre>
   *
   * <code>TG_CANCELLED_USER = 1320;</code>
   */
  public static final int TG_CANCELLED_USER_VALUE = 1320;
  /**
   * <pre>
   * "TG_CANCELLED_ADMIN", "Task Group was cancelled by some login not belonging to client with permissions"),
   * </pre>
   *
   * <code>TG_CANCELLED_ADMIN = 1330;</code>
   */
  public static final int TG_CANCELLED_ADMIN_VALUE = 1330;
  /**
   * <pre>
   * "TG_SUMMED_COMPLETED", "Task Group completed normally and is summed"),
   * </pre>
   *
   * <code>TG_SUMMED_COMPLETED = 1400;</code>
   */
  public static final int TG_SUMMED_COMPLETED_VALUE = 1400;
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_TIMEOUT", "Task Group timedout and is summed"),
   * </pre>
   *
   * <code>TG_SUMMED_CANCELLED_TIMEOUT = 1410;</code>
   */
  public static final int TG_SUMMED_CANCELLED_TIMEOUT_VALUE = 1410;
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_USER", "Task Group was cancelled by login belonging to client and is summed"),
   * </pre>
   *
   * <code>TG_SUMMED_CANCELLED_USER = 1420;</code>
   */
  public static final int TG_SUMMED_CANCELLED_USER_VALUE = 1420;
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_ADMIN", "Task Group was cancelled by login not belonging to client and is summed")
   * </pre>
   *
   * <code>TG_SUMMED_CANCELLED_ADMIN = 1430;</code>
   */
  public static final int TG_SUMMED_CANCELLED_ADMIN_VALUE = 1430;
  /**
   * <pre>
   * "TG_SUMMED_COMPLETED", "Task Group completed normally, summed normally, and has been exported into the accounting packages
   * </pre>
   *
   * <code>TG_ACCOUNTINGEXPORT_COMPLETED = 1500;</code>
   */
  public static final int TG_ACCOUNTINGEXPORT_COMPLETED_VALUE = 1500;
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_TIMEOUT", "Task Group timedout, was summed normally, and has been exported into the accounting packages
   * </pre>
   *
   * <code>TG_ACCOUNTINGEXPORT_CANCELLED_TIMEOUT = 1510;</code>
   */
  public static final int TG_ACCOUNTINGEXPORT_CANCELLED_TIMEOUT_VALUE = 1510;
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_USER", "Task Group was cancelled by login belonging to client, was summed normally, and has been exported into the accounting packages
   * </pre>
   *
   * <code>TG_ACCOUNTINGEXPORT_CANCELLED_USER = 1520;</code>
   */
  public static final int TG_ACCOUNTINGEXPORT_CANCELLED_USER_VALUE = 1520;
  /**
   * <pre>
   * "TG_SUMMED_CANCELLED_ADMIN", "Task Group was cancelled by login not belonging to client, was summed normally, and has been exported into the accounting packages
   * </pre>
   *
   * <code>TG_ACCOUNTINGEXPORT_CANCELLED_ADMIN = 1530;</code>
   */
  public static final int TG_ACCOUNTINGEXPORT_CANCELLED_ADMIN_VALUE = 1530;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TaskGroupStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TaskGroupStatus forNumber(int value) {
    switch (value) {
      case 0: return TG_UNKNOWN;
      case 1000: return TG_PREPARE;
      case 1100: return TG_SCHEDULED;
      case 1110: return TG_SCHEDULED_LINKING;
      case 1120: return TG_SCHEDULED_PAUSED;
      case 1200: return TG_RUNNING;
      case 1210: return TG_PAUSED;
      case 1220: return TG_WAITING;
      case 1300: return TG_COMPLETED;
      case 1310: return TG_CANCELLED_TIMEOUT;
      case 1320: return TG_CANCELLED_USER;
      case 1330: return TG_CANCELLED_ADMIN;
      case 1400: return TG_SUMMED_COMPLETED;
      case 1410: return TG_SUMMED_CANCELLED_TIMEOUT;
      case 1420: return TG_SUMMED_CANCELLED_USER;
      case 1430: return TG_SUMMED_CANCELLED_ADMIN;
      case 1500: return TG_ACCOUNTINGEXPORT_COMPLETED;
      case 1510: return TG_ACCOUNTINGEXPORT_CANCELLED_TIMEOUT;
      case 1520: return TG_ACCOUNTINGEXPORT_CANCELLED_USER;
      case 1530: return TG_ACCOUNTINGEXPORT_CANCELLED_ADMIN;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TaskGroupStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TaskGroupStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TaskGroupStatus>() {
          public TaskGroupStatus findValueByNumber(int number) {
            return TaskGroupStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.TaskGroupProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final TaskGroupStatus[] VALUES = values();

  public static TaskGroupStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TaskGroupStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.TaskGroupStatus)
}

