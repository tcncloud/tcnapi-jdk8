// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/v0alpha/lms.proto

package com.tcn.cloud.api.api.v0alpha;

public interface CjsEnrichmentProcessOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.v0alpha.CjsEnrichmentProcess)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies the Journey collection to be used
   * Available options can be obtained
   * from Journey
   * </pre>
   *
   * <code>string cjs_collection_id = 3 [json_name = "cjsCollectionId"];</code>
   * @return The cjsCollectionId.
   */
  java.lang.String getCjsCollectionId();
  /**
   * <pre>
   * Specifies the Journey collection to be used
   * Available options can be obtained
   * from Journey
   * </pre>
   *
   * <code>string cjs_collection_id = 3 [json_name = "cjsCollectionId"];</code>
   * @return The bytes for cjsCollectionId.
   */
  com.google.protobuf.ByteString
      getCjsCollectionIdBytes();

  /**
   * <pre>
   * Specifies the LMS list field
   * to be used as the key when
   * doing search in CJS list
   * </pre>
   *
   * <code>string key_field = 4 [json_name = "keyField"];</code>
   * @return The keyField.
   */
  java.lang.String getKeyField();
  /**
   * <pre>
   * Specifies the LMS list field
   * to be used as the key when
   * doing search in CJS list
   * </pre>
   *
   * <code>string key_field = 4 [json_name = "keyField"];</code>
   * @return The bytes for keyField.
   */
  com.google.protobuf.ByteString
      getKeyFieldBytes();

  /**
   * <pre>
   * Specifies how to enrich the LMS list
   * OR - Acjs all records, merging any matches
   * XOR - Keep records that are only in one of the lists (exclude those in both)
   * AND - Keep only records that are in both lists, merge the records
   * JOIN - Keep all of the primary source and merge in matches from the
   *        secondary source
   * </pre>
   *
   * <code>.api.commons.EnrichmentType enrich_type = 5 [json_name = "enrichType"];</code>
   * @return The enum numeric value on the wire for enrichType.
   */
  int getEnrichTypeValue();
  /**
   * <pre>
   * Specifies how to enrich the LMS list
   * OR - Acjs all records, merging any matches
   * XOR - Keep records that are only in one of the lists (exclude those in both)
   * AND - Keep only records that are in both lists, merge the records
   * JOIN - Keep all of the primary source and merge in matches from the
   *        secondary source
   * </pre>
   *
   * <code>.api.commons.EnrichmentType enrich_type = 5 [json_name = "enrichType"];</code>
   * @return The enrichType.
   */
  com.tcn.cloud.api.api.commons.EnrichmentType getEnrichType();

  /**
   * <pre>
   * Specifies the primary list (LMS or CJS)
   * When merging records, all the fields from the primary
   * source will be used, and only the extra fields (if any)
   * will be added to the record
   * </pre>
   *
   * <code>.api.commons.PrimarySource primary_source = 6 [json_name = "primarySource"];</code>
   * @return The enum numeric value on the wire for primarySource.
   */
  int getPrimarySourceValue();
  /**
   * <pre>
   * Specifies the primary list (LMS or CJS)
   * When merging records, all the fields from the primary
   * source will be used, and only the extra fields (if any)
   * will be added to the record
   * </pre>
   *
   * <code>.api.commons.PrimarySource primary_source = 6 [json_name = "primarySource"];</code>
   * @return The primarySource.
   */
  com.tcn.cloud.api.api.commons.PrimarySource getPrimarySource();

  /**
   * <pre>
   * Specifies the Journey collection field
   * to be matched against.
   * Available options can be obtained
   * from Journey
   * </pre>
   *
   * <code>string cjs_key_field_name = 7 [json_name = "cjsKeyFieldName"];</code>
   * @return The cjsKeyFieldName.
   */
  java.lang.String getCjsKeyFieldName();
  /**
   * <pre>
   * Specifies the Journey collection field
   * to be matched against.
   * Available options can be obtained
   * from Journey
   * </pre>
   *
   * <code>string cjs_key_field_name = 7 [json_name = "cjsKeyFieldName"];</code>
   * @return The bytes for cjsKeyFieldName.
   */
  com.google.protobuf.ByteString
      getCjsKeyFieldNameBytes();

  /**
   * <pre>
   * Specifies if the primary list columns
   * should be overwritten by the secondary
   * on matching column names
   * </pre>
   *
   * <code>bool column_overwrite = 8 [json_name = "columnOverwrite"];</code>
   * @return The columnOverwrite.
   */
  boolean getColumnOverwrite();

  /**
   * <pre>
   * Specifies what to do when there
   * is a duplicate match for the key in the collection
   * </pre>
   *
   * <code>.api.commons.DedupKeyPolicy dedup_key_policy = 9 [json_name = "dedupKeyPolicy"];</code>
   * @return The enum numeric value on the wire for dedupKeyPolicy.
   */
  int getDedupKeyPolicyValue();
  /**
   * <pre>
   * Specifies what to do when there
   * is a duplicate match for the key in the collection
   * </pre>
   *
   * <code>.api.commons.DedupKeyPolicy dedup_key_policy = 9 [json_name = "dedupKeyPolicy"];</code>
   * @return The dedupKeyPolicy.
   */
  com.tcn.cloud.api.api.commons.DedupKeyPolicy getDedupKeyPolicy();
}
