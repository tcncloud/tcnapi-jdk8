// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/org/preferences.proto

package com.tcn.cloud.api.api.commons.org;

/**
 * <pre>
 * Preferences for audio recording properties.
 * </pre>
 *
 * Protobuf type {@code api.commons.org.RecordingPreferences}
 */
public final class RecordingPreferences extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:api.commons.org.RecordingPreferences)
    RecordingPreferencesOrBuilder {
private static final long serialVersionUID = 0L;
  // Use RecordingPreferences.newBuilder() to construct.
  private RecordingPreferences(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private RecordingPreferences() {
    orgId_ = "";
    exportFileType_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new RecordingPreferences();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private RecordingPreferences(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            orgId_ = s;
            break;
          }
          case 80: {

            conventionEnabled_ = input.readBool();
            break;
          }
          case 90: {
            com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.Builder subBuilder = null;
            if (fileNameConvention_ != null) {
              subBuilder = fileNameConvention_.toBuilder();
            }
            fileNameConvention_ = input.readMessage(com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fileNameConvention_);
              fileNameConvention_ = subBuilder.buildPartial();
            }

            break;
          }
          case 96: {

            zipConventionEnabled_ = input.readBool();
            break;
          }
          case 106: {
            com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.Builder subBuilder = null;
            if (zipFileNameConvention_ != null) {
              subBuilder = zipFileNameConvention_.toBuilder();
            }
            zipFileNameConvention_ = input.readMessage(com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(zipFileNameConvention_);
              zipFileNameConvention_ = subBuilder.buildPartial();
            }

            break;
          }
          case 112: {
            int rawValue = input.readEnum();

            exportFileType_ = rawValue;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.org.PreferencesProto.internal_static_api_commons_org_RecordingPreferences_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.tcn.cloud.api.api.commons.org.PreferencesProto.internal_static_api_commons_org_RecordingPreferences_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.tcn.cloud.api.api.commons.org.RecordingPreferences.class, com.tcn.cloud.api.api.commons.org.RecordingPreferences.Builder.class);
  }

  public static final int ORG_ID_FIELD_NUMBER = 1;
  private volatile java.lang.Object orgId_;
  /**
   * <pre>
   * Org ID.
   * </pre>
   *
   * <code>string org_id = 1 [json_name = "orgId"];</code>
   * @return The orgId.
   */
  @java.lang.Override
  public java.lang.String getOrgId() {
    java.lang.Object ref = orgId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      orgId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Org ID.
   * </pre>
   *
   * <code>string org_id = 1 [json_name = "orgId"];</code>
   * @return The bytes for orgId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getOrgIdBytes() {
    java.lang.Object ref = orgId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      orgId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CONVENTION_ENABLED_FIELD_NUMBER = 10;
  private boolean conventionEnabled_;
  /**
   * <pre>
   * Whether to use custom recordings file name convention.
   * </pre>
   *
   * <code>bool convention_enabled = 10 [json_name = "conventionEnabled"];</code>
   * @return The conventionEnabled.
   */
  @java.lang.Override
  public boolean getConventionEnabled() {
    return conventionEnabled_;
  }

  public static final int FILE_NAME_CONVENTION_FIELD_NUMBER = 11;
  private com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention fileNameConvention_;
  /**
   * <pre>
   * File name convention for recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
   * @return Whether the fileNameConvention field is set.
   */
  @java.lang.Override
  public boolean hasFileNameConvention() {
    return fileNameConvention_ != null;
  }
  /**
   * <pre>
   * File name convention for recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
   * @return The fileNameConvention.
   */
  @java.lang.Override
  public com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention getFileNameConvention() {
    return fileNameConvention_ == null ? com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.getDefaultInstance() : fileNameConvention_;
  }
  /**
   * <pre>
   * File name convention for recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
   */
  @java.lang.Override
  public com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConventionOrBuilder getFileNameConventionOrBuilder() {
    return getFileNameConvention();
  }

  public static final int ZIP_CONVENTION_ENABLED_FIELD_NUMBER = 12;
  private boolean zipConventionEnabled_;
  /**
   * <pre>
   * Whether to use custom recordings file name convention for zip.
   * </pre>
   *
   * <code>bool zip_convention_enabled = 12 [json_name = "zipConventionEnabled"];</code>
   * @return The zipConventionEnabled.
   */
  @java.lang.Override
  public boolean getZipConventionEnabled() {
    return zipConventionEnabled_;
  }

  public static final int ZIP_FILE_NAME_CONVENTION_FIELD_NUMBER = 13;
  private com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention zipFileNameConvention_;
  /**
   * <pre>
   * File name convention for archived/compressed zip recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
   * @return Whether the zipFileNameConvention field is set.
   */
  @java.lang.Override
  public boolean hasZipFileNameConvention() {
    return zipFileNameConvention_ != null;
  }
  /**
   * <pre>
   * File name convention for archived/compressed zip recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
   * @return The zipFileNameConvention.
   */
  @java.lang.Override
  public com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention getZipFileNameConvention() {
    return zipFileNameConvention_ == null ? com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.getDefaultInstance() : zipFileNameConvention_;
  }
  /**
   * <pre>
   * File name convention for archived/compressed zip recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
   */
  @java.lang.Override
  public com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConventionOrBuilder getZipFileNameConventionOrBuilder() {
    return getZipFileNameConvention();
  }

  public static final int EXPORT_FILE_TYPE_FIELD_NUMBER = 14;
  private int exportFileType_;
  /**
   * <pre>
   * Recording export file type (.wav or .mp3).
   * </pre>
   *
   * <code>.api.commons.RecordingFileType export_file_type = 14 [json_name = "exportFileType"];</code>
   * @return The enum numeric value on the wire for exportFileType.
   */
  @java.lang.Override public int getExportFileTypeValue() {
    return exportFileType_;
  }
  /**
   * <pre>
   * Recording export file type (.wav or .mp3).
   * </pre>
   *
   * <code>.api.commons.RecordingFileType export_file_type = 14 [json_name = "exportFileType"];</code>
   * @return The exportFileType.
   */
  @java.lang.Override public com.tcn.cloud.api.api.commons.RecordingFileType getExportFileType() {
    @SuppressWarnings("deprecation")
    com.tcn.cloud.api.api.commons.RecordingFileType result = com.tcn.cloud.api.api.commons.RecordingFileType.valueOf(exportFileType_);
    return result == null ? com.tcn.cloud.api.api.commons.RecordingFileType.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getOrgIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, orgId_);
    }
    if (conventionEnabled_ != false) {
      output.writeBool(10, conventionEnabled_);
    }
    if (fileNameConvention_ != null) {
      output.writeMessage(11, getFileNameConvention());
    }
    if (zipConventionEnabled_ != false) {
      output.writeBool(12, zipConventionEnabled_);
    }
    if (zipFileNameConvention_ != null) {
      output.writeMessage(13, getZipFileNameConvention());
    }
    if (exportFileType_ != com.tcn.cloud.api.api.commons.RecordingFileType.RECORDING_FILE_TYPE_WAV.getNumber()) {
      output.writeEnum(14, exportFileType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getOrgIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, orgId_);
    }
    if (conventionEnabled_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, conventionEnabled_);
    }
    if (fileNameConvention_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getFileNameConvention());
    }
    if (zipConventionEnabled_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(12, zipConventionEnabled_);
    }
    if (zipFileNameConvention_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getZipFileNameConvention());
    }
    if (exportFileType_ != com.tcn.cloud.api.api.commons.RecordingFileType.RECORDING_FILE_TYPE_WAV.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(14, exportFileType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.tcn.cloud.api.api.commons.org.RecordingPreferences)) {
      return super.equals(obj);
    }
    com.tcn.cloud.api.api.commons.org.RecordingPreferences other = (com.tcn.cloud.api.api.commons.org.RecordingPreferences) obj;

    if (!getOrgId()
        .equals(other.getOrgId())) return false;
    if (getConventionEnabled()
        != other.getConventionEnabled()) return false;
    if (hasFileNameConvention() != other.hasFileNameConvention()) return false;
    if (hasFileNameConvention()) {
      if (!getFileNameConvention()
          .equals(other.getFileNameConvention())) return false;
    }
    if (getZipConventionEnabled()
        != other.getZipConventionEnabled()) return false;
    if (hasZipFileNameConvention() != other.hasZipFileNameConvention()) return false;
    if (hasZipFileNameConvention()) {
      if (!getZipFileNameConvention()
          .equals(other.getZipFileNameConvention())) return false;
    }
    if (exportFileType_ != other.exportFileType_) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ORG_ID_FIELD_NUMBER;
    hash = (53 * hash) + getOrgId().hashCode();
    hash = (37 * hash) + CONVENTION_ENABLED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getConventionEnabled());
    if (hasFileNameConvention()) {
      hash = (37 * hash) + FILE_NAME_CONVENTION_FIELD_NUMBER;
      hash = (53 * hash) + getFileNameConvention().hashCode();
    }
    hash = (37 * hash) + ZIP_CONVENTION_ENABLED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getZipConventionEnabled());
    if (hasZipFileNameConvention()) {
      hash = (37 * hash) + ZIP_FILE_NAME_CONVENTION_FIELD_NUMBER;
      hash = (53 * hash) + getZipFileNameConvention().hashCode();
    }
    hash = (37 * hash) + EXPORT_FILE_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + exportFileType_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.tcn.cloud.api.api.commons.org.RecordingPreferences prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Preferences for audio recording properties.
   * </pre>
   *
   * Protobuf type {@code api.commons.org.RecordingPreferences}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:api.commons.org.RecordingPreferences)
      com.tcn.cloud.api.api.commons.org.RecordingPreferencesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.tcn.cloud.api.api.commons.org.PreferencesProto.internal_static_api_commons_org_RecordingPreferences_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.tcn.cloud.api.api.commons.org.PreferencesProto.internal_static_api_commons_org_RecordingPreferences_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.tcn.cloud.api.api.commons.org.RecordingPreferences.class, com.tcn.cloud.api.api.commons.org.RecordingPreferences.Builder.class);
    }

    // Construct using com.tcn.cloud.api.api.commons.org.RecordingPreferences.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      orgId_ = "";

      conventionEnabled_ = false;

      if (fileNameConventionBuilder_ == null) {
        fileNameConvention_ = null;
      } else {
        fileNameConvention_ = null;
        fileNameConventionBuilder_ = null;
      }
      zipConventionEnabled_ = false;

      if (zipFileNameConventionBuilder_ == null) {
        zipFileNameConvention_ = null;
      } else {
        zipFileNameConvention_ = null;
        zipFileNameConventionBuilder_ = null;
      }
      exportFileType_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.tcn.cloud.api.api.commons.org.PreferencesProto.internal_static_api_commons_org_RecordingPreferences_descriptor;
    }

    @java.lang.Override
    public com.tcn.cloud.api.api.commons.org.RecordingPreferences getDefaultInstanceForType() {
      return com.tcn.cloud.api.api.commons.org.RecordingPreferences.getDefaultInstance();
    }

    @java.lang.Override
    public com.tcn.cloud.api.api.commons.org.RecordingPreferences build() {
      com.tcn.cloud.api.api.commons.org.RecordingPreferences result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.tcn.cloud.api.api.commons.org.RecordingPreferences buildPartial() {
      com.tcn.cloud.api.api.commons.org.RecordingPreferences result = new com.tcn.cloud.api.api.commons.org.RecordingPreferences(this);
      result.orgId_ = orgId_;
      result.conventionEnabled_ = conventionEnabled_;
      if (fileNameConventionBuilder_ == null) {
        result.fileNameConvention_ = fileNameConvention_;
      } else {
        result.fileNameConvention_ = fileNameConventionBuilder_.build();
      }
      result.zipConventionEnabled_ = zipConventionEnabled_;
      if (zipFileNameConventionBuilder_ == null) {
        result.zipFileNameConvention_ = zipFileNameConvention_;
      } else {
        result.zipFileNameConvention_ = zipFileNameConventionBuilder_.build();
      }
      result.exportFileType_ = exportFileType_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.tcn.cloud.api.api.commons.org.RecordingPreferences) {
        return mergeFrom((com.tcn.cloud.api.api.commons.org.RecordingPreferences)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.tcn.cloud.api.api.commons.org.RecordingPreferences other) {
      if (other == com.tcn.cloud.api.api.commons.org.RecordingPreferences.getDefaultInstance()) return this;
      if (!other.getOrgId().isEmpty()) {
        orgId_ = other.orgId_;
        onChanged();
      }
      if (other.getConventionEnabled() != false) {
        setConventionEnabled(other.getConventionEnabled());
      }
      if (other.hasFileNameConvention()) {
        mergeFileNameConvention(other.getFileNameConvention());
      }
      if (other.getZipConventionEnabled() != false) {
        setZipConventionEnabled(other.getZipConventionEnabled());
      }
      if (other.hasZipFileNameConvention()) {
        mergeZipFileNameConvention(other.getZipFileNameConvention());
      }
      if (other.exportFileType_ != 0) {
        setExportFileTypeValue(other.getExportFileTypeValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.tcn.cloud.api.api.commons.org.RecordingPreferences parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.tcn.cloud.api.api.commons.org.RecordingPreferences) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object orgId_ = "";
    /**
     * <pre>
     * Org ID.
     * </pre>
     *
     * <code>string org_id = 1 [json_name = "orgId"];</code>
     * @return The orgId.
     */
    public java.lang.String getOrgId() {
      java.lang.Object ref = orgId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        orgId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Org ID.
     * </pre>
     *
     * <code>string org_id = 1 [json_name = "orgId"];</code>
     * @return The bytes for orgId.
     */
    public com.google.protobuf.ByteString
        getOrgIdBytes() {
      java.lang.Object ref = orgId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        orgId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Org ID.
     * </pre>
     *
     * <code>string org_id = 1 [json_name = "orgId"];</code>
     * @param value The orgId to set.
     * @return This builder for chaining.
     */
    public Builder setOrgId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      orgId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Org ID.
     * </pre>
     *
     * <code>string org_id = 1 [json_name = "orgId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOrgId() {
      
      orgId_ = getDefaultInstance().getOrgId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Org ID.
     * </pre>
     *
     * <code>string org_id = 1 [json_name = "orgId"];</code>
     * @param value The bytes for orgId to set.
     * @return This builder for chaining.
     */
    public Builder setOrgIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      orgId_ = value;
      onChanged();
      return this;
    }

    private boolean conventionEnabled_ ;
    /**
     * <pre>
     * Whether to use custom recordings file name convention.
     * </pre>
     *
     * <code>bool convention_enabled = 10 [json_name = "conventionEnabled"];</code>
     * @return The conventionEnabled.
     */
    @java.lang.Override
    public boolean getConventionEnabled() {
      return conventionEnabled_;
    }
    /**
     * <pre>
     * Whether to use custom recordings file name convention.
     * </pre>
     *
     * <code>bool convention_enabled = 10 [json_name = "conventionEnabled"];</code>
     * @param value The conventionEnabled to set.
     * @return This builder for chaining.
     */
    public Builder setConventionEnabled(boolean value) {
      
      conventionEnabled_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to use custom recordings file name convention.
     * </pre>
     *
     * <code>bool convention_enabled = 10 [json_name = "conventionEnabled"];</code>
     * @return This builder for chaining.
     */
    public Builder clearConventionEnabled() {
      
      conventionEnabled_ = false;
      onChanged();
      return this;
    }

    private com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention fileNameConvention_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention, com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.Builder, com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConventionOrBuilder> fileNameConventionBuilder_;
    /**
     * <pre>
     * File name convention for recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
     * @return Whether the fileNameConvention field is set.
     */
    public boolean hasFileNameConvention() {
      return fileNameConventionBuilder_ != null || fileNameConvention_ != null;
    }
    /**
     * <pre>
     * File name convention for recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
     * @return The fileNameConvention.
     */
    public com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention getFileNameConvention() {
      if (fileNameConventionBuilder_ == null) {
        return fileNameConvention_ == null ? com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.getDefaultInstance() : fileNameConvention_;
      } else {
        return fileNameConventionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * File name convention for recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
     */
    public Builder setFileNameConvention(com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention value) {
      if (fileNameConventionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fileNameConvention_ = value;
        onChanged();
      } else {
        fileNameConventionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * File name convention for recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
     */
    public Builder setFileNameConvention(
        com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.Builder builderForValue) {
      if (fileNameConventionBuilder_ == null) {
        fileNameConvention_ = builderForValue.build();
        onChanged();
      } else {
        fileNameConventionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * File name convention for recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
     */
    public Builder mergeFileNameConvention(com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention value) {
      if (fileNameConventionBuilder_ == null) {
        if (fileNameConvention_ != null) {
          fileNameConvention_ =
            com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.newBuilder(fileNameConvention_).mergeFrom(value).buildPartial();
        } else {
          fileNameConvention_ = value;
        }
        onChanged();
      } else {
        fileNameConventionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * File name convention for recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
     */
    public Builder clearFileNameConvention() {
      if (fileNameConventionBuilder_ == null) {
        fileNameConvention_ = null;
        onChanged();
      } else {
        fileNameConvention_ = null;
        fileNameConventionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * File name convention for recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
     */
    public com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.Builder getFileNameConventionBuilder() {
      
      onChanged();
      return getFileNameConventionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * File name convention for recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
     */
    public com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConventionOrBuilder getFileNameConventionOrBuilder() {
      if (fileNameConventionBuilder_ != null) {
        return fileNameConventionBuilder_.getMessageOrBuilder();
      } else {
        return fileNameConvention_ == null ?
            com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.getDefaultInstance() : fileNameConvention_;
      }
    }
    /**
     * <pre>
     * File name convention for recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention, com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.Builder, com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConventionOrBuilder> 
        getFileNameConventionFieldBuilder() {
      if (fileNameConventionBuilder_ == null) {
        fileNameConventionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention, com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention.Builder, com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConventionOrBuilder>(
                getFileNameConvention(),
                getParentForChildren(),
                isClean());
        fileNameConvention_ = null;
      }
      return fileNameConventionBuilder_;
    }

    private boolean zipConventionEnabled_ ;
    /**
     * <pre>
     * Whether to use custom recordings file name convention for zip.
     * </pre>
     *
     * <code>bool zip_convention_enabled = 12 [json_name = "zipConventionEnabled"];</code>
     * @return The zipConventionEnabled.
     */
    @java.lang.Override
    public boolean getZipConventionEnabled() {
      return zipConventionEnabled_;
    }
    /**
     * <pre>
     * Whether to use custom recordings file name convention for zip.
     * </pre>
     *
     * <code>bool zip_convention_enabled = 12 [json_name = "zipConventionEnabled"];</code>
     * @param value The zipConventionEnabled to set.
     * @return This builder for chaining.
     */
    public Builder setZipConventionEnabled(boolean value) {
      
      zipConventionEnabled_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whether to use custom recordings file name convention for zip.
     * </pre>
     *
     * <code>bool zip_convention_enabled = 12 [json_name = "zipConventionEnabled"];</code>
     * @return This builder for chaining.
     */
    public Builder clearZipConventionEnabled() {
      
      zipConventionEnabled_ = false;
      onChanged();
      return this;
    }

    private com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention zipFileNameConvention_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention, com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.Builder, com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConventionOrBuilder> zipFileNameConventionBuilder_;
    /**
     * <pre>
     * File name convention for archived/compressed zip recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
     * @return Whether the zipFileNameConvention field is set.
     */
    public boolean hasZipFileNameConvention() {
      return zipFileNameConventionBuilder_ != null || zipFileNameConvention_ != null;
    }
    /**
     * <pre>
     * File name convention for archived/compressed zip recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
     * @return The zipFileNameConvention.
     */
    public com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention getZipFileNameConvention() {
      if (zipFileNameConventionBuilder_ == null) {
        return zipFileNameConvention_ == null ? com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.getDefaultInstance() : zipFileNameConvention_;
      } else {
        return zipFileNameConventionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * File name convention for archived/compressed zip recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
     */
    public Builder setZipFileNameConvention(com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention value) {
      if (zipFileNameConventionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        zipFileNameConvention_ = value;
        onChanged();
      } else {
        zipFileNameConventionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * File name convention for archived/compressed zip recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
     */
    public Builder setZipFileNameConvention(
        com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.Builder builderForValue) {
      if (zipFileNameConventionBuilder_ == null) {
        zipFileNameConvention_ = builderForValue.build();
        onChanged();
      } else {
        zipFileNameConventionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * File name convention for archived/compressed zip recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
     */
    public Builder mergeZipFileNameConvention(com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention value) {
      if (zipFileNameConventionBuilder_ == null) {
        if (zipFileNameConvention_ != null) {
          zipFileNameConvention_ =
            com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.newBuilder(zipFileNameConvention_).mergeFrom(value).buildPartial();
        } else {
          zipFileNameConvention_ = value;
        }
        onChanged();
      } else {
        zipFileNameConventionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * File name convention for archived/compressed zip recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
     */
    public Builder clearZipFileNameConvention() {
      if (zipFileNameConventionBuilder_ == null) {
        zipFileNameConvention_ = null;
        onChanged();
      } else {
        zipFileNameConvention_ = null;
        zipFileNameConventionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * File name convention for archived/compressed zip recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
     */
    public com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.Builder getZipFileNameConventionBuilder() {
      
      onChanged();
      return getZipFileNameConventionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * File name convention for archived/compressed zip recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
     */
    public com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConventionOrBuilder getZipFileNameConventionOrBuilder() {
      if (zipFileNameConventionBuilder_ != null) {
        return zipFileNameConventionBuilder_.getMessageOrBuilder();
      } else {
        return zipFileNameConvention_ == null ?
            com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.getDefaultInstance() : zipFileNameConvention_;
      }
    }
    /**
     * <pre>
     * File name convention for archived/compressed zip recording files.
     * </pre>
     *
     * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention, com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.Builder, com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConventionOrBuilder> 
        getZipFileNameConventionFieldBuilder() {
      if (zipFileNameConventionBuilder_ == null) {
        zipFileNameConventionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention, com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention.Builder, com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConventionOrBuilder>(
                getZipFileNameConvention(),
                getParentForChildren(),
                isClean());
        zipFileNameConvention_ = null;
      }
      return zipFileNameConventionBuilder_;
    }

    private int exportFileType_ = 0;
    /**
     * <pre>
     * Recording export file type (.wav or .mp3).
     * </pre>
     *
     * <code>.api.commons.RecordingFileType export_file_type = 14 [json_name = "exportFileType"];</code>
     * @return The enum numeric value on the wire for exportFileType.
     */
    @java.lang.Override public int getExportFileTypeValue() {
      return exportFileType_;
    }
    /**
     * <pre>
     * Recording export file type (.wav or .mp3).
     * </pre>
     *
     * <code>.api.commons.RecordingFileType export_file_type = 14 [json_name = "exportFileType"];</code>
     * @param value The enum numeric value on the wire for exportFileType to set.
     * @return This builder for chaining.
     */
    public Builder setExportFileTypeValue(int value) {
      
      exportFileType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Recording export file type (.wav or .mp3).
     * </pre>
     *
     * <code>.api.commons.RecordingFileType export_file_type = 14 [json_name = "exportFileType"];</code>
     * @return The exportFileType.
     */
    @java.lang.Override
    public com.tcn.cloud.api.api.commons.RecordingFileType getExportFileType() {
      @SuppressWarnings("deprecation")
      com.tcn.cloud.api.api.commons.RecordingFileType result = com.tcn.cloud.api.api.commons.RecordingFileType.valueOf(exportFileType_);
      return result == null ? com.tcn.cloud.api.api.commons.RecordingFileType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Recording export file type (.wav or .mp3).
     * </pre>
     *
     * <code>.api.commons.RecordingFileType export_file_type = 14 [json_name = "exportFileType"];</code>
     * @param value The exportFileType to set.
     * @return This builder for chaining.
     */
    public Builder setExportFileType(com.tcn.cloud.api.api.commons.RecordingFileType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      exportFileType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Recording export file type (.wav or .mp3).
     * </pre>
     *
     * <code>.api.commons.RecordingFileType export_file_type = 14 [json_name = "exportFileType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearExportFileType() {
      
      exportFileType_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:api.commons.org.RecordingPreferences)
  }

  // @@protoc_insertion_point(class_scope:api.commons.org.RecordingPreferences)
  private static final com.tcn.cloud.api.api.commons.org.RecordingPreferences DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.tcn.cloud.api.api.commons.org.RecordingPreferences();
  }

  public static com.tcn.cloud.api.api.commons.org.RecordingPreferences getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<RecordingPreferences>
      PARSER = new com.google.protobuf.AbstractParser<RecordingPreferences>() {
    @java.lang.Override
    public RecordingPreferences parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new RecordingPreferences(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<RecordingPreferences> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<RecordingPreferences> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.tcn.cloud.api.api.commons.org.RecordingPreferences getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

