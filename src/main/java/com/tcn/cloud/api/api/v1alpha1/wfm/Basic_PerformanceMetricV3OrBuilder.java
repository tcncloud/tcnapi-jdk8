// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/v1alpha1/wfm/wfm.proto

package com.tcn.cloud.api.api.v1alpha1.wfm;

public interface Basic_PerformanceMetricV3OrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.v1alpha1.wfm.Basic_PerformanceMetricV3)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Datetime range over which the metrics were determined.
   * </pre>
   *
   * <code>.api.commons.DatetimeRange date_range = 1 [json_name = "dateRange"];</code>
   * @return Whether the dateRange field is set.
   */
  boolean hasDateRange();
  /**
   * <pre>
   * Datetime range over which the metrics were determined.
   * </pre>
   *
   * <code>.api.commons.DatetimeRange date_range = 1 [json_name = "dateRange"];</code>
   * @return The dateRange.
   */
  com.tcn.cloud.api.api.commons.DatetimeRange getDateRange();
  /**
   * <pre>
   * Datetime range over which the metrics were determined.
   * </pre>
   *
   * <code>.api.commons.DatetimeRange date_range = 1 [json_name = "dateRange"];</code>
   */
  com.tcn.cloud.api.api.commons.DatetimeRangeOrBuilder getDateRangeOrBuilder();

  /**
   * <pre>
   * Width of each interval in minutes.
   * </pre>
   *
   * <code>int32 interval_width_in_minutes = 2 [json_name = "intervalWidthInMinutes"];</code>
   * @return The intervalWidthInMinutes.
   */
  int getIntervalWidthInMinutes();

  /**
   * <pre>
   * The total FTE required over the &#64;date_range, as determined by the forecast.
   * </pre>
   *
   * <code>float total_required_fte = 3 [json_name = "totalRequiredFte"];</code>
   * @return The totalRequiredFte.
   */
  float getTotalRequiredFte();

  /**
   * <pre>
   * The total FTE the the schedule is likely to address with the current shift instances.
   * </pre>
   *
   * <code>float total_achieved_fte = 4 [json_name = "totalAchievedFte"];</code>
   * @return The totalAchievedFte.
   */
  float getTotalAchievedFte();

  /**
   * <pre>
   * Total count of FTE scheduled to be on the phone / productive for a specific interval / duration of time.
   * </pre>
   *
   * <code>float total_productive_fte = 5 [json_name = "totalProductiveFte"];</code>
   * @return The totalProductiveFte.
   */
  float getTotalProductiveFte();

  /**
   * <pre>
   * The total FTE, minus shrinkage, the the schedule is likely to address with the current shift instances.
   * </pre>
   *
   * <code>float total_achieved_fte_with_shrinkage_applied = 6 [json_name = "totalAchievedFteWithShrinkageApplied"];</code>
   * @return The totalAchievedFteWithShrinkageApplied.
   */
  float getTotalAchievedFteWithShrinkageApplied();

  /**
   * <pre>
   * Total count of FTE, minus shrinkage, scheduled to be on the phone / productive / duration of time.
   * </pre>
   *
   * <code>float total_productive_fte_with_shrinkage_applied = 7 [json_name = "totalProductiveFteWithShrinkageApplied"];</code>
   * @return The totalProductiveFteWithShrinkageApplied.
   */
  float getTotalProductiveFteWithShrinkageApplied();

  /**
   * <pre>
   * Number of intervals in the &#64;date_range with predicted calls.
   * </pre>
   *
   * <code>int32 num_intervals_with_call_ftes = 8 [json_name = "numIntervalsWithCallFtes"];</code>
   * @return The numIntervalsWithCallFtes.
   */
  int getNumIntervalsWithCallFtes();

  /**
   * <pre>
   * Number of intervals in the &#64;date_range with scheduled shifts.
   * </pre>
   *
   * <code>int32 num_intervals_with_shift_ftes = 9 [json_name = "numIntervalsWithShiftFtes"];</code>
   * @return The numIntervalsWithShiftFtes.
   */
  int getNumIntervalsWithShiftFtes();

  /**
   * <pre>
   * Number of intervals in &#64;date_range with predicted calls but no scheduled shifts.
   * </pre>
   *
   * <code>int32 num_intervals_with_call_ftes_but_no_shifts = 10 [json_name = "numIntervalsWithCallFtesButNoShifts"];</code>
   * @return The numIntervalsWithCallFtesButNoShifts.
   */
  int getNumIntervalsWithCallFtesButNoShifts();

  /**
   * <pre>
   * Number of intervals in &#64;date_range with scheduled shifts but no predicted calls.
   * </pre>
   *
   * <code>int32 num_intervals_with_shifts_but_no_call_ftes = 11 [json_name = "numIntervalsWithShiftsButNoCallFtes"];</code>
   * @return The numIntervalsWithShiftsButNoCallFtes.
   */
  int getNumIntervalsWithShiftsButNoCallFtes();

  /**
   * <pre>
   * Total intervals with not enough scheduled FTE's to meet predicted calls.
   * </pre>
   *
   * <code>float total_underscheduled_call_ftes = 12 [json_name = "totalUnderscheduledCallFtes"];</code>
   * @return The totalUnderscheduledCallFtes.
   */
  float getTotalUnderscheduledCallFtes();

  /**
   * <pre>
   * Total intervals with more scheduled FTE's than required to meet predicted calls.
   * </pre>
   *
   * <code>float total_overscheduled_call_ftes = 13 [json_name = "totalOverscheduledCallFtes"];</code>
   * @return The totalOverscheduledCallFtes.
   */
  float getTotalOverscheduledCallFtes();

  /**
   * <pre>
   * Percent of of calls where the service level is achieved.
   * </pre>
   *
   * <code>float service_level_achieved_percent_calls = 14 [json_name = "serviceLevelAchievedPercentCalls"];</code>
   * @return The serviceLevelAchievedPercentCalls.
   */
  float getServiceLevelAchievedPercentCalls();

  /**
   * <pre>
   * The target seconds required to achieve the service level.
   * </pre>
   *
   * <code>int32 service_level_achieved_target_seconds = 15 [json_name = "serviceLevelAchievedTargetSeconds"];</code>
   * @return The serviceLevelAchievedTargetSeconds.
   */
  int getServiceLevelAchievedTargetSeconds();

  /**
   * <pre>
   * Estimated number of agents required to meet the target service level.
   * </pre>
   *
   * <code>int32 estimated_total_agent_shortfall_for_service_level = 16 [json_name = "estimatedTotalAgentShortfallForServiceLevel"];</code>
   * @return The estimatedTotalAgentShortfallForServiceLevel.
   */
  int getEstimatedTotalAgentShortfallForServiceLevel();

  /**
   * <pre>
   * A list of metric intervals spanning &#64;date_range.
   * </pre>
   *
   * <code>repeated .api.v1alpha1.wfm.V3_MetricIntervalStat metric_intervals = 17 [json_name = "metricIntervals"];</code>
   */
  java.util.List<com.tcn.cloud.api.api.v1alpha1.wfm.V3_MetricIntervalStat> 
      getMetricIntervalsList();
  /**
   * <pre>
   * A list of metric intervals spanning &#64;date_range.
   * </pre>
   *
   * <code>repeated .api.v1alpha1.wfm.V3_MetricIntervalStat metric_intervals = 17 [json_name = "metricIntervals"];</code>
   */
  com.tcn.cloud.api.api.v1alpha1.wfm.V3_MetricIntervalStat getMetricIntervals(int index);
  /**
   * <pre>
   * A list of metric intervals spanning &#64;date_range.
   * </pre>
   *
   * <code>repeated .api.v1alpha1.wfm.V3_MetricIntervalStat metric_intervals = 17 [json_name = "metricIntervals"];</code>
   */
  int getMetricIntervalsCount();
  /**
   * <pre>
   * A list of metric intervals spanning &#64;date_range.
   * </pre>
   *
   * <code>repeated .api.v1alpha1.wfm.V3_MetricIntervalStat metric_intervals = 17 [json_name = "metricIntervals"];</code>
   */
  java.util.List<? extends com.tcn.cloud.api.api.v1alpha1.wfm.V3_MetricIntervalStatOrBuilder> 
      getMetricIntervalsOrBuilderList();
  /**
   * <pre>
   * A list of metric intervals spanning &#64;date_range.
   * </pre>
   *
   * <code>repeated .api.v1alpha1.wfm.V3_MetricIntervalStat metric_intervals = 17 [json_name = "metricIntervals"];</code>
   */
  com.tcn.cloud.api.api.v1alpha1.wfm.V3_MetricIntervalStatOrBuilder getMetricIntervalsOrBuilder(
      int index);
}
