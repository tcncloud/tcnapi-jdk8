// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/v0alpha/lms.proto

package com.tcn.cloud.api.api.v0alpha;

public interface RuntimeValuesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.v0alpha.RuntimeValues)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * current state of the entrypoint
   * this is set to kickoff when the entrypoint is queued up
   * </pre>
   *
   * <code>.api.commons.EventState state = 1 [json_name = "state"];</code>
   * @return The enum numeric value on the wire for state.
   */
  int getStateValue();
  /**
   * <pre>
   * current state of the entrypoint
   * this is set to kickoff when the entrypoint is queued up
   * </pre>
   *
   * <code>.api.commons.EventState state = 1 [json_name = "state"];</code>
   * @return The state.
   */
  com.tcn.cloud.api.api.commons.EventState getState();

  /**
   * <pre>
   * the token we are using for this session.
   * This value is retrieved by sending a jwt to epic's auth endpoint.
   * </pre>
   *
   * <code>string access_token = 2 [json_name = "accessToken"];</code>
   * @return The accessToken.
   */
  java.lang.String getAccessToken();
  /**
   * <pre>
   * the token we are using for this session.
   * This value is retrieved by sending a jwt to epic's auth endpoint.
   * </pre>
   *
   * <code>string access_token = 2 [json_name = "accessToken"];</code>
   * @return The bytes for accessToken.
   */
  com.google.protobuf.ByteString
      getAccessTokenBytes();

  /**
   * <pre>
   * the url returned from the kickoff's 'Content-Location' response header
   * used during the CHECK state.
   * </pre>
   *
   * <code>string check_url = 3 [json_name = "checkUrl"];</code>
   * @return The checkUrl.
   */
  java.lang.String getCheckUrl();
  /**
   * <pre>
   * the url returned from the kickoff's 'Content-Location' response header
   * used during the CHECK state.
   * </pre>
   *
   * <code>string check_url = 3 [json_name = "checkUrl"];</code>
   * @return The bytes for checkUrl.
   */
  com.google.protobuf.ByteString
      getCheckUrlBytes();

  /**
   * <pre>
   * the the location for all the data we are importing.
   * Epic returns newline delimited json for each url endpoint
   * </pre>
   *
   * <code>repeated .api.v0alpha.EntityURL data_urls = 4 [json_name = "dataUrls"];</code>
   */
  java.util.List<com.tcn.cloud.api.api.v0alpha.EntityURL> 
      getDataUrlsList();
  /**
   * <pre>
   * the the location for all the data we are importing.
   * Epic returns newline delimited json for each url endpoint
   * </pre>
   *
   * <code>repeated .api.v0alpha.EntityURL data_urls = 4 [json_name = "dataUrls"];</code>
   */
  com.tcn.cloud.api.api.v0alpha.EntityURL getDataUrls(int index);
  /**
   * <pre>
   * the the location for all the data we are importing.
   * Epic returns newline delimited json for each url endpoint
   * </pre>
   *
   * <code>repeated .api.v0alpha.EntityURL data_urls = 4 [json_name = "dataUrls"];</code>
   */
  int getDataUrlsCount();
  /**
   * <pre>
   * the the location for all the data we are importing.
   * Epic returns newline delimited json for each url endpoint
   * </pre>
   *
   * <code>repeated .api.v0alpha.EntityURL data_urls = 4 [json_name = "dataUrls"];</code>
   */
  java.util.List<? extends com.tcn.cloud.api.api.v0alpha.EntityURLOrBuilder> 
      getDataUrlsOrBuilderList();
  /**
   * <pre>
   * the the location for all the data we are importing.
   * Epic returns newline delimited json for each url endpoint
   * </pre>
   *
   * <code>repeated .api.v0alpha.EntityURL data_urls = 4 [json_name = "dataUrls"];</code>
   */
  com.tcn.cloud.api.api.v0alpha.EntityURLOrBuilder getDataUrlsOrBuilder(
      int index);

  /**
   * <pre>
   * how many times we have ran the paginated request
   * </pre>
   *
   * <code>int64 current_iteration = 5 [json_name = "currentIteration"];</code>
   * @return The currentIteration.
   */
  long getCurrentIteration();

  /**
   * <code>int64 total_seconds_spent = 6 [json_name = "totalSecondsSpent"];</code>
   * @return The totalSecondsSpent.
   */
  long getTotalSecondsSpent();

  /**
   * <pre>
   * any errors that happened during processing
   * </pre>
   *
   * <code>repeated string errors = 7 [json_name = "errors"];</code>
   * @return A list containing the errors.
   */
  java.util.List<java.lang.String>
      getErrorsList();
  /**
   * <pre>
   * any errors that happened during processing
   * </pre>
   *
   * <code>repeated string errors = 7 [json_name = "errors"];</code>
   * @return The count of errors.
   */
  int getErrorsCount();
  /**
   * <pre>
   * any errors that happened during processing
   * </pre>
   *
   * <code>repeated string errors = 7 [json_name = "errors"];</code>
   * @param index The index of the element to return.
   * @return The errors at the given index.
   */
  java.lang.String getErrors(int index);
  /**
   * <pre>
   * any errors that happened during processing
   * </pre>
   *
   * <code>repeated string errors = 7 [json_name = "errors"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the errors at the given index.
   */
  com.google.protobuf.ByteString
      getErrorsBytes(int index);

  /**
   * <pre>
   * how many times the bulk entrypoint has been not ready total
   * </pre>
   *
   * <code>int64 total_not_ready_count = 8 [json_name = "totalNotReadyCount"];</code>
   * @return The totalNotReadyCount.
   */
  long getTotalNotReadyCount();

  /**
   * <pre>
   * as of writing, the unflushed input is stored in fts.
   * the keys will be the fts_id the page, and the values the size of the request in bytes
   * </pre>
   *
   * <code>map&lt;string, int64&gt; file_ids = 9 [json_name = "fileIds"];</code>
   */
  int getFileIdsCount();
  /**
   * <pre>
   * as of writing, the unflushed input is stored in fts.
   * the keys will be the fts_id the page, and the values the size of the request in bytes
   * </pre>
   *
   * <code>map&lt;string, int64&gt; file_ids = 9 [json_name = "fileIds"];</code>
   */
  boolean containsFileIds(
      java.lang.String key);
  /**
   * Use {@link #getFileIdsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.Long>
  getFileIds();
  /**
   * <pre>
   * as of writing, the unflushed input is stored in fts.
   * the keys will be the fts_id the page, and the values the size of the request in bytes
   * </pre>
   *
   * <code>map&lt;string, int64&gt; file_ids = 9 [json_name = "fileIds"];</code>
   */
  java.util.Map<java.lang.String, java.lang.Long>
  getFileIdsMap();
  /**
   * <pre>
   * as of writing, the unflushed input is stored in fts.
   * the keys will be the fts_id the page, and the values the size of the request in bytes
   * </pre>
   *
   * <code>map&lt;string, int64&gt; file_ids = 9 [json_name = "fileIds"];</code>
   */
  long getFileIdsOrDefault(
      java.lang.String key,
      long defaultValue);
  /**
   * <pre>
   * as of writing, the unflushed input is stored in fts.
   * the keys will be the fts_id the page, and the values the size of the request in bytes
   * </pre>
   *
   * <code>map&lt;string, int64&gt; file_ids = 9 [json_name = "fileIds"];</code>
   */
  long getFileIdsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * the named variables saved from the preliminary requests
   * these can be used in the paginated_request
   * </pre>
   *
   * <code>map&lt;string, string&gt; preliminary_vars = 10 [json_name = "preliminaryVars"];</code>
   */
  int getPreliminaryVarsCount();
  /**
   * <pre>
   * the named variables saved from the preliminary requests
   * these can be used in the paginated_request
   * </pre>
   *
   * <code>map&lt;string, string&gt; preliminary_vars = 10 [json_name = "preliminaryVars"];</code>
   */
  boolean containsPreliminaryVars(
      java.lang.String key);
  /**
   * Use {@link #getPreliminaryVarsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getPreliminaryVars();
  /**
   * <pre>
   * the named variables saved from the preliminary requests
   * these can be used in the paginated_request
   * </pre>
   *
   * <code>map&lt;string, string&gt; preliminary_vars = 10 [json_name = "preliminaryVars"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getPreliminaryVarsMap();
  /**
   * <pre>
   * the named variables saved from the preliminary requests
   * these can be used in the paginated_request
   * </pre>
   *
   * <code>map&lt;string, string&gt; preliminary_vars = 10 [json_name = "preliminaryVars"];</code>
   */
  /* nullable */
java.lang.String getPreliminaryVarsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * the named variables saved from the preliminary requests
   * these can be used in the paginated_request
   * </pre>
   *
   * <code>map&lt;string, string&gt; preliminary_vars = 10 [json_name = "preliminaryVars"];</code>
   */
  java.lang.String getPreliminaryVarsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * the events that happened before this one
   * </pre>
   *
   * <code>repeated int64 parent_event_ids = 11 [json_name = "parentEventIds"];</code>
   * @return A list containing the parentEventIds.
   */
  java.util.List<java.lang.Long> getParentEventIdsList();
  /**
   * <pre>
   * the events that happened before this one
   * </pre>
   *
   * <code>repeated int64 parent_event_ids = 11 [json_name = "parentEventIds"];</code>
   * @return The count of parentEventIds.
   */
  int getParentEventIdsCount();
  /**
   * <pre>
   * the events that happened before this one
   * </pre>
   *
   * <code>repeated int64 parent_event_ids = 11 [json_name = "parentEventIds"];</code>
   * @param index The index of the element to return.
   * @return The parentEventIds at the given index.
   */
  long getParentEventIds(int index);

  /**
   * <pre>
   * if true we wont need to switch back from process state, to check state.
   * if false, we need to continue in check state after flushing records
   * </pre>
   *
   * <code>bool no_more_pages = 12 [json_name = "noMorePages"];</code>
   * @return The noMorePages.
   */
  boolean getNoMorePages();

  /**
   * <pre>
   * tracks all fts files we have writen regardless of whether they have been processed yet
   * </pre>
   *
   * <code>repeated string total_fts_ids = 13 [json_name = "totalFtsIds"];</code>
   * @return A list containing the totalFtsIds.
   */
  java.util.List<java.lang.String>
      getTotalFtsIdsList();
  /**
   * <pre>
   * tracks all fts files we have writen regardless of whether they have been processed yet
   * </pre>
   *
   * <code>repeated string total_fts_ids = 13 [json_name = "totalFtsIds"];</code>
   * @return The count of totalFtsIds.
   */
  int getTotalFtsIdsCount();
  /**
   * <pre>
   * tracks all fts files we have writen regardless of whether they have been processed yet
   * </pre>
   *
   * <code>repeated string total_fts_ids = 13 [json_name = "totalFtsIds"];</code>
   * @param index The index of the element to return.
   * @return The totalFtsIds at the given index.
   */
  java.lang.String getTotalFtsIds(int index);
  /**
   * <pre>
   * tracks all fts files we have writen regardless of whether they have been processed yet
   * </pre>
   *
   * <code>repeated string total_fts_ids = 13 [json_name = "totalFtsIds"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the totalFtsIds at the given index.
   */
  com.google.protobuf.ByteString
      getTotalFtsIdsBytes(int index);
}
