// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/lms.proto

package com.tcn.cloud.api.api.commons;

/**
 * Protobuf enum {@code api.commons.RecordType}
 */
public enum RecordType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>RECORD_TYPE_ALL = 0;</code>
   */
  RECORD_TYPE_ALL(0),
  /**
   * <code>RECORD_TYPE_STRING = 1;</code>
   */
  RECORD_TYPE_STRING(1),
  /**
   * <code>RECORD_TYPE_NUMBER = 2;</code>
   */
  RECORD_TYPE_NUMBER(2),
  /**
   * <code>RECORD_TYPE_BOOL = 3;</code>
   */
  RECORD_TYPE_BOOL(3),
  /**
   * <code>RECORD_TYPE_PHONE = 4;</code>
   */
  RECORD_TYPE_PHONE(4),
  /**
   * <code>RECORD_TYPE_CURRENCY = 5;</code>
   */
  RECORD_TYPE_CURRENCY(5),
  /**
   * <code>RECORD_TYPE_ENRICHED_PHONE = 6;</code>
   */
  RECORD_TYPE_ENRICHED_PHONE(6),
  /**
   * <code>RECORD_TYPE_ENRICHED_ZIP = 18;</code>
   */
  RECORD_TYPE_ENRICHED_ZIP(18),
  /**
   * <code>RECORD_TYPE_POSTAL_CODE = 7;</code>
   */
  RECORD_TYPE_POSTAL_CODE(7),
  /**
   * <code>RECORD_TYPE_EMAIL = 8;</code>
   */
  RECORD_TYPE_EMAIL(8),
  /**
   * <code>RECORD_TYPE_DATETIME_NOW = 9;</code>
   */
  RECORD_TYPE_DATETIME_NOW(9),
  /**
   * <code>RECORD_TYPE_DATETIME_TIMESTAMP = 10;</code>
   */
  RECORD_TYPE_DATETIME_TIMESTAMP(10),
  /**
   * <code>RECORD_TYPE_DATETIME_DATE = 11;</code>
   */
  RECORD_TYPE_DATETIME_DATE(11),
  /**
   * <code>RECORD_TYPE_DATETIME_MONTH_AND_DAY = 12;</code>
   */
  RECORD_TYPE_DATETIME_MONTH_AND_DAY(12),
  /**
   * <code>RECORD_TYPE_DATETIME_TIME_OF_DAY = 13;</code>
   */
  RECORD_TYPE_DATETIME_TIME_OF_DAY(13),
  /**
   * <code>RECORD_TYPE_REPEATED_RECORDS = 15;</code>
   */
  RECORD_TYPE_REPEATED_RECORDS(15),
  /**
   * <code>RECORD_TYPE_RECORD_MAP = 16;</code>
   */
  RECORD_TYPE_RECORD_MAP(16),
  /**
   * <code>RECORD_TYPE_ERROR = 17;</code>
   */
  RECORD_TYPE_ERROR(17),
  /**
   * <code>RECORD_TYPE_SOCIAL = 19;</code>
   */
  RECORD_TYPE_SOCIAL(19),
  /**
   * <code>RECORD_TYPE_DATE_OF_BIRTH = 20;</code>
   */
  RECORD_TYPE_DATE_OF_BIRTH(20),
  /**
   * <code>RECORD_TYPE_FULL_NAME = 21;</code>
   */
  RECORD_TYPE_FULL_NAME(21),
  /**
   * <code>RECORD_TYPE_ACCOUNT_NUMBER = 22;</code>
   */
  RECORD_TYPE_ACCOUNT_NUMBER(22),
  /**
   * <code>RECORD_TYPE_STRUCT_VALUE = 23;</code>
   */
  RECORD_TYPE_STRUCT_VALUE(23),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>RECORD_TYPE_ALL = 0;</code>
   */
  public static final int RECORD_TYPE_ALL_VALUE = 0;
  /**
   * <code>RECORD_TYPE_STRING = 1;</code>
   */
  public static final int RECORD_TYPE_STRING_VALUE = 1;
  /**
   * <code>RECORD_TYPE_NUMBER = 2;</code>
   */
  public static final int RECORD_TYPE_NUMBER_VALUE = 2;
  /**
   * <code>RECORD_TYPE_BOOL = 3;</code>
   */
  public static final int RECORD_TYPE_BOOL_VALUE = 3;
  /**
   * <code>RECORD_TYPE_PHONE = 4;</code>
   */
  public static final int RECORD_TYPE_PHONE_VALUE = 4;
  /**
   * <code>RECORD_TYPE_CURRENCY = 5;</code>
   */
  public static final int RECORD_TYPE_CURRENCY_VALUE = 5;
  /**
   * <code>RECORD_TYPE_ENRICHED_PHONE = 6;</code>
   */
  public static final int RECORD_TYPE_ENRICHED_PHONE_VALUE = 6;
  /**
   * <code>RECORD_TYPE_ENRICHED_ZIP = 18;</code>
   */
  public static final int RECORD_TYPE_ENRICHED_ZIP_VALUE = 18;
  /**
   * <code>RECORD_TYPE_POSTAL_CODE = 7;</code>
   */
  public static final int RECORD_TYPE_POSTAL_CODE_VALUE = 7;
  /**
   * <code>RECORD_TYPE_EMAIL = 8;</code>
   */
  public static final int RECORD_TYPE_EMAIL_VALUE = 8;
  /**
   * <code>RECORD_TYPE_DATETIME_NOW = 9;</code>
   */
  public static final int RECORD_TYPE_DATETIME_NOW_VALUE = 9;
  /**
   * <code>RECORD_TYPE_DATETIME_TIMESTAMP = 10;</code>
   */
  public static final int RECORD_TYPE_DATETIME_TIMESTAMP_VALUE = 10;
  /**
   * <code>RECORD_TYPE_DATETIME_DATE = 11;</code>
   */
  public static final int RECORD_TYPE_DATETIME_DATE_VALUE = 11;
  /**
   * <code>RECORD_TYPE_DATETIME_MONTH_AND_DAY = 12;</code>
   */
  public static final int RECORD_TYPE_DATETIME_MONTH_AND_DAY_VALUE = 12;
  /**
   * <code>RECORD_TYPE_DATETIME_TIME_OF_DAY = 13;</code>
   */
  public static final int RECORD_TYPE_DATETIME_TIME_OF_DAY_VALUE = 13;
  /**
   * <code>RECORD_TYPE_REPEATED_RECORDS = 15;</code>
   */
  public static final int RECORD_TYPE_REPEATED_RECORDS_VALUE = 15;
  /**
   * <code>RECORD_TYPE_RECORD_MAP = 16;</code>
   */
  public static final int RECORD_TYPE_RECORD_MAP_VALUE = 16;
  /**
   * <code>RECORD_TYPE_ERROR = 17;</code>
   */
  public static final int RECORD_TYPE_ERROR_VALUE = 17;
  /**
   * <code>RECORD_TYPE_SOCIAL = 19;</code>
   */
  public static final int RECORD_TYPE_SOCIAL_VALUE = 19;
  /**
   * <code>RECORD_TYPE_DATE_OF_BIRTH = 20;</code>
   */
  public static final int RECORD_TYPE_DATE_OF_BIRTH_VALUE = 20;
  /**
   * <code>RECORD_TYPE_FULL_NAME = 21;</code>
   */
  public static final int RECORD_TYPE_FULL_NAME_VALUE = 21;
  /**
   * <code>RECORD_TYPE_ACCOUNT_NUMBER = 22;</code>
   */
  public static final int RECORD_TYPE_ACCOUNT_NUMBER_VALUE = 22;
  /**
   * <code>RECORD_TYPE_STRUCT_VALUE = 23;</code>
   */
  public static final int RECORD_TYPE_STRUCT_VALUE_VALUE = 23;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static RecordType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static RecordType forNumber(int value) {
    switch (value) {
      case 0: return RECORD_TYPE_ALL;
      case 1: return RECORD_TYPE_STRING;
      case 2: return RECORD_TYPE_NUMBER;
      case 3: return RECORD_TYPE_BOOL;
      case 4: return RECORD_TYPE_PHONE;
      case 5: return RECORD_TYPE_CURRENCY;
      case 6: return RECORD_TYPE_ENRICHED_PHONE;
      case 18: return RECORD_TYPE_ENRICHED_ZIP;
      case 7: return RECORD_TYPE_POSTAL_CODE;
      case 8: return RECORD_TYPE_EMAIL;
      case 9: return RECORD_TYPE_DATETIME_NOW;
      case 10: return RECORD_TYPE_DATETIME_TIMESTAMP;
      case 11: return RECORD_TYPE_DATETIME_DATE;
      case 12: return RECORD_TYPE_DATETIME_MONTH_AND_DAY;
      case 13: return RECORD_TYPE_DATETIME_TIME_OF_DAY;
      case 15: return RECORD_TYPE_REPEATED_RECORDS;
      case 16: return RECORD_TYPE_RECORD_MAP;
      case 17: return RECORD_TYPE_ERROR;
      case 19: return RECORD_TYPE_SOCIAL;
      case 20: return RECORD_TYPE_DATE_OF_BIRTH;
      case 21: return RECORD_TYPE_FULL_NAME;
      case 22: return RECORD_TYPE_ACCOUNT_NUMBER;
      case 23: return RECORD_TYPE_STRUCT_VALUE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<RecordType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      RecordType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<RecordType>() {
          public RecordType findValueByNumber(int number) {
            return RecordType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.LmsProto.getDescriptor().getEnumTypes().get(6);
  }

  private static final RecordType[] VALUES = values();

  public static RecordType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private RecordType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.RecordType)
}

