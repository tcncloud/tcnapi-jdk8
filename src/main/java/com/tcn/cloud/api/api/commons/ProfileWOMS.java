// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/wfm.proto

package com.tcn.cloud.api.api.commons;

/**
 * <pre>
 * a profile for week of month, for each month of the year
 * </pre>
 *
 * Protobuf type {@code api.commons.ProfileWOMS}
 */
public final class ProfileWOMS extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:api.commons.ProfileWOMS)
    ProfileWOMSOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ProfileWOMS.newBuilder() to construct.
  private ProfileWOMS(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ProfileWOMS() {
    january_ = emptyFloatList();
    february_ = emptyFloatList();
    march_ = emptyFloatList();
    april_ = emptyFloatList();
    may_ = emptyFloatList();
    june_ = emptyFloatList();
    july_ = emptyFloatList();
    august_ = emptyFloatList();
    september_ = emptyFloatList();
    october_ = emptyFloatList();
    november_ = emptyFloatList();
    december_ = emptyFloatList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ProfileWOMS();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ProfileWOMS(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 13: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              january_ = newFloatList();
              mutable_bitField0_ |= 0x00000001;
            }
            january_.addFloat(input.readFloat());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
              january_ = newFloatList();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              january_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 21: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              february_ = newFloatList();
              mutable_bitField0_ |= 0x00000002;
            }
            february_.addFloat(input.readFloat());
            break;
          }
          case 18: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
              february_ = newFloatList();
              mutable_bitField0_ |= 0x00000002;
            }
            while (input.getBytesUntilLimit() > 0) {
              february_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 29: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              march_ = newFloatList();
              mutable_bitField0_ |= 0x00000004;
            }
            march_.addFloat(input.readFloat());
            break;
          }
          case 26: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
              march_ = newFloatList();
              mutable_bitField0_ |= 0x00000004;
            }
            while (input.getBytesUntilLimit() > 0) {
              march_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 37: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              april_ = newFloatList();
              mutable_bitField0_ |= 0x00000008;
            }
            april_.addFloat(input.readFloat());
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000008) != 0) && input.getBytesUntilLimit() > 0) {
              april_ = newFloatList();
              mutable_bitField0_ |= 0x00000008;
            }
            while (input.getBytesUntilLimit() > 0) {
              april_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 45: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              may_ = newFloatList();
              mutable_bitField0_ |= 0x00000010;
            }
            may_.addFloat(input.readFloat());
            break;
          }
          case 42: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000010) != 0) && input.getBytesUntilLimit() > 0) {
              may_ = newFloatList();
              mutable_bitField0_ |= 0x00000010;
            }
            while (input.getBytesUntilLimit() > 0) {
              may_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 53: {
            if (!((mutable_bitField0_ & 0x00000020) != 0)) {
              june_ = newFloatList();
              mutable_bitField0_ |= 0x00000020;
            }
            june_.addFloat(input.readFloat());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000020) != 0) && input.getBytesUntilLimit() > 0) {
              june_ = newFloatList();
              mutable_bitField0_ |= 0x00000020;
            }
            while (input.getBytesUntilLimit() > 0) {
              june_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 61: {
            if (!((mutable_bitField0_ & 0x00000040) != 0)) {
              july_ = newFloatList();
              mutable_bitField0_ |= 0x00000040;
            }
            july_.addFloat(input.readFloat());
            break;
          }
          case 58: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000040) != 0) && input.getBytesUntilLimit() > 0) {
              july_ = newFloatList();
              mutable_bitField0_ |= 0x00000040;
            }
            while (input.getBytesUntilLimit() > 0) {
              july_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 69: {
            if (!((mutable_bitField0_ & 0x00000080) != 0)) {
              august_ = newFloatList();
              mutable_bitField0_ |= 0x00000080;
            }
            august_.addFloat(input.readFloat());
            break;
          }
          case 66: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000080) != 0) && input.getBytesUntilLimit() > 0) {
              august_ = newFloatList();
              mutable_bitField0_ |= 0x00000080;
            }
            while (input.getBytesUntilLimit() > 0) {
              august_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 77: {
            if (!((mutable_bitField0_ & 0x00000100) != 0)) {
              september_ = newFloatList();
              mutable_bitField0_ |= 0x00000100;
            }
            september_.addFloat(input.readFloat());
            break;
          }
          case 74: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000100) != 0) && input.getBytesUntilLimit() > 0) {
              september_ = newFloatList();
              mutable_bitField0_ |= 0x00000100;
            }
            while (input.getBytesUntilLimit() > 0) {
              september_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 85: {
            if (!((mutable_bitField0_ & 0x00000200) != 0)) {
              october_ = newFloatList();
              mutable_bitField0_ |= 0x00000200;
            }
            october_.addFloat(input.readFloat());
            break;
          }
          case 82: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000200) != 0) && input.getBytesUntilLimit() > 0) {
              october_ = newFloatList();
              mutable_bitField0_ |= 0x00000200;
            }
            while (input.getBytesUntilLimit() > 0) {
              october_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 93: {
            if (!((mutable_bitField0_ & 0x00000400) != 0)) {
              november_ = newFloatList();
              mutable_bitField0_ |= 0x00000400;
            }
            november_.addFloat(input.readFloat());
            break;
          }
          case 90: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000400) != 0) && input.getBytesUntilLimit() > 0) {
              november_ = newFloatList();
              mutable_bitField0_ |= 0x00000400;
            }
            while (input.getBytesUntilLimit() > 0) {
              november_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          case 101: {
            if (!((mutable_bitField0_ & 0x00000800) != 0)) {
              december_ = newFloatList();
              mutable_bitField0_ |= 0x00000800;
            }
            december_.addFloat(input.readFloat());
            break;
          }
          case 98: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000800) != 0) && input.getBytesUntilLimit() > 0) {
              december_ = newFloatList();
              mutable_bitField0_ |= 0x00000800;
            }
            while (input.getBytesUntilLimit() > 0) {
              december_.addFloat(input.readFloat());
            }
            input.popLimit(limit);
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        january_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        february_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        march_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        april_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        may_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000020) != 0)) {
        june_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000040) != 0)) {
        july_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000080) != 0)) {
        august_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000100) != 0)) {
        september_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000200) != 0)) {
        october_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000400) != 0)) {
        november_.makeImmutable(); // C
      }
      if (((mutable_bitField0_ & 0x00000800) != 0)) {
        december_.makeImmutable(); // C
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileWOMS_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileWOMS_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.tcn.cloud.api.api.commons.ProfileWOMS.class, com.tcn.cloud.api.api.commons.ProfileWOMS.Builder.class);
  }

  public static final int JANUARY_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.FloatList january_;
  /**
   * <code>repeated float january = 1 [json_name = "january"];</code>
   * @return A list containing the january.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getJanuaryList() {
    return january_;
  }
  /**
   * <code>repeated float january = 1 [json_name = "january"];</code>
   * @return The count of january.
   */
  public int getJanuaryCount() {
    return january_.size();
  }
  /**
   * <code>repeated float january = 1 [json_name = "january"];</code>
   * @param index The index of the element to return.
   * @return The january at the given index.
   */
  public float getJanuary(int index) {
    return january_.getFloat(index);
  }
  private int januaryMemoizedSerializedSize = -1;

  public static final int FEBRUARY_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.FloatList february_;
  /**
   * <code>repeated float february = 2 [json_name = "february"];</code>
   * @return A list containing the february.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getFebruaryList() {
    return february_;
  }
  /**
   * <code>repeated float february = 2 [json_name = "february"];</code>
   * @return The count of february.
   */
  public int getFebruaryCount() {
    return february_.size();
  }
  /**
   * <code>repeated float february = 2 [json_name = "february"];</code>
   * @param index The index of the element to return.
   * @return The february at the given index.
   */
  public float getFebruary(int index) {
    return february_.getFloat(index);
  }
  private int februaryMemoizedSerializedSize = -1;

  public static final int MARCH_FIELD_NUMBER = 3;
  private com.google.protobuf.Internal.FloatList march_;
  /**
   * <code>repeated float march = 3 [json_name = "march"];</code>
   * @return A list containing the march.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getMarchList() {
    return march_;
  }
  /**
   * <code>repeated float march = 3 [json_name = "march"];</code>
   * @return The count of march.
   */
  public int getMarchCount() {
    return march_.size();
  }
  /**
   * <code>repeated float march = 3 [json_name = "march"];</code>
   * @param index The index of the element to return.
   * @return The march at the given index.
   */
  public float getMarch(int index) {
    return march_.getFloat(index);
  }
  private int marchMemoizedSerializedSize = -1;

  public static final int APRIL_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.FloatList april_;
  /**
   * <code>repeated float april = 4 [json_name = "april"];</code>
   * @return A list containing the april.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getAprilList() {
    return april_;
  }
  /**
   * <code>repeated float april = 4 [json_name = "april"];</code>
   * @return The count of april.
   */
  public int getAprilCount() {
    return april_.size();
  }
  /**
   * <code>repeated float april = 4 [json_name = "april"];</code>
   * @param index The index of the element to return.
   * @return The april at the given index.
   */
  public float getApril(int index) {
    return april_.getFloat(index);
  }
  private int aprilMemoizedSerializedSize = -1;

  public static final int MAY_FIELD_NUMBER = 5;
  private com.google.protobuf.Internal.FloatList may_;
  /**
   * <code>repeated float may = 5 [json_name = "may"];</code>
   * @return A list containing the may.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getMayList() {
    return may_;
  }
  /**
   * <code>repeated float may = 5 [json_name = "may"];</code>
   * @return The count of may.
   */
  public int getMayCount() {
    return may_.size();
  }
  /**
   * <code>repeated float may = 5 [json_name = "may"];</code>
   * @param index The index of the element to return.
   * @return The may at the given index.
   */
  public float getMay(int index) {
    return may_.getFloat(index);
  }
  private int mayMemoizedSerializedSize = -1;

  public static final int JUNE_FIELD_NUMBER = 6;
  private com.google.protobuf.Internal.FloatList june_;
  /**
   * <code>repeated float june = 6 [json_name = "june"];</code>
   * @return A list containing the june.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getJuneList() {
    return june_;
  }
  /**
   * <code>repeated float june = 6 [json_name = "june"];</code>
   * @return The count of june.
   */
  public int getJuneCount() {
    return june_.size();
  }
  /**
   * <code>repeated float june = 6 [json_name = "june"];</code>
   * @param index The index of the element to return.
   * @return The june at the given index.
   */
  public float getJune(int index) {
    return june_.getFloat(index);
  }
  private int juneMemoizedSerializedSize = -1;

  public static final int JULY_FIELD_NUMBER = 7;
  private com.google.protobuf.Internal.FloatList july_;
  /**
   * <code>repeated float july = 7 [json_name = "july"];</code>
   * @return A list containing the july.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getJulyList() {
    return july_;
  }
  /**
   * <code>repeated float july = 7 [json_name = "july"];</code>
   * @return The count of july.
   */
  public int getJulyCount() {
    return july_.size();
  }
  /**
   * <code>repeated float july = 7 [json_name = "july"];</code>
   * @param index The index of the element to return.
   * @return The july at the given index.
   */
  public float getJuly(int index) {
    return july_.getFloat(index);
  }
  private int julyMemoizedSerializedSize = -1;

  public static final int AUGUST_FIELD_NUMBER = 8;
  private com.google.protobuf.Internal.FloatList august_;
  /**
   * <code>repeated float august = 8 [json_name = "august"];</code>
   * @return A list containing the august.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getAugustList() {
    return august_;
  }
  /**
   * <code>repeated float august = 8 [json_name = "august"];</code>
   * @return The count of august.
   */
  public int getAugustCount() {
    return august_.size();
  }
  /**
   * <code>repeated float august = 8 [json_name = "august"];</code>
   * @param index The index of the element to return.
   * @return The august at the given index.
   */
  public float getAugust(int index) {
    return august_.getFloat(index);
  }
  private int augustMemoizedSerializedSize = -1;

  public static final int SEPTEMBER_FIELD_NUMBER = 9;
  private com.google.protobuf.Internal.FloatList september_;
  /**
   * <code>repeated float september = 9 [json_name = "september"];</code>
   * @return A list containing the september.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getSeptemberList() {
    return september_;
  }
  /**
   * <code>repeated float september = 9 [json_name = "september"];</code>
   * @return The count of september.
   */
  public int getSeptemberCount() {
    return september_.size();
  }
  /**
   * <code>repeated float september = 9 [json_name = "september"];</code>
   * @param index The index of the element to return.
   * @return The september at the given index.
   */
  public float getSeptember(int index) {
    return september_.getFloat(index);
  }
  private int septemberMemoizedSerializedSize = -1;

  public static final int OCTOBER_FIELD_NUMBER = 10;
  private com.google.protobuf.Internal.FloatList october_;
  /**
   * <code>repeated float october = 10 [json_name = "october"];</code>
   * @return A list containing the october.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getOctoberList() {
    return october_;
  }
  /**
   * <code>repeated float october = 10 [json_name = "october"];</code>
   * @return The count of october.
   */
  public int getOctoberCount() {
    return october_.size();
  }
  /**
   * <code>repeated float october = 10 [json_name = "october"];</code>
   * @param index The index of the element to return.
   * @return The october at the given index.
   */
  public float getOctober(int index) {
    return october_.getFloat(index);
  }
  private int octoberMemoizedSerializedSize = -1;

  public static final int NOVEMBER_FIELD_NUMBER = 11;
  private com.google.protobuf.Internal.FloatList november_;
  /**
   * <code>repeated float november = 11 [json_name = "november"];</code>
   * @return A list containing the november.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getNovemberList() {
    return november_;
  }
  /**
   * <code>repeated float november = 11 [json_name = "november"];</code>
   * @return The count of november.
   */
  public int getNovemberCount() {
    return november_.size();
  }
  /**
   * <code>repeated float november = 11 [json_name = "november"];</code>
   * @param index The index of the element to return.
   * @return The november at the given index.
   */
  public float getNovember(int index) {
    return november_.getFloat(index);
  }
  private int novemberMemoizedSerializedSize = -1;

  public static final int DECEMBER_FIELD_NUMBER = 12;
  private com.google.protobuf.Internal.FloatList december_;
  /**
   * <code>repeated float december = 12 [json_name = "december"];</code>
   * @return A list containing the december.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getDecemberList() {
    return december_;
  }
  /**
   * <code>repeated float december = 12 [json_name = "december"];</code>
   * @return The count of december.
   */
  public int getDecemberCount() {
    return december_.size();
  }
  /**
   * <code>repeated float december = 12 [json_name = "december"];</code>
   * @param index The index of the element to return.
   * @return The december at the given index.
   */
  public float getDecember(int index) {
    return december_.getFloat(index);
  }
  private int decemberMemoizedSerializedSize = -1;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getJanuaryList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(januaryMemoizedSerializedSize);
    }
    for (int i = 0; i < january_.size(); i++) {
      output.writeFloatNoTag(january_.getFloat(i));
    }
    if (getFebruaryList().size() > 0) {
      output.writeUInt32NoTag(18);
      output.writeUInt32NoTag(februaryMemoizedSerializedSize);
    }
    for (int i = 0; i < february_.size(); i++) {
      output.writeFloatNoTag(february_.getFloat(i));
    }
    if (getMarchList().size() > 0) {
      output.writeUInt32NoTag(26);
      output.writeUInt32NoTag(marchMemoizedSerializedSize);
    }
    for (int i = 0; i < march_.size(); i++) {
      output.writeFloatNoTag(march_.getFloat(i));
    }
    if (getAprilList().size() > 0) {
      output.writeUInt32NoTag(34);
      output.writeUInt32NoTag(aprilMemoizedSerializedSize);
    }
    for (int i = 0; i < april_.size(); i++) {
      output.writeFloatNoTag(april_.getFloat(i));
    }
    if (getMayList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(mayMemoizedSerializedSize);
    }
    for (int i = 0; i < may_.size(); i++) {
      output.writeFloatNoTag(may_.getFloat(i));
    }
    if (getJuneList().size() > 0) {
      output.writeUInt32NoTag(50);
      output.writeUInt32NoTag(juneMemoizedSerializedSize);
    }
    for (int i = 0; i < june_.size(); i++) {
      output.writeFloatNoTag(june_.getFloat(i));
    }
    if (getJulyList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(julyMemoizedSerializedSize);
    }
    for (int i = 0; i < july_.size(); i++) {
      output.writeFloatNoTag(july_.getFloat(i));
    }
    if (getAugustList().size() > 0) {
      output.writeUInt32NoTag(66);
      output.writeUInt32NoTag(augustMemoizedSerializedSize);
    }
    for (int i = 0; i < august_.size(); i++) {
      output.writeFloatNoTag(august_.getFloat(i));
    }
    if (getSeptemberList().size() > 0) {
      output.writeUInt32NoTag(74);
      output.writeUInt32NoTag(septemberMemoizedSerializedSize);
    }
    for (int i = 0; i < september_.size(); i++) {
      output.writeFloatNoTag(september_.getFloat(i));
    }
    if (getOctoberList().size() > 0) {
      output.writeUInt32NoTag(82);
      output.writeUInt32NoTag(octoberMemoizedSerializedSize);
    }
    for (int i = 0; i < october_.size(); i++) {
      output.writeFloatNoTag(october_.getFloat(i));
    }
    if (getNovemberList().size() > 0) {
      output.writeUInt32NoTag(90);
      output.writeUInt32NoTag(novemberMemoizedSerializedSize);
    }
    for (int i = 0; i < november_.size(); i++) {
      output.writeFloatNoTag(november_.getFloat(i));
    }
    if (getDecemberList().size() > 0) {
      output.writeUInt32NoTag(98);
      output.writeUInt32NoTag(decemberMemoizedSerializedSize);
    }
    for (int i = 0; i < december_.size(); i++) {
      output.writeFloatNoTag(december_.getFloat(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      dataSize = 4 * getJanuaryList().size();
      size += dataSize;
      if (!getJanuaryList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      januaryMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getFebruaryList().size();
      size += dataSize;
      if (!getFebruaryList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      februaryMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getMarchList().size();
      size += dataSize;
      if (!getMarchList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      marchMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getAprilList().size();
      size += dataSize;
      if (!getAprilList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      aprilMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getMayList().size();
      size += dataSize;
      if (!getMayList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      mayMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getJuneList().size();
      size += dataSize;
      if (!getJuneList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      juneMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getJulyList().size();
      size += dataSize;
      if (!getJulyList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      julyMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getAugustList().size();
      size += dataSize;
      if (!getAugustList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      augustMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getSeptemberList().size();
      size += dataSize;
      if (!getSeptemberList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      septemberMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getOctoberList().size();
      size += dataSize;
      if (!getOctoberList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      octoberMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getNovemberList().size();
      size += dataSize;
      if (!getNovemberList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      novemberMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 4 * getDecemberList().size();
      size += dataSize;
      if (!getDecemberList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      decemberMemoizedSerializedSize = dataSize;
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.tcn.cloud.api.api.commons.ProfileWOMS)) {
      return super.equals(obj);
    }
    com.tcn.cloud.api.api.commons.ProfileWOMS other = (com.tcn.cloud.api.api.commons.ProfileWOMS) obj;

    if (!getJanuaryList()
        .equals(other.getJanuaryList())) return false;
    if (!getFebruaryList()
        .equals(other.getFebruaryList())) return false;
    if (!getMarchList()
        .equals(other.getMarchList())) return false;
    if (!getAprilList()
        .equals(other.getAprilList())) return false;
    if (!getMayList()
        .equals(other.getMayList())) return false;
    if (!getJuneList()
        .equals(other.getJuneList())) return false;
    if (!getJulyList()
        .equals(other.getJulyList())) return false;
    if (!getAugustList()
        .equals(other.getAugustList())) return false;
    if (!getSeptemberList()
        .equals(other.getSeptemberList())) return false;
    if (!getOctoberList()
        .equals(other.getOctoberList())) return false;
    if (!getNovemberList()
        .equals(other.getNovemberList())) return false;
    if (!getDecemberList()
        .equals(other.getDecemberList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getJanuaryCount() > 0) {
      hash = (37 * hash) + JANUARY_FIELD_NUMBER;
      hash = (53 * hash) + getJanuaryList().hashCode();
    }
    if (getFebruaryCount() > 0) {
      hash = (37 * hash) + FEBRUARY_FIELD_NUMBER;
      hash = (53 * hash) + getFebruaryList().hashCode();
    }
    if (getMarchCount() > 0) {
      hash = (37 * hash) + MARCH_FIELD_NUMBER;
      hash = (53 * hash) + getMarchList().hashCode();
    }
    if (getAprilCount() > 0) {
      hash = (37 * hash) + APRIL_FIELD_NUMBER;
      hash = (53 * hash) + getAprilList().hashCode();
    }
    if (getMayCount() > 0) {
      hash = (37 * hash) + MAY_FIELD_NUMBER;
      hash = (53 * hash) + getMayList().hashCode();
    }
    if (getJuneCount() > 0) {
      hash = (37 * hash) + JUNE_FIELD_NUMBER;
      hash = (53 * hash) + getJuneList().hashCode();
    }
    if (getJulyCount() > 0) {
      hash = (37 * hash) + JULY_FIELD_NUMBER;
      hash = (53 * hash) + getJulyList().hashCode();
    }
    if (getAugustCount() > 0) {
      hash = (37 * hash) + AUGUST_FIELD_NUMBER;
      hash = (53 * hash) + getAugustList().hashCode();
    }
    if (getSeptemberCount() > 0) {
      hash = (37 * hash) + SEPTEMBER_FIELD_NUMBER;
      hash = (53 * hash) + getSeptemberList().hashCode();
    }
    if (getOctoberCount() > 0) {
      hash = (37 * hash) + OCTOBER_FIELD_NUMBER;
      hash = (53 * hash) + getOctoberList().hashCode();
    }
    if (getNovemberCount() > 0) {
      hash = (37 * hash) + NOVEMBER_FIELD_NUMBER;
      hash = (53 * hash) + getNovemberList().hashCode();
    }
    if (getDecemberCount() > 0) {
      hash = (37 * hash) + DECEMBER_FIELD_NUMBER;
      hash = (53 * hash) + getDecemberList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.tcn.cloud.api.api.commons.ProfileWOMS parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.tcn.cloud.api.api.commons.ProfileWOMS prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * a profile for week of month, for each month of the year
   * </pre>
   *
   * Protobuf type {@code api.commons.ProfileWOMS}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:api.commons.ProfileWOMS)
      com.tcn.cloud.api.api.commons.ProfileWOMSOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileWOMS_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileWOMS_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.tcn.cloud.api.api.commons.ProfileWOMS.class, com.tcn.cloud.api.api.commons.ProfileWOMS.Builder.class);
    }

    // Construct using com.tcn.cloud.api.api.commons.ProfileWOMS.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      january_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000001);
      february_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000002);
      march_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000004);
      april_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000008);
      may_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000010);
      june_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000020);
      july_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000040);
      august_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000080);
      september_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000100);
      october_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000200);
      november_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000400);
      december_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000800);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.tcn.cloud.api.api.commons.WfmProto.internal_static_api_commons_ProfileWOMS_descriptor;
    }

    @java.lang.Override
    public com.tcn.cloud.api.api.commons.ProfileWOMS getDefaultInstanceForType() {
      return com.tcn.cloud.api.api.commons.ProfileWOMS.getDefaultInstance();
    }

    @java.lang.Override
    public com.tcn.cloud.api.api.commons.ProfileWOMS build() {
      com.tcn.cloud.api.api.commons.ProfileWOMS result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.tcn.cloud.api.api.commons.ProfileWOMS buildPartial() {
      com.tcn.cloud.api.api.commons.ProfileWOMS result = new com.tcn.cloud.api.api.commons.ProfileWOMS(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) != 0)) {
        january_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.january_ = january_;
      if (((bitField0_ & 0x00000002) != 0)) {
        february_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.february_ = february_;
      if (((bitField0_ & 0x00000004) != 0)) {
        march_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.march_ = march_;
      if (((bitField0_ & 0x00000008) != 0)) {
        april_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.april_ = april_;
      if (((bitField0_ & 0x00000010) != 0)) {
        may_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.may_ = may_;
      if (((bitField0_ & 0x00000020) != 0)) {
        june_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.june_ = june_;
      if (((bitField0_ & 0x00000040) != 0)) {
        july_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.july_ = july_;
      if (((bitField0_ & 0x00000080) != 0)) {
        august_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000080);
      }
      result.august_ = august_;
      if (((bitField0_ & 0x00000100) != 0)) {
        september_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000100);
      }
      result.september_ = september_;
      if (((bitField0_ & 0x00000200) != 0)) {
        october_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000200);
      }
      result.october_ = october_;
      if (((bitField0_ & 0x00000400) != 0)) {
        november_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000400);
      }
      result.november_ = november_;
      if (((bitField0_ & 0x00000800) != 0)) {
        december_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000800);
      }
      result.december_ = december_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.tcn.cloud.api.api.commons.ProfileWOMS) {
        return mergeFrom((com.tcn.cloud.api.api.commons.ProfileWOMS)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.tcn.cloud.api.api.commons.ProfileWOMS other) {
      if (other == com.tcn.cloud.api.api.commons.ProfileWOMS.getDefaultInstance()) return this;
      if (!other.january_.isEmpty()) {
        if (january_.isEmpty()) {
          january_ = other.january_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureJanuaryIsMutable();
          january_.addAll(other.january_);
        }
        onChanged();
      }
      if (!other.february_.isEmpty()) {
        if (february_.isEmpty()) {
          february_ = other.february_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureFebruaryIsMutable();
          february_.addAll(other.february_);
        }
        onChanged();
      }
      if (!other.march_.isEmpty()) {
        if (march_.isEmpty()) {
          march_ = other.march_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureMarchIsMutable();
          march_.addAll(other.march_);
        }
        onChanged();
      }
      if (!other.april_.isEmpty()) {
        if (april_.isEmpty()) {
          april_ = other.april_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureAprilIsMutable();
          april_.addAll(other.april_);
        }
        onChanged();
      }
      if (!other.may_.isEmpty()) {
        if (may_.isEmpty()) {
          may_ = other.may_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureMayIsMutable();
          may_.addAll(other.may_);
        }
        onChanged();
      }
      if (!other.june_.isEmpty()) {
        if (june_.isEmpty()) {
          june_ = other.june_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureJuneIsMutable();
          june_.addAll(other.june_);
        }
        onChanged();
      }
      if (!other.july_.isEmpty()) {
        if (july_.isEmpty()) {
          july_ = other.july_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureJulyIsMutable();
          july_.addAll(other.july_);
        }
        onChanged();
      }
      if (!other.august_.isEmpty()) {
        if (august_.isEmpty()) {
          august_ = other.august_;
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          ensureAugustIsMutable();
          august_.addAll(other.august_);
        }
        onChanged();
      }
      if (!other.september_.isEmpty()) {
        if (september_.isEmpty()) {
          september_ = other.september_;
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          ensureSeptemberIsMutable();
          september_.addAll(other.september_);
        }
        onChanged();
      }
      if (!other.october_.isEmpty()) {
        if (october_.isEmpty()) {
          october_ = other.october_;
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          ensureOctoberIsMutable();
          october_.addAll(other.october_);
        }
        onChanged();
      }
      if (!other.november_.isEmpty()) {
        if (november_.isEmpty()) {
          november_ = other.november_;
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          ensureNovemberIsMutable();
          november_.addAll(other.november_);
        }
        onChanged();
      }
      if (!other.december_.isEmpty()) {
        if (december_.isEmpty()) {
          december_ = other.december_;
          bitField0_ = (bitField0_ & ~0x00000800);
        } else {
          ensureDecemberIsMutable();
          december_.addAll(other.december_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.tcn.cloud.api.api.commons.ProfileWOMS parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.tcn.cloud.api.api.commons.ProfileWOMS) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.FloatList january_ = emptyFloatList();
    private void ensureJanuaryIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        january_ = mutableCopy(january_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <code>repeated float january = 1 [json_name = "january"];</code>
     * @return A list containing the january.
     */
    public java.util.List<java.lang.Float>
        getJanuaryList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(january_) : january_;
    }
    /**
     * <code>repeated float january = 1 [json_name = "january"];</code>
     * @return The count of january.
     */
    public int getJanuaryCount() {
      return january_.size();
    }
    /**
     * <code>repeated float january = 1 [json_name = "january"];</code>
     * @param index The index of the element to return.
     * @return The january at the given index.
     */
    public float getJanuary(int index) {
      return january_.getFloat(index);
    }
    /**
     * <code>repeated float january = 1 [json_name = "january"];</code>
     * @param index The index to set the value at.
     * @param value The january to set.
     * @return This builder for chaining.
     */
    public Builder setJanuary(
        int index, float value) {
      ensureJanuaryIsMutable();
      january_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float january = 1 [json_name = "january"];</code>
     * @param value The january to add.
     * @return This builder for chaining.
     */
    public Builder addJanuary(float value) {
      ensureJanuaryIsMutable();
      january_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float january = 1 [json_name = "january"];</code>
     * @param values The january to add.
     * @return This builder for chaining.
     */
    public Builder addAllJanuary(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureJanuaryIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, january_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float january = 1 [json_name = "january"];</code>
     * @return This builder for chaining.
     */
    public Builder clearJanuary() {
      january_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList february_ = emptyFloatList();
    private void ensureFebruaryIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        february_ = mutableCopy(february_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <code>repeated float february = 2 [json_name = "february"];</code>
     * @return A list containing the february.
     */
    public java.util.List<java.lang.Float>
        getFebruaryList() {
      return ((bitField0_ & 0x00000002) != 0) ?
               java.util.Collections.unmodifiableList(february_) : february_;
    }
    /**
     * <code>repeated float february = 2 [json_name = "february"];</code>
     * @return The count of february.
     */
    public int getFebruaryCount() {
      return february_.size();
    }
    /**
     * <code>repeated float february = 2 [json_name = "february"];</code>
     * @param index The index of the element to return.
     * @return The february at the given index.
     */
    public float getFebruary(int index) {
      return february_.getFloat(index);
    }
    /**
     * <code>repeated float february = 2 [json_name = "february"];</code>
     * @param index The index to set the value at.
     * @param value The february to set.
     * @return This builder for chaining.
     */
    public Builder setFebruary(
        int index, float value) {
      ensureFebruaryIsMutable();
      february_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float february = 2 [json_name = "february"];</code>
     * @param value The february to add.
     * @return This builder for chaining.
     */
    public Builder addFebruary(float value) {
      ensureFebruaryIsMutable();
      february_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float february = 2 [json_name = "february"];</code>
     * @param values The february to add.
     * @return This builder for chaining.
     */
    public Builder addAllFebruary(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureFebruaryIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, february_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float february = 2 [json_name = "february"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFebruary() {
      february_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList march_ = emptyFloatList();
    private void ensureMarchIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        march_ = mutableCopy(march_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <code>repeated float march = 3 [json_name = "march"];</code>
     * @return A list containing the march.
     */
    public java.util.List<java.lang.Float>
        getMarchList() {
      return ((bitField0_ & 0x00000004) != 0) ?
               java.util.Collections.unmodifiableList(march_) : march_;
    }
    /**
     * <code>repeated float march = 3 [json_name = "march"];</code>
     * @return The count of march.
     */
    public int getMarchCount() {
      return march_.size();
    }
    /**
     * <code>repeated float march = 3 [json_name = "march"];</code>
     * @param index The index of the element to return.
     * @return The march at the given index.
     */
    public float getMarch(int index) {
      return march_.getFloat(index);
    }
    /**
     * <code>repeated float march = 3 [json_name = "march"];</code>
     * @param index The index to set the value at.
     * @param value The march to set.
     * @return This builder for chaining.
     */
    public Builder setMarch(
        int index, float value) {
      ensureMarchIsMutable();
      march_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float march = 3 [json_name = "march"];</code>
     * @param value The march to add.
     * @return This builder for chaining.
     */
    public Builder addMarch(float value) {
      ensureMarchIsMutable();
      march_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float march = 3 [json_name = "march"];</code>
     * @param values The march to add.
     * @return This builder for chaining.
     */
    public Builder addAllMarch(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureMarchIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, march_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float march = 3 [json_name = "march"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMarch() {
      march_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList april_ = emptyFloatList();
    private void ensureAprilIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        april_ = mutableCopy(april_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <code>repeated float april = 4 [json_name = "april"];</code>
     * @return A list containing the april.
     */
    public java.util.List<java.lang.Float>
        getAprilList() {
      return ((bitField0_ & 0x00000008) != 0) ?
               java.util.Collections.unmodifiableList(april_) : april_;
    }
    /**
     * <code>repeated float april = 4 [json_name = "april"];</code>
     * @return The count of april.
     */
    public int getAprilCount() {
      return april_.size();
    }
    /**
     * <code>repeated float april = 4 [json_name = "april"];</code>
     * @param index The index of the element to return.
     * @return The april at the given index.
     */
    public float getApril(int index) {
      return april_.getFloat(index);
    }
    /**
     * <code>repeated float april = 4 [json_name = "april"];</code>
     * @param index The index to set the value at.
     * @param value The april to set.
     * @return This builder for chaining.
     */
    public Builder setApril(
        int index, float value) {
      ensureAprilIsMutable();
      april_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float april = 4 [json_name = "april"];</code>
     * @param value The april to add.
     * @return This builder for chaining.
     */
    public Builder addApril(float value) {
      ensureAprilIsMutable();
      april_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float april = 4 [json_name = "april"];</code>
     * @param values The april to add.
     * @return This builder for chaining.
     */
    public Builder addAllApril(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureAprilIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, april_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float april = 4 [json_name = "april"];</code>
     * @return This builder for chaining.
     */
    public Builder clearApril() {
      april_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList may_ = emptyFloatList();
    private void ensureMayIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        may_ = mutableCopy(may_);
        bitField0_ |= 0x00000010;
       }
    }
    /**
     * <code>repeated float may = 5 [json_name = "may"];</code>
     * @return A list containing the may.
     */
    public java.util.List<java.lang.Float>
        getMayList() {
      return ((bitField0_ & 0x00000010) != 0) ?
               java.util.Collections.unmodifiableList(may_) : may_;
    }
    /**
     * <code>repeated float may = 5 [json_name = "may"];</code>
     * @return The count of may.
     */
    public int getMayCount() {
      return may_.size();
    }
    /**
     * <code>repeated float may = 5 [json_name = "may"];</code>
     * @param index The index of the element to return.
     * @return The may at the given index.
     */
    public float getMay(int index) {
      return may_.getFloat(index);
    }
    /**
     * <code>repeated float may = 5 [json_name = "may"];</code>
     * @param index The index to set the value at.
     * @param value The may to set.
     * @return This builder for chaining.
     */
    public Builder setMay(
        int index, float value) {
      ensureMayIsMutable();
      may_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float may = 5 [json_name = "may"];</code>
     * @param value The may to add.
     * @return This builder for chaining.
     */
    public Builder addMay(float value) {
      ensureMayIsMutable();
      may_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float may = 5 [json_name = "may"];</code>
     * @param values The may to add.
     * @return This builder for chaining.
     */
    public Builder addAllMay(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureMayIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, may_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float may = 5 [json_name = "may"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMay() {
      may_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList june_ = emptyFloatList();
    private void ensureJuneIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        june_ = mutableCopy(june_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <code>repeated float june = 6 [json_name = "june"];</code>
     * @return A list containing the june.
     */
    public java.util.List<java.lang.Float>
        getJuneList() {
      return ((bitField0_ & 0x00000020) != 0) ?
               java.util.Collections.unmodifiableList(june_) : june_;
    }
    /**
     * <code>repeated float june = 6 [json_name = "june"];</code>
     * @return The count of june.
     */
    public int getJuneCount() {
      return june_.size();
    }
    /**
     * <code>repeated float june = 6 [json_name = "june"];</code>
     * @param index The index of the element to return.
     * @return The june at the given index.
     */
    public float getJune(int index) {
      return june_.getFloat(index);
    }
    /**
     * <code>repeated float june = 6 [json_name = "june"];</code>
     * @param index The index to set the value at.
     * @param value The june to set.
     * @return This builder for chaining.
     */
    public Builder setJune(
        int index, float value) {
      ensureJuneIsMutable();
      june_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float june = 6 [json_name = "june"];</code>
     * @param value The june to add.
     * @return This builder for chaining.
     */
    public Builder addJune(float value) {
      ensureJuneIsMutable();
      june_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float june = 6 [json_name = "june"];</code>
     * @param values The june to add.
     * @return This builder for chaining.
     */
    public Builder addAllJune(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureJuneIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, june_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float june = 6 [json_name = "june"];</code>
     * @return This builder for chaining.
     */
    public Builder clearJune() {
      june_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList july_ = emptyFloatList();
    private void ensureJulyIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        july_ = mutableCopy(july_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <code>repeated float july = 7 [json_name = "july"];</code>
     * @return A list containing the july.
     */
    public java.util.List<java.lang.Float>
        getJulyList() {
      return ((bitField0_ & 0x00000040) != 0) ?
               java.util.Collections.unmodifiableList(july_) : july_;
    }
    /**
     * <code>repeated float july = 7 [json_name = "july"];</code>
     * @return The count of july.
     */
    public int getJulyCount() {
      return july_.size();
    }
    /**
     * <code>repeated float july = 7 [json_name = "july"];</code>
     * @param index The index of the element to return.
     * @return The july at the given index.
     */
    public float getJuly(int index) {
      return july_.getFloat(index);
    }
    /**
     * <code>repeated float july = 7 [json_name = "july"];</code>
     * @param index The index to set the value at.
     * @param value The july to set.
     * @return This builder for chaining.
     */
    public Builder setJuly(
        int index, float value) {
      ensureJulyIsMutable();
      july_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float july = 7 [json_name = "july"];</code>
     * @param value The july to add.
     * @return This builder for chaining.
     */
    public Builder addJuly(float value) {
      ensureJulyIsMutable();
      july_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float july = 7 [json_name = "july"];</code>
     * @param values The july to add.
     * @return This builder for chaining.
     */
    public Builder addAllJuly(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureJulyIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, july_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float july = 7 [json_name = "july"];</code>
     * @return This builder for chaining.
     */
    public Builder clearJuly() {
      july_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList august_ = emptyFloatList();
    private void ensureAugustIsMutable() {
      if (!((bitField0_ & 0x00000080) != 0)) {
        august_ = mutableCopy(august_);
        bitField0_ |= 0x00000080;
       }
    }
    /**
     * <code>repeated float august = 8 [json_name = "august"];</code>
     * @return A list containing the august.
     */
    public java.util.List<java.lang.Float>
        getAugustList() {
      return ((bitField0_ & 0x00000080) != 0) ?
               java.util.Collections.unmodifiableList(august_) : august_;
    }
    /**
     * <code>repeated float august = 8 [json_name = "august"];</code>
     * @return The count of august.
     */
    public int getAugustCount() {
      return august_.size();
    }
    /**
     * <code>repeated float august = 8 [json_name = "august"];</code>
     * @param index The index of the element to return.
     * @return The august at the given index.
     */
    public float getAugust(int index) {
      return august_.getFloat(index);
    }
    /**
     * <code>repeated float august = 8 [json_name = "august"];</code>
     * @param index The index to set the value at.
     * @param value The august to set.
     * @return This builder for chaining.
     */
    public Builder setAugust(
        int index, float value) {
      ensureAugustIsMutable();
      august_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float august = 8 [json_name = "august"];</code>
     * @param value The august to add.
     * @return This builder for chaining.
     */
    public Builder addAugust(float value) {
      ensureAugustIsMutable();
      august_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float august = 8 [json_name = "august"];</code>
     * @param values The august to add.
     * @return This builder for chaining.
     */
    public Builder addAllAugust(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureAugustIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, august_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float august = 8 [json_name = "august"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAugust() {
      august_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList september_ = emptyFloatList();
    private void ensureSeptemberIsMutable() {
      if (!((bitField0_ & 0x00000100) != 0)) {
        september_ = mutableCopy(september_);
        bitField0_ |= 0x00000100;
       }
    }
    /**
     * <code>repeated float september = 9 [json_name = "september"];</code>
     * @return A list containing the september.
     */
    public java.util.List<java.lang.Float>
        getSeptemberList() {
      return ((bitField0_ & 0x00000100) != 0) ?
               java.util.Collections.unmodifiableList(september_) : september_;
    }
    /**
     * <code>repeated float september = 9 [json_name = "september"];</code>
     * @return The count of september.
     */
    public int getSeptemberCount() {
      return september_.size();
    }
    /**
     * <code>repeated float september = 9 [json_name = "september"];</code>
     * @param index The index of the element to return.
     * @return The september at the given index.
     */
    public float getSeptember(int index) {
      return september_.getFloat(index);
    }
    /**
     * <code>repeated float september = 9 [json_name = "september"];</code>
     * @param index The index to set the value at.
     * @param value The september to set.
     * @return This builder for chaining.
     */
    public Builder setSeptember(
        int index, float value) {
      ensureSeptemberIsMutable();
      september_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float september = 9 [json_name = "september"];</code>
     * @param value The september to add.
     * @return This builder for chaining.
     */
    public Builder addSeptember(float value) {
      ensureSeptemberIsMutable();
      september_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float september = 9 [json_name = "september"];</code>
     * @param values The september to add.
     * @return This builder for chaining.
     */
    public Builder addAllSeptember(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureSeptemberIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, september_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float september = 9 [json_name = "september"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSeptember() {
      september_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList october_ = emptyFloatList();
    private void ensureOctoberIsMutable() {
      if (!((bitField0_ & 0x00000200) != 0)) {
        october_ = mutableCopy(october_);
        bitField0_ |= 0x00000200;
       }
    }
    /**
     * <code>repeated float october = 10 [json_name = "october"];</code>
     * @return A list containing the october.
     */
    public java.util.List<java.lang.Float>
        getOctoberList() {
      return ((bitField0_ & 0x00000200) != 0) ?
               java.util.Collections.unmodifiableList(october_) : october_;
    }
    /**
     * <code>repeated float october = 10 [json_name = "october"];</code>
     * @return The count of october.
     */
    public int getOctoberCount() {
      return october_.size();
    }
    /**
     * <code>repeated float october = 10 [json_name = "october"];</code>
     * @param index The index of the element to return.
     * @return The october at the given index.
     */
    public float getOctober(int index) {
      return october_.getFloat(index);
    }
    /**
     * <code>repeated float october = 10 [json_name = "october"];</code>
     * @param index The index to set the value at.
     * @param value The october to set.
     * @return This builder for chaining.
     */
    public Builder setOctober(
        int index, float value) {
      ensureOctoberIsMutable();
      october_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float october = 10 [json_name = "october"];</code>
     * @param value The october to add.
     * @return This builder for chaining.
     */
    public Builder addOctober(float value) {
      ensureOctoberIsMutable();
      october_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float october = 10 [json_name = "october"];</code>
     * @param values The october to add.
     * @return This builder for chaining.
     */
    public Builder addAllOctober(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureOctoberIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, october_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float october = 10 [json_name = "october"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOctober() {
      october_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000200);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList november_ = emptyFloatList();
    private void ensureNovemberIsMutable() {
      if (!((bitField0_ & 0x00000400) != 0)) {
        november_ = mutableCopy(november_);
        bitField0_ |= 0x00000400;
       }
    }
    /**
     * <code>repeated float november = 11 [json_name = "november"];</code>
     * @return A list containing the november.
     */
    public java.util.List<java.lang.Float>
        getNovemberList() {
      return ((bitField0_ & 0x00000400) != 0) ?
               java.util.Collections.unmodifiableList(november_) : november_;
    }
    /**
     * <code>repeated float november = 11 [json_name = "november"];</code>
     * @return The count of november.
     */
    public int getNovemberCount() {
      return november_.size();
    }
    /**
     * <code>repeated float november = 11 [json_name = "november"];</code>
     * @param index The index of the element to return.
     * @return The november at the given index.
     */
    public float getNovember(int index) {
      return november_.getFloat(index);
    }
    /**
     * <code>repeated float november = 11 [json_name = "november"];</code>
     * @param index The index to set the value at.
     * @param value The november to set.
     * @return This builder for chaining.
     */
    public Builder setNovember(
        int index, float value) {
      ensureNovemberIsMutable();
      november_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float november = 11 [json_name = "november"];</code>
     * @param value The november to add.
     * @return This builder for chaining.
     */
    public Builder addNovember(float value) {
      ensureNovemberIsMutable();
      november_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float november = 11 [json_name = "november"];</code>
     * @param values The november to add.
     * @return This builder for chaining.
     */
    public Builder addAllNovember(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureNovemberIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, november_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float november = 11 [json_name = "november"];</code>
     * @return This builder for chaining.
     */
    public Builder clearNovember() {
      november_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000400);
      onChanged();
      return this;
    }

    private com.google.protobuf.Internal.FloatList december_ = emptyFloatList();
    private void ensureDecemberIsMutable() {
      if (!((bitField0_ & 0x00000800) != 0)) {
        december_ = mutableCopy(december_);
        bitField0_ |= 0x00000800;
       }
    }
    /**
     * <code>repeated float december = 12 [json_name = "december"];</code>
     * @return A list containing the december.
     */
    public java.util.List<java.lang.Float>
        getDecemberList() {
      return ((bitField0_ & 0x00000800) != 0) ?
               java.util.Collections.unmodifiableList(december_) : december_;
    }
    /**
     * <code>repeated float december = 12 [json_name = "december"];</code>
     * @return The count of december.
     */
    public int getDecemberCount() {
      return december_.size();
    }
    /**
     * <code>repeated float december = 12 [json_name = "december"];</code>
     * @param index The index of the element to return.
     * @return The december at the given index.
     */
    public float getDecember(int index) {
      return december_.getFloat(index);
    }
    /**
     * <code>repeated float december = 12 [json_name = "december"];</code>
     * @param index The index to set the value at.
     * @param value The december to set.
     * @return This builder for chaining.
     */
    public Builder setDecember(
        int index, float value) {
      ensureDecemberIsMutable();
      december_.setFloat(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float december = 12 [json_name = "december"];</code>
     * @param value The december to add.
     * @return This builder for chaining.
     */
    public Builder addDecember(float value) {
      ensureDecemberIsMutable();
      december_.addFloat(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float december = 12 [json_name = "december"];</code>
     * @param values The december to add.
     * @return This builder for chaining.
     */
    public Builder addAllDecember(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureDecemberIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, december_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated float december = 12 [json_name = "december"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDecember() {
      december_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000800);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:api.commons.ProfileWOMS)
  }

  // @@protoc_insertion_point(class_scope:api.commons.ProfileWOMS)
  private static final com.tcn.cloud.api.api.commons.ProfileWOMS DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.tcn.cloud.api.api.commons.ProfileWOMS();
  }

  public static com.tcn.cloud.api.api.commons.ProfileWOMS getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ProfileWOMS>
      PARSER = new com.google.protobuf.AbstractParser<ProfileWOMS>() {
    @java.lang.Override
    public ProfileWOMS parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ProfileWOMS(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ProfileWOMS> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ProfileWOMS> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.tcn.cloud.api.api.commons.ProfileWOMS getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

