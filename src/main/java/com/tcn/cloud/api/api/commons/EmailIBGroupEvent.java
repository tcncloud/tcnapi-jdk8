// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/email.proto

package com.tcn.cloud.api.api.commons;

/**
 * Protobuf enum {@code api.commons.EmailIBGroupEvent}
 */
public enum EmailIBGroupEvent
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * when the system is getting things ready for the inbound group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_PREPARED = 0;</code>
   */
  IB_EMAIL_GROUP_EVENT_PREPARED(0),
  /**
   * <pre>
   * when the inbound group is scheduled
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_SCHEDULED = 1;</code>
   */
  IB_EMAIL_GROUP_EVENT_SCHEDULED(1),
  /**
   * <pre>
   * when the manager starts the inbound group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_STARTED = 2;</code>
   */
  IB_EMAIL_GROUP_EVENT_STARTED(2),
  /**
   * <pre>
   * each time a poller runs a cycle for the inbound group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_RUNNING = 3;</code>
   */
  IB_EMAIL_GROUP_EVENT_RUNNING(3),
  /**
   * <pre>
   * when the manager stops the inbound group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_STOPPED = 4;</code>
   */
  IB_EMAIL_GROUP_EVENT_STOPPED(4),
  /**
   * <pre>
   * when the poller stops because of error or if the ui sets pause
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_PAUSED = 5;</code>
   */
  IB_EMAIL_GROUP_EVENT_PAUSED(5),
  /**
   * <pre>
   * when the ui resumes
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_RESUME = 6;</code>
   */
  IB_EMAIL_GROUP_EVENT_RESUME(6),
  /**
   * <pre>
   * when the ui stops
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_CANCELLED = 7;</code>
   */
  IB_EMAIL_GROUP_EVENT_CANCELLED(7),
  /**
   * <pre>
   * each time we get a message for a group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_MESSAGE_RECEIVED = 8;</code>
   */
  IB_EMAIL_GROUP_EVENT_MESSAGE_RECEIVED(8),
  /**
   * <pre>
   * each time we have an error because of logging in
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_LOGIN_ERROR = 9;</code>
   */
  IB_EMAIL_GROUP_EVENT_LOGIN_ERROR(9),
  /**
   * <pre>
   * when we fail to fetch messages ? - not sure about this one yet
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_FETCH_ERROR = 10;</code>
   */
  IB_EMAIL_GROUP_EVENT_FETCH_ERROR(10),
  /**
   * <pre>
   * reached max number of consecutive errors logging into email acct
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_STANDBY_ERROR = 11;</code>
   */
  IB_EMAIL_GROUP_EVENT_STANDBY_ERROR(11),
  /**
   * <pre>
   * when the inbound group is marked as completed by the manager
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_COMPLETED = 12;</code>
   */
  IB_EMAIL_GROUP_EVENT_COMPLETED(12),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * when the system is getting things ready for the inbound group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_PREPARED = 0;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_PREPARED_VALUE = 0;
  /**
   * <pre>
   * when the inbound group is scheduled
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_SCHEDULED = 1;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_SCHEDULED_VALUE = 1;
  /**
   * <pre>
   * when the manager starts the inbound group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_STARTED = 2;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_STARTED_VALUE = 2;
  /**
   * <pre>
   * each time a poller runs a cycle for the inbound group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_RUNNING = 3;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_RUNNING_VALUE = 3;
  /**
   * <pre>
   * when the manager stops the inbound group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_STOPPED = 4;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_STOPPED_VALUE = 4;
  /**
   * <pre>
   * when the poller stops because of error or if the ui sets pause
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_PAUSED = 5;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_PAUSED_VALUE = 5;
  /**
   * <pre>
   * when the ui resumes
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_RESUME = 6;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_RESUME_VALUE = 6;
  /**
   * <pre>
   * when the ui stops
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_CANCELLED = 7;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_CANCELLED_VALUE = 7;
  /**
   * <pre>
   * each time we get a message for a group
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_MESSAGE_RECEIVED = 8;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_MESSAGE_RECEIVED_VALUE = 8;
  /**
   * <pre>
   * each time we have an error because of logging in
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_LOGIN_ERROR = 9;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_LOGIN_ERROR_VALUE = 9;
  /**
   * <pre>
   * when we fail to fetch messages ? - not sure about this one yet
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_FETCH_ERROR = 10;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_FETCH_ERROR_VALUE = 10;
  /**
   * <pre>
   * reached max number of consecutive errors logging into email acct
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_STANDBY_ERROR = 11;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_STANDBY_ERROR_VALUE = 11;
  /**
   * <pre>
   * when the inbound group is marked as completed by the manager
   * </pre>
   *
   * <code>IB_EMAIL_GROUP_EVENT_COMPLETED = 12;</code>
   */
  public static final int IB_EMAIL_GROUP_EVENT_COMPLETED_VALUE = 12;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EmailIBGroupEvent valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static EmailIBGroupEvent forNumber(int value) {
    switch (value) {
      case 0: return IB_EMAIL_GROUP_EVENT_PREPARED;
      case 1: return IB_EMAIL_GROUP_EVENT_SCHEDULED;
      case 2: return IB_EMAIL_GROUP_EVENT_STARTED;
      case 3: return IB_EMAIL_GROUP_EVENT_RUNNING;
      case 4: return IB_EMAIL_GROUP_EVENT_STOPPED;
      case 5: return IB_EMAIL_GROUP_EVENT_PAUSED;
      case 6: return IB_EMAIL_GROUP_EVENT_RESUME;
      case 7: return IB_EMAIL_GROUP_EVENT_CANCELLED;
      case 8: return IB_EMAIL_GROUP_EVENT_MESSAGE_RECEIVED;
      case 9: return IB_EMAIL_GROUP_EVENT_LOGIN_ERROR;
      case 10: return IB_EMAIL_GROUP_EVENT_FETCH_ERROR;
      case 11: return IB_EMAIL_GROUP_EVENT_STANDBY_ERROR;
      case 12: return IB_EMAIL_GROUP_EVENT_COMPLETED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EmailIBGroupEvent>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EmailIBGroupEvent> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EmailIBGroupEvent>() {
          public EmailIBGroupEvent findValueByNumber(int number) {
            return EmailIBGroupEvent.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.EmailProto.getDescriptor().getEnumTypes().get(4);
  }

  private static final EmailIBGroupEvent[] VALUES = values();

  public static EmailIBGroupEvent valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EmailIBGroupEvent(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.EmailIBGroupEvent)
}

