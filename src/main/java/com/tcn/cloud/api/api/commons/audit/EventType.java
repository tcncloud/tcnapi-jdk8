// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/audit/event_types.proto

package com.tcn.cloud.api.api.commons.audit;

/**
 * <pre>
 * This enum will hold all application classes and sub-classes
 * Classes are encoded as hundreds (100, 200...) and sub-classes are the class ID + 0..99.
 *
 * EventType is the source for typing subscriptions, notifications, and any future
 * event use cases such auditing, billing, logging, etc. (anything triggered by audit).
 *
 * Follow the pattern of (product + event description), separated by underscores.
 *   - e.g. PRODUCT_EVENT_DESCRIPTION
 *
 * EventTypes that trigger notifications should read nicely as a system message header.
 *   - e.g Product Event Description
 * </pre>
 *
 * Protobuf enum {@code api.commons.audit.EventType}
 */
public enum EventType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Dummy Application IDs
   * </pre>
   *
   * <code>DUMMY_APPLICATION = 0;</code>
   */
  DUMMY_APPLICATION(0),
  /**
   * <code>DUMMY_APPLICATION_STORAGE = 1;</code>
   */
  DUMMY_APPLICATION_STORAGE(1),
  /**
   * <code>DUMMY_APPLICATION_COMPUTE = 2;</code>
   */
  DUMMY_APPLICATION_COMPUTE(2),
  /**
   * <pre>
   * Voice Analytics Application IDs
   * </pre>
   *
   * <code>VOICE_ANALYTICS = 100;</code>
   */
  VOICE_ANALYTICS(100),
  /**
   * <code>VOICE_ANALYTICS_FLAG_OCCURRENCE = 101;</code>
   */
  VOICE_ANALYTICS_FLAG_OCCURRENCE(101),
  /**
   * <code>VOICE_ANALYTICS_FLAG_NEEDS_REVIEW = 102;</code>
   */
  VOICE_ANALYTICS_FLAG_NEEDS_REVIEW(102),
  /**
   * <code>VOICE_ANALYTICS_BILLING_REPORT = 103;</code>
   */
  VOICE_ANALYTICS_BILLING_REPORT(103),
  /**
   * <code>VOICE_ANALYTICS_FLAG_SUMMARY = 104;</code>
   */
  VOICE_ANALYTICS_FLAG_SUMMARY(104),
  /**
   * <code>VOICE_ANALYTICS_PHRASE_CORRECTION = 105;</code>
   */
  VOICE_ANALYTICS_PHRASE_CORRECTION(105),
  /**
   * <code>VOICE_ANALYTICS_CREATE_TRANSCRIPT = 106;</code>
   */
  VOICE_ANALYTICS_CREATE_TRANSCRIPT(106),
  /**
   * <code>VOICE_ANALYTICS_CREATE_SENTIMENT = 107;</code>
   */
  VOICE_ANALYTICS_CREATE_SENTIMENT(107),
  /**
   * <code>VOICE_ANALYTICS_CREATE_SUMMARY = 108;</code>
   */
  VOICE_ANALYTICS_CREATE_SUMMARY(108),
  /**
   * <pre>
   * Omnichannel Dashboard Application IDs
   * </pre>
   *
   * <code>OMNICHANNEL = 300;</code>
   */
  OMNICHANNEL(300),
  /**
   * <code>OMNICHANNEL_PROJECT = 301;</code>
   */
  OMNICHANNEL_PROJECT(301),
  /**
   * <code>OMNICHANNEL_CAMPAIGN = 302;</code>
   */
  OMNICHANNEL_CAMPAIGN(302),
  /**
   * <code>OMNICHANNEL_DAILY_PROJECT_REPORT = 303;</code>
   */
  OMNICHANNEL_DAILY_PROJECT_REPORT(303),
  /**
   * <code>OMNICHANNEL_DAILY_CONVERSATION_REPORT = 304;</code>
   */
  OMNICHANNEL_DAILY_CONVERSATION_REPORT(304),
  /**
   * <pre>
   * agent assign conversation eventType
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_ASSIGN_CONVERSATION = 305;</code>
   */
  OMNICHANNEL_AGENT_ASSIGN_CONVERSATION(305),
  /**
   * <pre>
   * agent unassign conversation eventType
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_UNASSIGN_CONVERSATION = 306;</code>
   */
  OMNICHANNEL_AGENT_UNASSIGN_CONVERSATION(306),
  /**
   * <pre>
   * agent reassign conversation eventType
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_REASSIGN_CONVERSATION = 307;</code>
   */
  OMNICHANNEL_AGENT_REASSIGN_CONVERSATION(307),
  /**
   * <pre>
   * T10 trigger  eventType
   * </pre>
   *
   * <code>OMNICHANNEL_T10 = 308;</code>
   */
  OMNICHANNEL_T10(308),
  /**
   * <pre>
   * customer sent a text message event
   * </pre>
   *
   * <code>OMNICHANNEL_CUSTOMER_TEXT_MESSAGE = 309 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_CUSTOMER_TEXT_MESSAGE(309),
  /**
   * <pre>
   * agent sent a text message event
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_TEXT_MESSAGE = 310 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_AGENT_TEXT_MESSAGE(310),
  /**
   * <pre>
   * finish wrap up event
   * </pre>
   *
   * <code>OMNICHANNEL_FINISH_WRAP_UP = 311;</code>
   */
  OMNICHANNEL_FINISH_WRAP_UP(311),
  /**
   * <pre>
   * conversation closes and wrap up begins event
   * </pre>
   *
   * <code>OMNICHANNEL_BEGIN_WRAP_UP = 312;</code>
   */
  OMNICHANNEL_BEGIN_WRAP_UP(312),
  /**
   * <pre>
   * t11 timer went off event
   * </pre>
   *
   * <code>OMNICHANNEL_T11 = 313;</code>
   */
  OMNICHANNEL_T11(313),
  /**
   * <pre>
   * create conversation when customer sends initial message and T1 starts
   * </pre>
   *
   * <code>OMNICHANNEL_CREATE_CONVERSATION = 314;</code>
   */
  OMNICHANNEL_CREATE_CONVERSATION(314),
  /**
   * <pre>
   * agent suspends the conversation event
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_SUSPEND = 315;</code>
   */
  OMNICHANNEL_AGENT_SUSPEND(315),
  /**
   * <pre>
   * conversation is closed
   * </pre>
   *
   * <code>OMNICHANNEL_CLOSE_CONVERSATION = 316;</code>
   */
  OMNICHANNEL_CLOSE_CONVERSATION(316),
  /**
   * <pre>
   * manager sent a text message event
   * </pre>
   *
   * <code>OMNICHANNEL_MANAGER_TEXT_MESSAGE = 332 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_MANAGER_TEXT_MESSAGE(332),
  /**
   * <pre>
   * update event with campaign details
   * </pre>
   *
   * <code>OMNICHANNEL_UPDATE_CAMPAIGN = 330;</code>
   */
  OMNICHANNEL_UPDATE_CAMPAIGN(330),
  /**
   * <pre>
   * update event with set conversation collected data details
   * </pre>
   *
   * <code>OMNICHANNEL_SET_CONVERSATION_COLLECTED_DATA = 331;</code>
   */
  OMNICHANNEL_SET_CONVERSATION_COLLECTED_DATA(331),
  /**
   * <pre>
   * update campaign to archive status event
   * </pre>
   *
   * <code>OMNICHANNEL_ARCHIVE_CAMPAIGN = 333;</code>
   */
  OMNICHANNEL_ARCHIVE_CAMPAIGN(333),
  /**
   * <pre>
   * update campaign to pause status event
   * </pre>
   *
   * <code>OMNICHANNEL_PAUSE_CAMPAIGN = 334;</code>
   */
  OMNICHANNEL_PAUSE_CAMPAIGN(334),
  /**
   * <pre>
   * update campaign to resume status event
   * </pre>
   *
   * <code>OMNICHANNEL_RESUME_CAMPAIGN = 335;</code>
   */
  OMNICHANNEL_RESUME_CAMPAIGN(335),
  /**
   * <pre>
   * update campaign to start status event
   * </pre>
   *
   * <code>OMNICHANNEL_START_CAMPAIGN = 336;</code>
   */
  OMNICHANNEL_START_CAMPAIGN(336),
  /**
   * <pre>
   * update module to schedule status event
   * </pre>
   *
   * <code>OMNICHANNEL_SCHEDULE_MODULE = 337;</code>
   */
  OMNICHANNEL_SCHEDULE_MODULE(337),
  /**
   * <pre>
   * update module to start status event
   * </pre>
   *
   * <code>OMNICHANNEL_START_MODULE = 338;</code>
   */
  OMNICHANNEL_START_MODULE(338),
  /**
   * <pre>
   * update module to pause status event
   * </pre>
   *
   * <code>OMNICHANNEL_PAUSE_MODULE = 339;</code>
   */
  OMNICHANNEL_PAUSE_MODULE(339),
  /**
   * <pre>
   * update module to resume status event
   * </pre>
   *
   * <code>OMNICHANNEL_RESUME_MODULE = 340;</code>
   */
  OMNICHANNEL_RESUME_MODULE(340),
  /**
   * <pre>
   * update module to error status event
   * </pre>
   *
   * <code>OMNICHANNEL_ERROR_MODULE = 341;</code>
   */
  OMNICHANNEL_ERROR_MODULE(341),
  /**
   * <pre>
   * update module to success status event
   * </pre>
   *
   * <code>OMNICHANNEL_SUCCESS_MODULE = 342;</code>
   */
  OMNICHANNEL_SUCCESS_MODULE(342),
  /**
   * <pre>
   * update module to fail status event
   * </pre>
   *
   * <code>OMNICHANNEL_FAIL_MODULE = 343;</code>
   */
  OMNICHANNEL_FAIL_MODULE(343),
  /**
   * <pre>
   * update module to complete status event
   * </pre>
   *
   * <code>OMNICHANNEL_COMPLETE_MODULE = 344;</code>
   */
  OMNICHANNEL_COMPLETE_MODULE(344),
  /**
   * <pre>
   * update module to archive status event
   * </pre>
   *
   * <code>OMNICHANNEL_ARCHIVE_MODULE = 345;</code>
   */
  OMNICHANNEL_ARCHIVE_MODULE(345),
  /**
   * <pre>
   * update module event with details
   * </pre>
   *
   * <code>OMNICHANNEL_UPDATE_MODULE = 346;</code>
   */
  OMNICHANNEL_UPDATE_MODULE(346),
  /**
   * <pre>
   * send sms module event with details
   * </pre>
   *
   * <code>OMNICHANNEL_MODULE_SMS_MESSAGE_SENT = 347 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_MODULE_SMS_MESSAGE_SENT(347),
  /**
   * <pre>
   * update campaign to archive status event
   * </pre>
   *
   * <code>OMNICHANNEL_COMPLETE_CAMPAIGN = 348;</code>
   */
  OMNICHANNEL_COMPLETE_CAMPAIGN(348),
  /**
   * <pre>
   * initial reply event for module
   * </pre>
   *
   * <code>OMNICHANNEL_MODULE_INITIAL_REPLY = 349 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_MODULE_INITIAL_REPLY(349),
  /**
   * <pre>
   * omnichannel task message sent
   * </pre>
   *
   * <code>OMNICHANNEL_TASK_MESSAGE_SENT = 350 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_TASK_MESSAGE_SENT(350),
  /**
   * <pre>
   * omnichannel connected inbox poll
   * </pre>
   *
   * <code>OMNICHANNEL_CONNECTED_INBOX_POLL = 351;</code>
   */
  OMNICHANNEL_CONNECTED_INBOX_POLL(351),
  /**
   * <pre>
   * omnichannel connected inbox was created
   * </pre>
   *
   * <code>OMNICHANNEL_CONNECTED_INBOX_CREATED = 352;</code>
   */
  OMNICHANNEL_CONNECTED_INBOX_CREATED(352),
  /**
   * <pre>
   * omnichannel agent message units were calculated
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_MESSAGE_UNITS = 353 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_AGENT_MESSAGE_UNITS(353),
  /**
   * <pre>
   * omnichannel manager message units were calculated
   * </pre>
   *
   * <code>OMNICHANNEL_MANAGER_MESSAGE_UNITS = 354 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_MANAGER_MESSAGE_UNITS(354),
  /**
   * <pre>
   * omnichannel customer message units were calculated
   * </pre>
   *
   * <code>OMNICHANNEL_CUSTOMER_MESSAGE_UNITS = 355 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_CUSTOMER_MESSAGE_UNITS(355),
  /**
   * <pre>
   * omnichannel system message units were calculated
   * </pre>
   *
   * <code>OMNICHANNEL_SYSTEM_MESSAGE_UNITS = 356 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  OMNICHANNEL_SYSTEM_MESSAGE_UNITS(356),
  /**
   * <pre>
   * omnichannel payment link was sent
   * </pre>
   *
   * <code>OMNICHANNEL_PAYMENT_LINK_SENT = 357;</code>
   */
  OMNICHANNEL_PAYMENT_LINK_SENT(357),
  /**
   * <pre>
   *accepted manual approve task
   * </pre>
   *
   * <code>OMNICHANNEL_MANUAL_APPROVE_TASK_ACCEPTED = 358;</code>
   */
  OMNICHANNEL_MANUAL_APPROVE_TASK_ACCEPTED(358),
  /**
   * <pre>
   *rejected manual approve task
   * </pre>
   *
   * <code>OMNICHANNEL_MANUAL_APPROVE_TASK_REJECTED = 359;</code>
   */
  OMNICHANNEL_MANUAL_APPROVE_TASK_REJECTED(359),
  /**
   * <pre>
   *timeout of manual approve task
   * </pre>
   *
   * <code>OMNICHANNEL_MANUAL_APPROVE_TASK_TIMEOUT = 360;</code>
   */
  OMNICHANNEL_MANUAL_APPROVE_TASK_TIMEOUT(360),
  /**
   * <pre>
   *requeue of manual approve task
   * </pre>
   *
   * <code>OMNICHANNEL_MANUAL_APPROVE_TASK_REQUEUE = 361;</code>
   */
  OMNICHANNEL_MANUAL_APPROVE_TASK_REQUEUE(361),
  /**
   * <pre>
   *transcript saved
   * </pre>
   *
   * <code>OMNICHANNEL_TRANSCRIPT_SAVED = 362;</code>
   */
  OMNICHANNEL_TRANSCRIPT_SAVED(362),
  /**
   * <pre>
   *omnichannel message
   * </pre>
   *
   * <code>OMNICHANNEL_MESSAGE_SENT = 363;</code>
   */
  OMNICHANNEL_MESSAGE_SENT(363),
  /**
   * <pre>
   *omnichannel provider response
   * </pre>
   *
   * <code>OMNICHANNEL_PROVIDER_RESPONSE = 364;</code>
   */
  OMNICHANNEL_PROVIDER_RESPONSE(364),
  /**
   * <pre>
   *omnichannel provider message failed
   * </pre>
   *
   * <code>OMNICHANNEL_PROVIDER_MESSAGE_FAILED = 365;</code>
   */
  OMNICHANNEL_PROVIDER_MESSAGE_FAILED(365),
  /**
   * <pre>
   * ASM
   * agent logs into asm
   * </pre>
   *
   * <code>ASM_AGENT_LOGIN = 400;</code>
   */
  ASM_AGENT_LOGIN(400),
  /**
   * <pre>
   * agent opens voice event
   * </pre>
   *
   * <code>ASM_OPEN_VOICE = 401;</code>
   */
  ASM_OPEN_VOICE(401),
  /**
   * <pre>
   * agent logs into omni agent event
   * </pre>
   *
   * <code>ASM_OPEN_OMNI_AGENT = 402;</code>
   */
  ASM_OPEN_OMNI_AGENT(402),
  /**
   * <pre>
   * agent activates a conversation event
   * </pre>
   *
   * <code>ASM_ACTIVATE_CONVERSATION = 403;</code>
   */
  ASM_ACTIVATE_CONVERSATION(403),
  /**
   * <pre>
   * agent deactivates a conversation event
   * </pre>
   *
   * <code>ASM_DEACTIVATE_CONVERSATION = 404;</code>
   */
  ASM_DEACTIVATE_CONVERSATION(404),
  /**
   * <pre>
   * agent's state changed event
   * </pre>
   *
   * <code>ASM_AGENT_STATE_CHANGED = 405;</code>
   */
  ASM_AGENT_STATE_CHANGED(405),
  /**
   * <pre>
   * agent logs out of asm
   * </pre>
   *
   * <code>ASM_AGENT_LOGOUT = 406;</code>
   */
  ASM_AGENT_LOGOUT(406),
  /**
   * <pre>
   * asm pause event
   * </pre>
   *
   * <code>ASM_PAUSE_EVENT = 407;</code>
   */
  ASM_PAUSE_EVENT(407),
  /**
   * <pre>
   * asm resume event
   * </pre>
   *
   * <code>ASM_RESUME_EVENT = 408;</code>
   */
  ASM_RESUME_EVENT(408),
  /**
   * <pre>
   * asm conversation pulled event
   * </pre>
   *
   * <code>ASM_CONVERSATION_PULLED_EVENT = 409;</code>
   */
  ASM_CONVERSATION_PULLED_EVENT(409),
  /**
   * <pre>
   * Scorecards
   * create question event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_QUESTION_EVENT = 500;</code>
   */
  SCORECARDS_CREATE_QUESTION_EVENT(500),
  /**
   * <pre>
   * update question event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_QUESTION_EVENT = 501;</code>
   */
  SCORECARDS_UPDATE_QUESTION_EVENT(501),
  /**
   * <pre>
   * delete question event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_QUESTION_EVENT = 502;</code>
   */
  SCORECARDS_DELETE_QUESTION_EVENT(502),
  /**
   * <pre>
   * create scorecard event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_SCORECARD_EVENT = 503;</code>
   */
  SCORECARDS_CREATE_SCORECARD_EVENT(503),
  /**
   * <pre>
   * update scorecard event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_SCORECARD_EVENT = 504;</code>
   */
  SCORECARDS_UPDATE_SCORECARD_EVENT(504),
  /**
   * <pre>
   * delete scorecard event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_SCORECARD_EVENT = 505;</code>
   */
  SCORECARDS_DELETE_SCORECARD_EVENT(505),
  /**
   * <pre>
   * clone scorecard event
   * </pre>
   *
   * <code>SCORECARDS_CLONE_SCORECARD_EVENT = 506;</code>
   */
  SCORECARDS_CLONE_SCORECARD_EVENT(506),
  /**
   * <pre>
   * create evaluation event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_EVALUATION_EVENT = 507;</code>
   */
  SCORECARDS_CREATE_EVALUATION_EVENT(507),
  /**
   * <pre>
   * delete evaluation event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_EVALUATION_EVENT = 508;</code>
   */
  SCORECARDS_DELETE_EVALUATION_EVENT(508),
  /**
   * <pre>
   * create section event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_SECTION_EVENT = 509;</code>
   */
  SCORECARDS_CREATE_SECTION_EVENT(509),
  /**
   * <pre>
   * update section event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_SECTION_EVENT = 510;</code>
   */
  SCORECARDS_UPDATE_SECTION_EVENT(510),
  /**
   * <pre>
   * delete section event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_SECTION_EVENT = 511;</code>
   */
  SCORECARDS_DELETE_SECTION_EVENT(511),
  /**
   * <pre>
   * create category event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_CATEGORY_EVENT = 512;</code>
   */
  SCORECARDS_CREATE_CATEGORY_EVENT(512),
  /**
   * <pre>
   * update category event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_CATEGORY_EVENT = 513;</code>
   */
  SCORECARDS_UPDATE_CATEGORY_EVENT(513),
  /**
   * <pre>
   * delete category event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_CATEGORY_EVENT = 514;</code>
   */
  SCORECARDS_DELETE_CATEGORY_EVENT(514),
  /**
   * <pre>
   * create evaluation question event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_EVALUATION_QUESTION_EVENT = 515;</code>
   */
  SCORECARDS_CREATE_EVALUATION_QUESTION_EVENT(515),
  /**
   * <pre>
   * update evaluation question event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_EVALUATION_QUESTION_EVENT = 516;</code>
   */
  SCORECARDS_UPDATE_EVALUATION_QUESTION_EVENT(516),
  /**
   * <pre>
   * delete evaluation question event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_EVALUATION_QUESTION_EVENT = 517;</code>
   */
  SCORECARDS_DELETE_EVALUATION_QUESTION_EVENT(517),
  /**
   * <pre>
   * create scorecard question event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_SCORECARD_QUESTION_EVENT = 518;</code>
   */
  SCORECARDS_CREATE_SCORECARD_QUESTION_EVENT(518),
  /**
   * <pre>
   * update scorecard question event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_SCORECARD_QUESTION_EVENT = 519;</code>
   */
  SCORECARDS_UPDATE_SCORECARD_QUESTION_EVENT(519),
  /**
   * <pre>
   * delete scorecard question event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_SCORECARD_QUESTION_EVENT = 520;</code>
   */
  SCORECARDS_DELETE_SCORECARD_QUESTION_EVENT(520),
  /**
   * <pre>
   * create auto evaluation event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_AUTO_EVALUATION_EVENT = 521;</code>
   */
  SCORECARDS_CREATE_AUTO_EVALUATION_EVENT(521),
  /**
   * <pre>
   * update evaluation event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_EVALUATION_EVENT = 522;</code>
   */
  SCORECARDS_UPDATE_EVALUATION_EVENT(522),
  /**
   * <pre>
   * create smart evaluation event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_SMART_EVALUATION_EVENT = 523;</code>
   */
  SCORECARDS_CREATE_SMART_EVALUATION_EVENT(523),
  /**
   * <pre>
   *Tickets Events
   * create event
   * </pre>
   *
   * <code>TICKET_CREATE_EVENT = 600;</code>
   */
  TICKET_CREATE_EVENT(600),
  /**
   * <pre>
   * edit event
   * </pre>
   *
   * <code>TICKET_EDIT_EVENT = 601;</code>
   */
  TICKET_EDIT_EVENT(601),
  /**
   * <pre>
   * close event
   * </pre>
   *
   * <code>TICKET_CLOSE_EVENT = 602;</code>
   */
  TICKET_CLOSE_EVENT(602),
  /**
   * <code>TICKET_ACTION_CREATE_EVENT = 603;</code>
   */
  TICKET_ACTION_CREATE_EVENT(603),
  /**
   * <code>TICKET_ACTION_EDIT_EVENT = 604;</code>
   */
  TICKET_ACTION_EDIT_EVENT(604),
  /**
   * <code>TICKET_ACTION_STATE_CHANGE_EVENT = 605;</code>
   */
  TICKET_ACTION_STATE_CHANGE_EVENT(605),
  /**
   * <code>TICKET_PARTICIPANT_EVENT = 606;</code>
   */
  TICKET_PARTICIPANT_EVENT(606),
  /**
   * <pre>
   * ticket-create comment event
   * </pre>
   *
   * <code>TICKET_CREATE_COMMENT_EVENT = 607;</code>
   */
  TICKET_CREATE_COMMENT_EVENT(607),
  /**
   * <pre>
   * ticket-reply comment event
   * </pre>
   *
   * <code>TICKET_REPLY_COMMENT_EVENT = 608;</code>
   */
  TICKET_REPLY_COMMENT_EVENT(608),
  /**
   * <pre>
   * ticket-create-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_CREATE_EVENT = 609;</code>
   */
  TICKET_TEMPLATE_CREATE_EVENT(609),
  /**
   * <pre>
   * ticket-edit-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_EDIT_EVENT = 610;</code>
   */
  TICKET_TEMPLATE_EDIT_EVENT(610),
  /**
   * <pre>
   * ticket-close-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_CLOSE_EVENT = 611;</code>
   */
  TICKET_TEMPLATE_CLOSE_EVENT(611),
  /**
   * <pre>
   * ticket-assign-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_ASSIGN_EVENT = 612;</code>
   */
  TICKET_TEMPLATE_ASSIGN_EVENT(612),
  /**
   * <pre>
   * ticket-state-change-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_STATE_CHANGE_EVENT = 613;</code>
   */
  TICKET_TEMPLATE_STATE_CHANGE_EVENT(613),
  /**
   * <pre>
   * ticket-project-state event
   * </pre>
   *
   * <code>TICKET_PROJECT_STATE_CHANGE_EVENT = 614;</code>
   */
  TICKET_PROJECT_STATE_CHANGE_EVENT(614),
  /**
   * <pre>
   * ticket-add-contact-event
   * </pre>
   *
   * <code>TICKET_CONTACT_ADD_EVENT = 615;</code>
   */
  TICKET_CONTACT_ADD_EVENT(615),
  /**
   * <pre>
   * Compliance Events
   * rnd query event
   * </pre>
   *
   * <code>COMPLIANCE_RND_QUERY_EVENT = 700;</code>
   */
  COMPLIANCE_RND_QUERY_EVENT(700),
  /**
   * <pre>
   * rnd query cached event
   * </pre>
   *
   * <code>COMPLIANCE_RND_QUERY_CACHED_EVENT = 701;</code>
   */
  COMPLIANCE_RND_QUERY_CACHED_EVENT(701),
  /**
   * <pre>
   * Agent Training
   * create learning opportunity event
   * </pre>
   *
   * <code>AGENT_TRAINING_CREATE_LEARNING_OPPORTUNITY_EVENT = 800;</code>
   */
  AGENT_TRAINING_CREATE_LEARNING_OPPORTUNITY_EVENT(800),
  /**
   * <pre>
   * LMS Events
   * </pre>
   *
   * <code>LMS_PIPELINE_FAILURE_EVENT = 900;</code>
   */
  LMS_PIPELINE_FAILURE_EVENT(900),
  /**
   * <code>LMS_PIPELINE_NO_OUTPUT_EVENT = 901;</code>
   */
  LMS_PIPELINE_NO_OUTPUT_EVENT(901),
  /**
   * <code>LMS_PIPELINE_SUCCESSFUL_EVENT = 902;</code>
   */
  LMS_PIPELINE_SUCCESSFUL_EVENT(902),
  /**
   * <pre>
   * Billing Events
   * </pre>
   *
   * <code>EVENT_TYPE_BILLING_COMMIT_BILLING_PLAN = 1000 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_COMMIT_BILLING_PLAN(1000),
  /**
   * <code>EVENT_TYPE_BILLING_CREATE_BILLING_PLAN = 1001 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_CREATE_BILLING_PLAN(1001),
  /**
   * <code>EVENT_TYPE_BILLING_CREATE_INVOICE = 1002 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_CREATE_INVOICE(1002),
  /**
   * <code>EVENT_TYPE_BILLING_CREATE_RATE_DEFINITION = 1003 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_CREATE_RATE_DEFINITION(1003),
  /**
   * <code>EVENT_TYPE_BILLING_DELETE_BILLING_PLAN = 1004 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_DELETE_BILLING_PLAN(1004),
  /**
   * <code>EVENT_TYPE_BILLING_DELETE_INVOICE = 1005 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_DELETE_INVOICE(1005),
  /**
   * <code>EVENT_TYPE_BILLING_DELETE_RATE_DEFINITION = 1006 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_DELETE_RATE_DEFINITION(1006),
  /**
   * <code>EVENT_TYPE_BILLING_EXPORT_INVOICE = 1007 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_EXPORT_INVOICE(1007),
  /**
   * <code>EVENT_TYPE_BILLING_UPDATE_BILLING_PLAN = 1008 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_UPDATE_BILLING_PLAN(1008),
  /**
   * <code>EVENT_TYPE_BILLING_UPDATE_INVOICE = 1009 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_UPDATE_INVOICE(1009),
  /**
   * <code>EVENT_TYPE_BILLING_UPDATE_RATE_DEFINITION = 1010 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_UPDATE_RATE_DEFINITION(1010),
  /**
   * <code>EVENT_TYPE_BILLING_RATED_ITEMS_GENERATED = 1011 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_BILLING_RATED_ITEMS_GENERATED(1011),
  /**
   * <code>EVENT_TYPE_BILLING_ACCUMULATE_ITEMS = 1012;</code>
   */
  EVENT_TYPE_BILLING_ACCUMULATE_ITEMS(1012),
  /**
   * <pre>
   * Delivery Events
   * </pre>
   *
   * <code>EVENT_TYPE_DELIVERY_FAILURE = 1100;</code>
   */
  EVENT_TYPE_DELIVERY_FAILURE(1100),
  /**
   * <code>EVENT_TYPE_DELIVERY_SUCCESS = 1101;</code>
   */
  EVENT_TYPE_DELIVERY_SUCCESS(1101),
  /**
   * <pre>
   *ContactManager Events
   *CreateContactEntry(upload) and AddContactEntry
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_ADD_EVENT = 1200;</code>
   */
  EVENT_TYPE_CONTACT_MANAGER_ADD_EVENT(1200),
  /**
   * <pre>
   * view event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_ENTRY_VIEW_EVENT = 1201;</code>
   */
  EVENT_TYPE_CONTACT_MANAGER_ENTRY_VIEW_EVENT(1201),
  /**
   * <pre>
   * kyc event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_KYC_ENC_VIEW_EVENT = 1202 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_CONTACT_MANAGER_KYC_ENC_VIEW_EVENT(1202),
  /**
   * <pre>
   * ttl event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_TTL_EVENT = 1203 [deprecated = true];</code>
   */
  @java.lang.Deprecated
  EVENT_TYPE_CONTACT_MANAGER_TTL_EVENT(1203),
  /**
   * <pre>
   * edit event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_EDIT_EVENT = 1204;</code>
   */
  EVENT_TYPE_CONTACT_MANAGER_EDIT_EVENT(1204),
  /**
   * <pre>
   * upload event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_UPLOAD_EVENT = 1205;</code>
   */
  EVENT_TYPE_CONTACT_MANAGER_UPLOAD_EVENT(1205),
  /**
   * <pre>
   * KYC verification event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_VERIFICATION_EVENT = 1206;</code>
   */
  EVENT_TYPE_CONTACT_MANAGER_VERIFICATION_EVENT(1206),
  /**
   * <pre>
   *Contact Manager entry delete event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_DELETE_EVENT = 1207;</code>
   */
  EVENT_TYPE_CONTACT_MANAGER_DELETE_EVENT(1207),
  /**
   * <pre>
   *Contact Manager entry expunge event at TTL
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_EXPUNGE_EVENT = 1208;</code>
   */
  EVENT_TYPE_CONTACT_MANAGER_EXPUNGE_EVENT(1208),
  /**
   * <pre>
   *Contact Entity association event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_ENTITY_ASSOCIATED_EVENT = 1209;</code>
   */
  EVENT_TYPE_CONTACT_MANAGER_ENTITY_ASSOCIATED_EVENT(1209),
  /**
   * <pre>
   * Organization Events
   * Organization event when any users access tokens are expiring.
   * </pre>
   *
   * <code>EVENT_TYPE_ORGANIZATION_ACCESS_TOKENS_EXPIRING_EVENT = 1300;</code>
   */
  EVENT_TYPE_ORGANIZATION_ACCESS_TOKENS_EXPIRING_EVENT(1300),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Dummy Application IDs
   * </pre>
   *
   * <code>DUMMY_APPLICATION = 0;</code>
   */
  public static final int DUMMY_APPLICATION_VALUE = 0;
  /**
   * <code>DUMMY_APPLICATION_STORAGE = 1;</code>
   */
  public static final int DUMMY_APPLICATION_STORAGE_VALUE = 1;
  /**
   * <code>DUMMY_APPLICATION_COMPUTE = 2;</code>
   */
  public static final int DUMMY_APPLICATION_COMPUTE_VALUE = 2;
  /**
   * <pre>
   * Voice Analytics Application IDs
   * </pre>
   *
   * <code>VOICE_ANALYTICS = 100;</code>
   */
  public static final int VOICE_ANALYTICS_VALUE = 100;
  /**
   * <code>VOICE_ANALYTICS_FLAG_OCCURRENCE = 101;</code>
   */
  public static final int VOICE_ANALYTICS_FLAG_OCCURRENCE_VALUE = 101;
  /**
   * <code>VOICE_ANALYTICS_FLAG_NEEDS_REVIEW = 102;</code>
   */
  public static final int VOICE_ANALYTICS_FLAG_NEEDS_REVIEW_VALUE = 102;
  /**
   * <code>VOICE_ANALYTICS_BILLING_REPORT = 103;</code>
   */
  public static final int VOICE_ANALYTICS_BILLING_REPORT_VALUE = 103;
  /**
   * <code>VOICE_ANALYTICS_FLAG_SUMMARY = 104;</code>
   */
  public static final int VOICE_ANALYTICS_FLAG_SUMMARY_VALUE = 104;
  /**
   * <code>VOICE_ANALYTICS_PHRASE_CORRECTION = 105;</code>
   */
  public static final int VOICE_ANALYTICS_PHRASE_CORRECTION_VALUE = 105;
  /**
   * <code>VOICE_ANALYTICS_CREATE_TRANSCRIPT = 106;</code>
   */
  public static final int VOICE_ANALYTICS_CREATE_TRANSCRIPT_VALUE = 106;
  /**
   * <code>VOICE_ANALYTICS_CREATE_SENTIMENT = 107;</code>
   */
  public static final int VOICE_ANALYTICS_CREATE_SENTIMENT_VALUE = 107;
  /**
   * <code>VOICE_ANALYTICS_CREATE_SUMMARY = 108;</code>
   */
  public static final int VOICE_ANALYTICS_CREATE_SUMMARY_VALUE = 108;
  /**
   * <pre>
   * Omnichannel Dashboard Application IDs
   * </pre>
   *
   * <code>OMNICHANNEL = 300;</code>
   */
  public static final int OMNICHANNEL_VALUE = 300;
  /**
   * <code>OMNICHANNEL_PROJECT = 301;</code>
   */
  public static final int OMNICHANNEL_PROJECT_VALUE = 301;
  /**
   * <code>OMNICHANNEL_CAMPAIGN = 302;</code>
   */
  public static final int OMNICHANNEL_CAMPAIGN_VALUE = 302;
  /**
   * <code>OMNICHANNEL_DAILY_PROJECT_REPORT = 303;</code>
   */
  public static final int OMNICHANNEL_DAILY_PROJECT_REPORT_VALUE = 303;
  /**
   * <code>OMNICHANNEL_DAILY_CONVERSATION_REPORT = 304;</code>
   */
  public static final int OMNICHANNEL_DAILY_CONVERSATION_REPORT_VALUE = 304;
  /**
   * <pre>
   * agent assign conversation eventType
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_ASSIGN_CONVERSATION = 305;</code>
   */
  public static final int OMNICHANNEL_AGENT_ASSIGN_CONVERSATION_VALUE = 305;
  /**
   * <pre>
   * agent unassign conversation eventType
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_UNASSIGN_CONVERSATION = 306;</code>
   */
  public static final int OMNICHANNEL_AGENT_UNASSIGN_CONVERSATION_VALUE = 306;
  /**
   * <pre>
   * agent reassign conversation eventType
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_REASSIGN_CONVERSATION = 307;</code>
   */
  public static final int OMNICHANNEL_AGENT_REASSIGN_CONVERSATION_VALUE = 307;
  /**
   * <pre>
   * T10 trigger  eventType
   * </pre>
   *
   * <code>OMNICHANNEL_T10 = 308;</code>
   */
  public static final int OMNICHANNEL_T10_VALUE = 308;
  /**
   * <pre>
   * customer sent a text message event
   * </pre>
   *
   * <code>OMNICHANNEL_CUSTOMER_TEXT_MESSAGE = 309 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_CUSTOMER_TEXT_MESSAGE_VALUE = 309;
  /**
   * <pre>
   * agent sent a text message event
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_TEXT_MESSAGE = 310 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_AGENT_TEXT_MESSAGE_VALUE = 310;
  /**
   * <pre>
   * finish wrap up event
   * </pre>
   *
   * <code>OMNICHANNEL_FINISH_WRAP_UP = 311;</code>
   */
  public static final int OMNICHANNEL_FINISH_WRAP_UP_VALUE = 311;
  /**
   * <pre>
   * conversation closes and wrap up begins event
   * </pre>
   *
   * <code>OMNICHANNEL_BEGIN_WRAP_UP = 312;</code>
   */
  public static final int OMNICHANNEL_BEGIN_WRAP_UP_VALUE = 312;
  /**
   * <pre>
   * t11 timer went off event
   * </pre>
   *
   * <code>OMNICHANNEL_T11 = 313;</code>
   */
  public static final int OMNICHANNEL_T11_VALUE = 313;
  /**
   * <pre>
   * create conversation when customer sends initial message and T1 starts
   * </pre>
   *
   * <code>OMNICHANNEL_CREATE_CONVERSATION = 314;</code>
   */
  public static final int OMNICHANNEL_CREATE_CONVERSATION_VALUE = 314;
  /**
   * <pre>
   * agent suspends the conversation event
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_SUSPEND = 315;</code>
   */
  public static final int OMNICHANNEL_AGENT_SUSPEND_VALUE = 315;
  /**
   * <pre>
   * conversation is closed
   * </pre>
   *
   * <code>OMNICHANNEL_CLOSE_CONVERSATION = 316;</code>
   */
  public static final int OMNICHANNEL_CLOSE_CONVERSATION_VALUE = 316;
  /**
   * <pre>
   * manager sent a text message event
   * </pre>
   *
   * <code>OMNICHANNEL_MANAGER_TEXT_MESSAGE = 332 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_MANAGER_TEXT_MESSAGE_VALUE = 332;
  /**
   * <pre>
   * update event with campaign details
   * </pre>
   *
   * <code>OMNICHANNEL_UPDATE_CAMPAIGN = 330;</code>
   */
  public static final int OMNICHANNEL_UPDATE_CAMPAIGN_VALUE = 330;
  /**
   * <pre>
   * update event with set conversation collected data details
   * </pre>
   *
   * <code>OMNICHANNEL_SET_CONVERSATION_COLLECTED_DATA = 331;</code>
   */
  public static final int OMNICHANNEL_SET_CONVERSATION_COLLECTED_DATA_VALUE = 331;
  /**
   * <pre>
   * update campaign to archive status event
   * </pre>
   *
   * <code>OMNICHANNEL_ARCHIVE_CAMPAIGN = 333;</code>
   */
  public static final int OMNICHANNEL_ARCHIVE_CAMPAIGN_VALUE = 333;
  /**
   * <pre>
   * update campaign to pause status event
   * </pre>
   *
   * <code>OMNICHANNEL_PAUSE_CAMPAIGN = 334;</code>
   */
  public static final int OMNICHANNEL_PAUSE_CAMPAIGN_VALUE = 334;
  /**
   * <pre>
   * update campaign to resume status event
   * </pre>
   *
   * <code>OMNICHANNEL_RESUME_CAMPAIGN = 335;</code>
   */
  public static final int OMNICHANNEL_RESUME_CAMPAIGN_VALUE = 335;
  /**
   * <pre>
   * update campaign to start status event
   * </pre>
   *
   * <code>OMNICHANNEL_START_CAMPAIGN = 336;</code>
   */
  public static final int OMNICHANNEL_START_CAMPAIGN_VALUE = 336;
  /**
   * <pre>
   * update module to schedule status event
   * </pre>
   *
   * <code>OMNICHANNEL_SCHEDULE_MODULE = 337;</code>
   */
  public static final int OMNICHANNEL_SCHEDULE_MODULE_VALUE = 337;
  /**
   * <pre>
   * update module to start status event
   * </pre>
   *
   * <code>OMNICHANNEL_START_MODULE = 338;</code>
   */
  public static final int OMNICHANNEL_START_MODULE_VALUE = 338;
  /**
   * <pre>
   * update module to pause status event
   * </pre>
   *
   * <code>OMNICHANNEL_PAUSE_MODULE = 339;</code>
   */
  public static final int OMNICHANNEL_PAUSE_MODULE_VALUE = 339;
  /**
   * <pre>
   * update module to resume status event
   * </pre>
   *
   * <code>OMNICHANNEL_RESUME_MODULE = 340;</code>
   */
  public static final int OMNICHANNEL_RESUME_MODULE_VALUE = 340;
  /**
   * <pre>
   * update module to error status event
   * </pre>
   *
   * <code>OMNICHANNEL_ERROR_MODULE = 341;</code>
   */
  public static final int OMNICHANNEL_ERROR_MODULE_VALUE = 341;
  /**
   * <pre>
   * update module to success status event
   * </pre>
   *
   * <code>OMNICHANNEL_SUCCESS_MODULE = 342;</code>
   */
  public static final int OMNICHANNEL_SUCCESS_MODULE_VALUE = 342;
  /**
   * <pre>
   * update module to fail status event
   * </pre>
   *
   * <code>OMNICHANNEL_FAIL_MODULE = 343;</code>
   */
  public static final int OMNICHANNEL_FAIL_MODULE_VALUE = 343;
  /**
   * <pre>
   * update module to complete status event
   * </pre>
   *
   * <code>OMNICHANNEL_COMPLETE_MODULE = 344;</code>
   */
  public static final int OMNICHANNEL_COMPLETE_MODULE_VALUE = 344;
  /**
   * <pre>
   * update module to archive status event
   * </pre>
   *
   * <code>OMNICHANNEL_ARCHIVE_MODULE = 345;</code>
   */
  public static final int OMNICHANNEL_ARCHIVE_MODULE_VALUE = 345;
  /**
   * <pre>
   * update module event with details
   * </pre>
   *
   * <code>OMNICHANNEL_UPDATE_MODULE = 346;</code>
   */
  public static final int OMNICHANNEL_UPDATE_MODULE_VALUE = 346;
  /**
   * <pre>
   * send sms module event with details
   * </pre>
   *
   * <code>OMNICHANNEL_MODULE_SMS_MESSAGE_SENT = 347 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_MODULE_SMS_MESSAGE_SENT_VALUE = 347;
  /**
   * <pre>
   * update campaign to archive status event
   * </pre>
   *
   * <code>OMNICHANNEL_COMPLETE_CAMPAIGN = 348;</code>
   */
  public static final int OMNICHANNEL_COMPLETE_CAMPAIGN_VALUE = 348;
  /**
   * <pre>
   * initial reply event for module
   * </pre>
   *
   * <code>OMNICHANNEL_MODULE_INITIAL_REPLY = 349 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_MODULE_INITIAL_REPLY_VALUE = 349;
  /**
   * <pre>
   * omnichannel task message sent
   * </pre>
   *
   * <code>OMNICHANNEL_TASK_MESSAGE_SENT = 350 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_TASK_MESSAGE_SENT_VALUE = 350;
  /**
   * <pre>
   * omnichannel connected inbox poll
   * </pre>
   *
   * <code>OMNICHANNEL_CONNECTED_INBOX_POLL = 351;</code>
   */
  public static final int OMNICHANNEL_CONNECTED_INBOX_POLL_VALUE = 351;
  /**
   * <pre>
   * omnichannel connected inbox was created
   * </pre>
   *
   * <code>OMNICHANNEL_CONNECTED_INBOX_CREATED = 352;</code>
   */
  public static final int OMNICHANNEL_CONNECTED_INBOX_CREATED_VALUE = 352;
  /**
   * <pre>
   * omnichannel agent message units were calculated
   * </pre>
   *
   * <code>OMNICHANNEL_AGENT_MESSAGE_UNITS = 353 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_AGENT_MESSAGE_UNITS_VALUE = 353;
  /**
   * <pre>
   * omnichannel manager message units were calculated
   * </pre>
   *
   * <code>OMNICHANNEL_MANAGER_MESSAGE_UNITS = 354 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_MANAGER_MESSAGE_UNITS_VALUE = 354;
  /**
   * <pre>
   * omnichannel customer message units were calculated
   * </pre>
   *
   * <code>OMNICHANNEL_CUSTOMER_MESSAGE_UNITS = 355 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_CUSTOMER_MESSAGE_UNITS_VALUE = 355;
  /**
   * <pre>
   * omnichannel system message units were calculated
   * </pre>
   *
   * <code>OMNICHANNEL_SYSTEM_MESSAGE_UNITS = 356 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int OMNICHANNEL_SYSTEM_MESSAGE_UNITS_VALUE = 356;
  /**
   * <pre>
   * omnichannel payment link was sent
   * </pre>
   *
   * <code>OMNICHANNEL_PAYMENT_LINK_SENT = 357;</code>
   */
  public static final int OMNICHANNEL_PAYMENT_LINK_SENT_VALUE = 357;
  /**
   * <pre>
   *accepted manual approve task
   * </pre>
   *
   * <code>OMNICHANNEL_MANUAL_APPROVE_TASK_ACCEPTED = 358;</code>
   */
  public static final int OMNICHANNEL_MANUAL_APPROVE_TASK_ACCEPTED_VALUE = 358;
  /**
   * <pre>
   *rejected manual approve task
   * </pre>
   *
   * <code>OMNICHANNEL_MANUAL_APPROVE_TASK_REJECTED = 359;</code>
   */
  public static final int OMNICHANNEL_MANUAL_APPROVE_TASK_REJECTED_VALUE = 359;
  /**
   * <pre>
   *timeout of manual approve task
   * </pre>
   *
   * <code>OMNICHANNEL_MANUAL_APPROVE_TASK_TIMEOUT = 360;</code>
   */
  public static final int OMNICHANNEL_MANUAL_APPROVE_TASK_TIMEOUT_VALUE = 360;
  /**
   * <pre>
   *requeue of manual approve task
   * </pre>
   *
   * <code>OMNICHANNEL_MANUAL_APPROVE_TASK_REQUEUE = 361;</code>
   */
  public static final int OMNICHANNEL_MANUAL_APPROVE_TASK_REQUEUE_VALUE = 361;
  /**
   * <pre>
   *transcript saved
   * </pre>
   *
   * <code>OMNICHANNEL_TRANSCRIPT_SAVED = 362;</code>
   */
  public static final int OMNICHANNEL_TRANSCRIPT_SAVED_VALUE = 362;
  /**
   * <pre>
   *omnichannel message
   * </pre>
   *
   * <code>OMNICHANNEL_MESSAGE_SENT = 363;</code>
   */
  public static final int OMNICHANNEL_MESSAGE_SENT_VALUE = 363;
  /**
   * <pre>
   *omnichannel provider response
   * </pre>
   *
   * <code>OMNICHANNEL_PROVIDER_RESPONSE = 364;</code>
   */
  public static final int OMNICHANNEL_PROVIDER_RESPONSE_VALUE = 364;
  /**
   * <pre>
   *omnichannel provider message failed
   * </pre>
   *
   * <code>OMNICHANNEL_PROVIDER_MESSAGE_FAILED = 365;</code>
   */
  public static final int OMNICHANNEL_PROVIDER_MESSAGE_FAILED_VALUE = 365;
  /**
   * <pre>
   * ASM
   * agent logs into asm
   * </pre>
   *
   * <code>ASM_AGENT_LOGIN = 400;</code>
   */
  public static final int ASM_AGENT_LOGIN_VALUE = 400;
  /**
   * <pre>
   * agent opens voice event
   * </pre>
   *
   * <code>ASM_OPEN_VOICE = 401;</code>
   */
  public static final int ASM_OPEN_VOICE_VALUE = 401;
  /**
   * <pre>
   * agent logs into omni agent event
   * </pre>
   *
   * <code>ASM_OPEN_OMNI_AGENT = 402;</code>
   */
  public static final int ASM_OPEN_OMNI_AGENT_VALUE = 402;
  /**
   * <pre>
   * agent activates a conversation event
   * </pre>
   *
   * <code>ASM_ACTIVATE_CONVERSATION = 403;</code>
   */
  public static final int ASM_ACTIVATE_CONVERSATION_VALUE = 403;
  /**
   * <pre>
   * agent deactivates a conversation event
   * </pre>
   *
   * <code>ASM_DEACTIVATE_CONVERSATION = 404;</code>
   */
  public static final int ASM_DEACTIVATE_CONVERSATION_VALUE = 404;
  /**
   * <pre>
   * agent's state changed event
   * </pre>
   *
   * <code>ASM_AGENT_STATE_CHANGED = 405;</code>
   */
  public static final int ASM_AGENT_STATE_CHANGED_VALUE = 405;
  /**
   * <pre>
   * agent logs out of asm
   * </pre>
   *
   * <code>ASM_AGENT_LOGOUT = 406;</code>
   */
  public static final int ASM_AGENT_LOGOUT_VALUE = 406;
  /**
   * <pre>
   * asm pause event
   * </pre>
   *
   * <code>ASM_PAUSE_EVENT = 407;</code>
   */
  public static final int ASM_PAUSE_EVENT_VALUE = 407;
  /**
   * <pre>
   * asm resume event
   * </pre>
   *
   * <code>ASM_RESUME_EVENT = 408;</code>
   */
  public static final int ASM_RESUME_EVENT_VALUE = 408;
  /**
   * <pre>
   * asm conversation pulled event
   * </pre>
   *
   * <code>ASM_CONVERSATION_PULLED_EVENT = 409;</code>
   */
  public static final int ASM_CONVERSATION_PULLED_EVENT_VALUE = 409;
  /**
   * <pre>
   * Scorecards
   * create question event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_QUESTION_EVENT = 500;</code>
   */
  public static final int SCORECARDS_CREATE_QUESTION_EVENT_VALUE = 500;
  /**
   * <pre>
   * update question event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_QUESTION_EVENT = 501;</code>
   */
  public static final int SCORECARDS_UPDATE_QUESTION_EVENT_VALUE = 501;
  /**
   * <pre>
   * delete question event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_QUESTION_EVENT = 502;</code>
   */
  public static final int SCORECARDS_DELETE_QUESTION_EVENT_VALUE = 502;
  /**
   * <pre>
   * create scorecard event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_SCORECARD_EVENT = 503;</code>
   */
  public static final int SCORECARDS_CREATE_SCORECARD_EVENT_VALUE = 503;
  /**
   * <pre>
   * update scorecard event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_SCORECARD_EVENT = 504;</code>
   */
  public static final int SCORECARDS_UPDATE_SCORECARD_EVENT_VALUE = 504;
  /**
   * <pre>
   * delete scorecard event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_SCORECARD_EVENT = 505;</code>
   */
  public static final int SCORECARDS_DELETE_SCORECARD_EVENT_VALUE = 505;
  /**
   * <pre>
   * clone scorecard event
   * </pre>
   *
   * <code>SCORECARDS_CLONE_SCORECARD_EVENT = 506;</code>
   */
  public static final int SCORECARDS_CLONE_SCORECARD_EVENT_VALUE = 506;
  /**
   * <pre>
   * create evaluation event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_EVALUATION_EVENT = 507;</code>
   */
  public static final int SCORECARDS_CREATE_EVALUATION_EVENT_VALUE = 507;
  /**
   * <pre>
   * delete evaluation event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_EVALUATION_EVENT = 508;</code>
   */
  public static final int SCORECARDS_DELETE_EVALUATION_EVENT_VALUE = 508;
  /**
   * <pre>
   * create section event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_SECTION_EVENT = 509;</code>
   */
  public static final int SCORECARDS_CREATE_SECTION_EVENT_VALUE = 509;
  /**
   * <pre>
   * update section event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_SECTION_EVENT = 510;</code>
   */
  public static final int SCORECARDS_UPDATE_SECTION_EVENT_VALUE = 510;
  /**
   * <pre>
   * delete section event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_SECTION_EVENT = 511;</code>
   */
  public static final int SCORECARDS_DELETE_SECTION_EVENT_VALUE = 511;
  /**
   * <pre>
   * create category event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_CATEGORY_EVENT = 512;</code>
   */
  public static final int SCORECARDS_CREATE_CATEGORY_EVENT_VALUE = 512;
  /**
   * <pre>
   * update category event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_CATEGORY_EVENT = 513;</code>
   */
  public static final int SCORECARDS_UPDATE_CATEGORY_EVENT_VALUE = 513;
  /**
   * <pre>
   * delete category event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_CATEGORY_EVENT = 514;</code>
   */
  public static final int SCORECARDS_DELETE_CATEGORY_EVENT_VALUE = 514;
  /**
   * <pre>
   * create evaluation question event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_EVALUATION_QUESTION_EVENT = 515;</code>
   */
  public static final int SCORECARDS_CREATE_EVALUATION_QUESTION_EVENT_VALUE = 515;
  /**
   * <pre>
   * update evaluation question event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_EVALUATION_QUESTION_EVENT = 516;</code>
   */
  public static final int SCORECARDS_UPDATE_EVALUATION_QUESTION_EVENT_VALUE = 516;
  /**
   * <pre>
   * delete evaluation question event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_EVALUATION_QUESTION_EVENT = 517;</code>
   */
  public static final int SCORECARDS_DELETE_EVALUATION_QUESTION_EVENT_VALUE = 517;
  /**
   * <pre>
   * create scorecard question event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_SCORECARD_QUESTION_EVENT = 518;</code>
   */
  public static final int SCORECARDS_CREATE_SCORECARD_QUESTION_EVENT_VALUE = 518;
  /**
   * <pre>
   * update scorecard question event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_SCORECARD_QUESTION_EVENT = 519;</code>
   */
  public static final int SCORECARDS_UPDATE_SCORECARD_QUESTION_EVENT_VALUE = 519;
  /**
   * <pre>
   * delete scorecard question event
   * </pre>
   *
   * <code>SCORECARDS_DELETE_SCORECARD_QUESTION_EVENT = 520;</code>
   */
  public static final int SCORECARDS_DELETE_SCORECARD_QUESTION_EVENT_VALUE = 520;
  /**
   * <pre>
   * create auto evaluation event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_AUTO_EVALUATION_EVENT = 521;</code>
   */
  public static final int SCORECARDS_CREATE_AUTO_EVALUATION_EVENT_VALUE = 521;
  /**
   * <pre>
   * update evaluation event
   * </pre>
   *
   * <code>SCORECARDS_UPDATE_EVALUATION_EVENT = 522;</code>
   */
  public static final int SCORECARDS_UPDATE_EVALUATION_EVENT_VALUE = 522;
  /**
   * <pre>
   * create smart evaluation event
   * </pre>
   *
   * <code>SCORECARDS_CREATE_SMART_EVALUATION_EVENT = 523;</code>
   */
  public static final int SCORECARDS_CREATE_SMART_EVALUATION_EVENT_VALUE = 523;
  /**
   * <pre>
   *Tickets Events
   * create event
   * </pre>
   *
   * <code>TICKET_CREATE_EVENT = 600;</code>
   */
  public static final int TICKET_CREATE_EVENT_VALUE = 600;
  /**
   * <pre>
   * edit event
   * </pre>
   *
   * <code>TICKET_EDIT_EVENT = 601;</code>
   */
  public static final int TICKET_EDIT_EVENT_VALUE = 601;
  /**
   * <pre>
   * close event
   * </pre>
   *
   * <code>TICKET_CLOSE_EVENT = 602;</code>
   */
  public static final int TICKET_CLOSE_EVENT_VALUE = 602;
  /**
   * <code>TICKET_ACTION_CREATE_EVENT = 603;</code>
   */
  public static final int TICKET_ACTION_CREATE_EVENT_VALUE = 603;
  /**
   * <code>TICKET_ACTION_EDIT_EVENT = 604;</code>
   */
  public static final int TICKET_ACTION_EDIT_EVENT_VALUE = 604;
  /**
   * <code>TICKET_ACTION_STATE_CHANGE_EVENT = 605;</code>
   */
  public static final int TICKET_ACTION_STATE_CHANGE_EVENT_VALUE = 605;
  /**
   * <code>TICKET_PARTICIPANT_EVENT = 606;</code>
   */
  public static final int TICKET_PARTICIPANT_EVENT_VALUE = 606;
  /**
   * <pre>
   * ticket-create comment event
   * </pre>
   *
   * <code>TICKET_CREATE_COMMENT_EVENT = 607;</code>
   */
  public static final int TICKET_CREATE_COMMENT_EVENT_VALUE = 607;
  /**
   * <pre>
   * ticket-reply comment event
   * </pre>
   *
   * <code>TICKET_REPLY_COMMENT_EVENT = 608;</code>
   */
  public static final int TICKET_REPLY_COMMENT_EVENT_VALUE = 608;
  /**
   * <pre>
   * ticket-create-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_CREATE_EVENT = 609;</code>
   */
  public static final int TICKET_TEMPLATE_CREATE_EVENT_VALUE = 609;
  /**
   * <pre>
   * ticket-edit-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_EDIT_EVENT = 610;</code>
   */
  public static final int TICKET_TEMPLATE_EDIT_EVENT_VALUE = 610;
  /**
   * <pre>
   * ticket-close-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_CLOSE_EVENT = 611;</code>
   */
  public static final int TICKET_TEMPLATE_CLOSE_EVENT_VALUE = 611;
  /**
   * <pre>
   * ticket-assign-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_ASSIGN_EVENT = 612;</code>
   */
  public static final int TICKET_TEMPLATE_ASSIGN_EVENT_VALUE = 612;
  /**
   * <pre>
   * ticket-state-change-template event
   * </pre>
   *
   * <code>TICKET_TEMPLATE_STATE_CHANGE_EVENT = 613;</code>
   */
  public static final int TICKET_TEMPLATE_STATE_CHANGE_EVENT_VALUE = 613;
  /**
   * <pre>
   * ticket-project-state event
   * </pre>
   *
   * <code>TICKET_PROJECT_STATE_CHANGE_EVENT = 614;</code>
   */
  public static final int TICKET_PROJECT_STATE_CHANGE_EVENT_VALUE = 614;
  /**
   * <pre>
   * ticket-add-contact-event
   * </pre>
   *
   * <code>TICKET_CONTACT_ADD_EVENT = 615;</code>
   */
  public static final int TICKET_CONTACT_ADD_EVENT_VALUE = 615;
  /**
   * <pre>
   * Compliance Events
   * rnd query event
   * </pre>
   *
   * <code>COMPLIANCE_RND_QUERY_EVENT = 700;</code>
   */
  public static final int COMPLIANCE_RND_QUERY_EVENT_VALUE = 700;
  /**
   * <pre>
   * rnd query cached event
   * </pre>
   *
   * <code>COMPLIANCE_RND_QUERY_CACHED_EVENT = 701;</code>
   */
  public static final int COMPLIANCE_RND_QUERY_CACHED_EVENT_VALUE = 701;
  /**
   * <pre>
   * Agent Training
   * create learning opportunity event
   * </pre>
   *
   * <code>AGENT_TRAINING_CREATE_LEARNING_OPPORTUNITY_EVENT = 800;</code>
   */
  public static final int AGENT_TRAINING_CREATE_LEARNING_OPPORTUNITY_EVENT_VALUE = 800;
  /**
   * <pre>
   * LMS Events
   * </pre>
   *
   * <code>LMS_PIPELINE_FAILURE_EVENT = 900;</code>
   */
  public static final int LMS_PIPELINE_FAILURE_EVENT_VALUE = 900;
  /**
   * <code>LMS_PIPELINE_NO_OUTPUT_EVENT = 901;</code>
   */
  public static final int LMS_PIPELINE_NO_OUTPUT_EVENT_VALUE = 901;
  /**
   * <code>LMS_PIPELINE_SUCCESSFUL_EVENT = 902;</code>
   */
  public static final int LMS_PIPELINE_SUCCESSFUL_EVENT_VALUE = 902;
  /**
   * <pre>
   * Billing Events
   * </pre>
   *
   * <code>EVENT_TYPE_BILLING_COMMIT_BILLING_PLAN = 1000 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_COMMIT_BILLING_PLAN_VALUE = 1000;
  /**
   * <code>EVENT_TYPE_BILLING_CREATE_BILLING_PLAN = 1001 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_CREATE_BILLING_PLAN_VALUE = 1001;
  /**
   * <code>EVENT_TYPE_BILLING_CREATE_INVOICE = 1002 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_CREATE_INVOICE_VALUE = 1002;
  /**
   * <code>EVENT_TYPE_BILLING_CREATE_RATE_DEFINITION = 1003 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_CREATE_RATE_DEFINITION_VALUE = 1003;
  /**
   * <code>EVENT_TYPE_BILLING_DELETE_BILLING_PLAN = 1004 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_DELETE_BILLING_PLAN_VALUE = 1004;
  /**
   * <code>EVENT_TYPE_BILLING_DELETE_INVOICE = 1005 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_DELETE_INVOICE_VALUE = 1005;
  /**
   * <code>EVENT_TYPE_BILLING_DELETE_RATE_DEFINITION = 1006 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_DELETE_RATE_DEFINITION_VALUE = 1006;
  /**
   * <code>EVENT_TYPE_BILLING_EXPORT_INVOICE = 1007 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_EXPORT_INVOICE_VALUE = 1007;
  /**
   * <code>EVENT_TYPE_BILLING_UPDATE_BILLING_PLAN = 1008 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_UPDATE_BILLING_PLAN_VALUE = 1008;
  /**
   * <code>EVENT_TYPE_BILLING_UPDATE_INVOICE = 1009 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_UPDATE_INVOICE_VALUE = 1009;
  /**
   * <code>EVENT_TYPE_BILLING_UPDATE_RATE_DEFINITION = 1010 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_UPDATE_RATE_DEFINITION_VALUE = 1010;
  /**
   * <code>EVENT_TYPE_BILLING_RATED_ITEMS_GENERATED = 1011 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_BILLING_RATED_ITEMS_GENERATED_VALUE = 1011;
  /**
   * <code>EVENT_TYPE_BILLING_ACCUMULATE_ITEMS = 1012;</code>
   */
  public static final int EVENT_TYPE_BILLING_ACCUMULATE_ITEMS_VALUE = 1012;
  /**
   * <pre>
   * Delivery Events
   * </pre>
   *
   * <code>EVENT_TYPE_DELIVERY_FAILURE = 1100;</code>
   */
  public static final int EVENT_TYPE_DELIVERY_FAILURE_VALUE = 1100;
  /**
   * <code>EVENT_TYPE_DELIVERY_SUCCESS = 1101;</code>
   */
  public static final int EVENT_TYPE_DELIVERY_SUCCESS_VALUE = 1101;
  /**
   * <pre>
   *ContactManager Events
   *CreateContactEntry(upload) and AddContactEntry
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_ADD_EVENT = 1200;</code>
   */
  public static final int EVENT_TYPE_CONTACT_MANAGER_ADD_EVENT_VALUE = 1200;
  /**
   * <pre>
   * view event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_ENTRY_VIEW_EVENT = 1201;</code>
   */
  public static final int EVENT_TYPE_CONTACT_MANAGER_ENTRY_VIEW_EVENT_VALUE = 1201;
  /**
   * <pre>
   * kyc event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_KYC_ENC_VIEW_EVENT = 1202 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_CONTACT_MANAGER_KYC_ENC_VIEW_EVENT_VALUE = 1202;
  /**
   * <pre>
   * ttl event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_TTL_EVENT = 1203 [deprecated = true];</code>
   */
  @java.lang.Deprecated public static final int EVENT_TYPE_CONTACT_MANAGER_TTL_EVENT_VALUE = 1203;
  /**
   * <pre>
   * edit event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_EDIT_EVENT = 1204;</code>
   */
  public static final int EVENT_TYPE_CONTACT_MANAGER_EDIT_EVENT_VALUE = 1204;
  /**
   * <pre>
   * upload event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_UPLOAD_EVENT = 1205;</code>
   */
  public static final int EVENT_TYPE_CONTACT_MANAGER_UPLOAD_EVENT_VALUE = 1205;
  /**
   * <pre>
   * KYC verification event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_VERIFICATION_EVENT = 1206;</code>
   */
  public static final int EVENT_TYPE_CONTACT_MANAGER_VERIFICATION_EVENT_VALUE = 1206;
  /**
   * <pre>
   *Contact Manager entry delete event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_DELETE_EVENT = 1207;</code>
   */
  public static final int EVENT_TYPE_CONTACT_MANAGER_DELETE_EVENT_VALUE = 1207;
  /**
   * <pre>
   *Contact Manager entry expunge event at TTL
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_EXPUNGE_EVENT = 1208;</code>
   */
  public static final int EVENT_TYPE_CONTACT_MANAGER_EXPUNGE_EVENT_VALUE = 1208;
  /**
   * <pre>
   *Contact Entity association event
   * </pre>
   *
   * <code>EVENT_TYPE_CONTACT_MANAGER_ENTITY_ASSOCIATED_EVENT = 1209;</code>
   */
  public static final int EVENT_TYPE_CONTACT_MANAGER_ENTITY_ASSOCIATED_EVENT_VALUE = 1209;
  /**
   * <pre>
   * Organization Events
   * Organization event when any users access tokens are expiring.
   * </pre>
   *
   * <code>EVENT_TYPE_ORGANIZATION_ACCESS_TOKENS_EXPIRING_EVENT = 1300;</code>
   */
  public static final int EVENT_TYPE_ORGANIZATION_ACCESS_TOKENS_EXPIRING_EVENT_VALUE = 1300;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EventType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static EventType forNumber(int value) {
    switch (value) {
      case 0: return DUMMY_APPLICATION;
      case 1: return DUMMY_APPLICATION_STORAGE;
      case 2: return DUMMY_APPLICATION_COMPUTE;
      case 100: return VOICE_ANALYTICS;
      case 101: return VOICE_ANALYTICS_FLAG_OCCURRENCE;
      case 102: return VOICE_ANALYTICS_FLAG_NEEDS_REVIEW;
      case 103: return VOICE_ANALYTICS_BILLING_REPORT;
      case 104: return VOICE_ANALYTICS_FLAG_SUMMARY;
      case 105: return VOICE_ANALYTICS_PHRASE_CORRECTION;
      case 106: return VOICE_ANALYTICS_CREATE_TRANSCRIPT;
      case 107: return VOICE_ANALYTICS_CREATE_SENTIMENT;
      case 108: return VOICE_ANALYTICS_CREATE_SUMMARY;
      case 300: return OMNICHANNEL;
      case 301: return OMNICHANNEL_PROJECT;
      case 302: return OMNICHANNEL_CAMPAIGN;
      case 303: return OMNICHANNEL_DAILY_PROJECT_REPORT;
      case 304: return OMNICHANNEL_DAILY_CONVERSATION_REPORT;
      case 305: return OMNICHANNEL_AGENT_ASSIGN_CONVERSATION;
      case 306: return OMNICHANNEL_AGENT_UNASSIGN_CONVERSATION;
      case 307: return OMNICHANNEL_AGENT_REASSIGN_CONVERSATION;
      case 308: return OMNICHANNEL_T10;
      case 309: return OMNICHANNEL_CUSTOMER_TEXT_MESSAGE;
      case 310: return OMNICHANNEL_AGENT_TEXT_MESSAGE;
      case 311: return OMNICHANNEL_FINISH_WRAP_UP;
      case 312: return OMNICHANNEL_BEGIN_WRAP_UP;
      case 313: return OMNICHANNEL_T11;
      case 314: return OMNICHANNEL_CREATE_CONVERSATION;
      case 315: return OMNICHANNEL_AGENT_SUSPEND;
      case 316: return OMNICHANNEL_CLOSE_CONVERSATION;
      case 332: return OMNICHANNEL_MANAGER_TEXT_MESSAGE;
      case 330: return OMNICHANNEL_UPDATE_CAMPAIGN;
      case 331: return OMNICHANNEL_SET_CONVERSATION_COLLECTED_DATA;
      case 333: return OMNICHANNEL_ARCHIVE_CAMPAIGN;
      case 334: return OMNICHANNEL_PAUSE_CAMPAIGN;
      case 335: return OMNICHANNEL_RESUME_CAMPAIGN;
      case 336: return OMNICHANNEL_START_CAMPAIGN;
      case 337: return OMNICHANNEL_SCHEDULE_MODULE;
      case 338: return OMNICHANNEL_START_MODULE;
      case 339: return OMNICHANNEL_PAUSE_MODULE;
      case 340: return OMNICHANNEL_RESUME_MODULE;
      case 341: return OMNICHANNEL_ERROR_MODULE;
      case 342: return OMNICHANNEL_SUCCESS_MODULE;
      case 343: return OMNICHANNEL_FAIL_MODULE;
      case 344: return OMNICHANNEL_COMPLETE_MODULE;
      case 345: return OMNICHANNEL_ARCHIVE_MODULE;
      case 346: return OMNICHANNEL_UPDATE_MODULE;
      case 347: return OMNICHANNEL_MODULE_SMS_MESSAGE_SENT;
      case 348: return OMNICHANNEL_COMPLETE_CAMPAIGN;
      case 349: return OMNICHANNEL_MODULE_INITIAL_REPLY;
      case 350: return OMNICHANNEL_TASK_MESSAGE_SENT;
      case 351: return OMNICHANNEL_CONNECTED_INBOX_POLL;
      case 352: return OMNICHANNEL_CONNECTED_INBOX_CREATED;
      case 353: return OMNICHANNEL_AGENT_MESSAGE_UNITS;
      case 354: return OMNICHANNEL_MANAGER_MESSAGE_UNITS;
      case 355: return OMNICHANNEL_CUSTOMER_MESSAGE_UNITS;
      case 356: return OMNICHANNEL_SYSTEM_MESSAGE_UNITS;
      case 357: return OMNICHANNEL_PAYMENT_LINK_SENT;
      case 358: return OMNICHANNEL_MANUAL_APPROVE_TASK_ACCEPTED;
      case 359: return OMNICHANNEL_MANUAL_APPROVE_TASK_REJECTED;
      case 360: return OMNICHANNEL_MANUAL_APPROVE_TASK_TIMEOUT;
      case 361: return OMNICHANNEL_MANUAL_APPROVE_TASK_REQUEUE;
      case 362: return OMNICHANNEL_TRANSCRIPT_SAVED;
      case 363: return OMNICHANNEL_MESSAGE_SENT;
      case 364: return OMNICHANNEL_PROVIDER_RESPONSE;
      case 365: return OMNICHANNEL_PROVIDER_MESSAGE_FAILED;
      case 400: return ASM_AGENT_LOGIN;
      case 401: return ASM_OPEN_VOICE;
      case 402: return ASM_OPEN_OMNI_AGENT;
      case 403: return ASM_ACTIVATE_CONVERSATION;
      case 404: return ASM_DEACTIVATE_CONVERSATION;
      case 405: return ASM_AGENT_STATE_CHANGED;
      case 406: return ASM_AGENT_LOGOUT;
      case 407: return ASM_PAUSE_EVENT;
      case 408: return ASM_RESUME_EVENT;
      case 409: return ASM_CONVERSATION_PULLED_EVENT;
      case 500: return SCORECARDS_CREATE_QUESTION_EVENT;
      case 501: return SCORECARDS_UPDATE_QUESTION_EVENT;
      case 502: return SCORECARDS_DELETE_QUESTION_EVENT;
      case 503: return SCORECARDS_CREATE_SCORECARD_EVENT;
      case 504: return SCORECARDS_UPDATE_SCORECARD_EVENT;
      case 505: return SCORECARDS_DELETE_SCORECARD_EVENT;
      case 506: return SCORECARDS_CLONE_SCORECARD_EVENT;
      case 507: return SCORECARDS_CREATE_EVALUATION_EVENT;
      case 508: return SCORECARDS_DELETE_EVALUATION_EVENT;
      case 509: return SCORECARDS_CREATE_SECTION_EVENT;
      case 510: return SCORECARDS_UPDATE_SECTION_EVENT;
      case 511: return SCORECARDS_DELETE_SECTION_EVENT;
      case 512: return SCORECARDS_CREATE_CATEGORY_EVENT;
      case 513: return SCORECARDS_UPDATE_CATEGORY_EVENT;
      case 514: return SCORECARDS_DELETE_CATEGORY_EVENT;
      case 515: return SCORECARDS_CREATE_EVALUATION_QUESTION_EVENT;
      case 516: return SCORECARDS_UPDATE_EVALUATION_QUESTION_EVENT;
      case 517: return SCORECARDS_DELETE_EVALUATION_QUESTION_EVENT;
      case 518: return SCORECARDS_CREATE_SCORECARD_QUESTION_EVENT;
      case 519: return SCORECARDS_UPDATE_SCORECARD_QUESTION_EVENT;
      case 520: return SCORECARDS_DELETE_SCORECARD_QUESTION_EVENT;
      case 521: return SCORECARDS_CREATE_AUTO_EVALUATION_EVENT;
      case 522: return SCORECARDS_UPDATE_EVALUATION_EVENT;
      case 523: return SCORECARDS_CREATE_SMART_EVALUATION_EVENT;
      case 600: return TICKET_CREATE_EVENT;
      case 601: return TICKET_EDIT_EVENT;
      case 602: return TICKET_CLOSE_EVENT;
      case 603: return TICKET_ACTION_CREATE_EVENT;
      case 604: return TICKET_ACTION_EDIT_EVENT;
      case 605: return TICKET_ACTION_STATE_CHANGE_EVENT;
      case 606: return TICKET_PARTICIPANT_EVENT;
      case 607: return TICKET_CREATE_COMMENT_EVENT;
      case 608: return TICKET_REPLY_COMMENT_EVENT;
      case 609: return TICKET_TEMPLATE_CREATE_EVENT;
      case 610: return TICKET_TEMPLATE_EDIT_EVENT;
      case 611: return TICKET_TEMPLATE_CLOSE_EVENT;
      case 612: return TICKET_TEMPLATE_ASSIGN_EVENT;
      case 613: return TICKET_TEMPLATE_STATE_CHANGE_EVENT;
      case 614: return TICKET_PROJECT_STATE_CHANGE_EVENT;
      case 615: return TICKET_CONTACT_ADD_EVENT;
      case 700: return COMPLIANCE_RND_QUERY_EVENT;
      case 701: return COMPLIANCE_RND_QUERY_CACHED_EVENT;
      case 800: return AGENT_TRAINING_CREATE_LEARNING_OPPORTUNITY_EVENT;
      case 900: return LMS_PIPELINE_FAILURE_EVENT;
      case 901: return LMS_PIPELINE_NO_OUTPUT_EVENT;
      case 902: return LMS_PIPELINE_SUCCESSFUL_EVENT;
      case 1000: return EVENT_TYPE_BILLING_COMMIT_BILLING_PLAN;
      case 1001: return EVENT_TYPE_BILLING_CREATE_BILLING_PLAN;
      case 1002: return EVENT_TYPE_BILLING_CREATE_INVOICE;
      case 1003: return EVENT_TYPE_BILLING_CREATE_RATE_DEFINITION;
      case 1004: return EVENT_TYPE_BILLING_DELETE_BILLING_PLAN;
      case 1005: return EVENT_TYPE_BILLING_DELETE_INVOICE;
      case 1006: return EVENT_TYPE_BILLING_DELETE_RATE_DEFINITION;
      case 1007: return EVENT_TYPE_BILLING_EXPORT_INVOICE;
      case 1008: return EVENT_TYPE_BILLING_UPDATE_BILLING_PLAN;
      case 1009: return EVENT_TYPE_BILLING_UPDATE_INVOICE;
      case 1010: return EVENT_TYPE_BILLING_UPDATE_RATE_DEFINITION;
      case 1011: return EVENT_TYPE_BILLING_RATED_ITEMS_GENERATED;
      case 1012: return EVENT_TYPE_BILLING_ACCUMULATE_ITEMS;
      case 1100: return EVENT_TYPE_DELIVERY_FAILURE;
      case 1101: return EVENT_TYPE_DELIVERY_SUCCESS;
      case 1200: return EVENT_TYPE_CONTACT_MANAGER_ADD_EVENT;
      case 1201: return EVENT_TYPE_CONTACT_MANAGER_ENTRY_VIEW_EVENT;
      case 1202: return EVENT_TYPE_CONTACT_MANAGER_KYC_ENC_VIEW_EVENT;
      case 1203: return EVENT_TYPE_CONTACT_MANAGER_TTL_EVENT;
      case 1204: return EVENT_TYPE_CONTACT_MANAGER_EDIT_EVENT;
      case 1205: return EVENT_TYPE_CONTACT_MANAGER_UPLOAD_EVENT;
      case 1206: return EVENT_TYPE_CONTACT_MANAGER_VERIFICATION_EVENT;
      case 1207: return EVENT_TYPE_CONTACT_MANAGER_DELETE_EVENT;
      case 1208: return EVENT_TYPE_CONTACT_MANAGER_EXPUNGE_EVENT;
      case 1209: return EVENT_TYPE_CONTACT_MANAGER_ENTITY_ASSOCIATED_EVENT;
      case 1300: return EVENT_TYPE_ORGANIZATION_ACCESS_TOKENS_EXPIRING_EVENT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EventType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EventType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EventType>() {
          public EventType findValueByNumber(int number) {
            return EventType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.audit.EventTypesProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final EventType[] VALUES = values();

  public static EventType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EventType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.audit.EventType)
}

