// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/task.proto

package com.tcn.cloud.api.api.commons;

/**
 * Protobuf enum {@code api.commons.TaskStatus}
 */
public enum TaskStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>TASK_UNKNOWN = 0;</code>
   */
  TASK_UNKNOWN(0),
  /**
   * <pre>
   * "TASK_SCHEDULED", "Task is waiting for scheduler"),
   * </pre>
   *
   * <code>TASK_SCHEDULED = 2100;</code>
   */
  TASK_SCHEDULED(2100),
  /**
   * <pre>
   * "TASK_WAITING", "Task was running and is waiting to send next call"),
   * </pre>
   *
   * <code>TASK_WAITING = 2110;</code>
   */
  TASK_WAITING(2110),
  /**
   * <pre>
   * "TASK_PREPARING", " Task is currently beeing prepared by the scheduler"),
   * </pre>
   *
   * <code>TASK_PREPARING = 2120;</code>
   */
  TASK_PREPARING(2120),
  /**
   * <pre>
   * "TASK_RUNNING", "Task is currently executing calls"),
   * </pre>
   *
   * <code>TASK_RUNNING = 2200;</code>
   */
  TASK_RUNNING(2200),
  /**
   * <pre>
   * "TASK_COMPLETED", "Task was completed normally"),
   * </pre>
   *
   * <code>TASK_COMPLETED = 2300;</code>
   */
  TASK_COMPLETED(2300),
  /**
   * <pre>
   * "TASK_CANCELLED_TIMEOUT", "Task was cancelled due to time restrictions"),
   * </pre>
   *
   * <code>TASK_CANCELLED_TIMEOUT = 2310;</code>
   */
  TASK_CANCELLED_TIMEOUT(2310),
  /**
   * <pre>
   * "TASK_CANCELLED_USER", "Task was cancelled by login belonging to client"),
   * </pre>
   *
   * <code>TASK_CANCELLED_USER = 2320;</code>
   */
  TASK_CANCELLED_USER(2320),
  /**
   * <pre>
   * "TASK_CANCELLED_ADMIN", "Task was cancelled by some login not belonging to client with permissions"),
   * </pre>
   *
   * <code>TASK_CANCELLED_ADMIN = 2330;</code>
   */
  TASK_CANCELLED_ADMIN(2330),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>TASK_UNKNOWN = 0;</code>
   */
  public static final int TASK_UNKNOWN_VALUE = 0;
  /**
   * <pre>
   * "TASK_SCHEDULED", "Task is waiting for scheduler"),
   * </pre>
   *
   * <code>TASK_SCHEDULED = 2100;</code>
   */
  public static final int TASK_SCHEDULED_VALUE = 2100;
  /**
   * <pre>
   * "TASK_WAITING", "Task was running and is waiting to send next call"),
   * </pre>
   *
   * <code>TASK_WAITING = 2110;</code>
   */
  public static final int TASK_WAITING_VALUE = 2110;
  /**
   * <pre>
   * "TASK_PREPARING", " Task is currently beeing prepared by the scheduler"),
   * </pre>
   *
   * <code>TASK_PREPARING = 2120;</code>
   */
  public static final int TASK_PREPARING_VALUE = 2120;
  /**
   * <pre>
   * "TASK_RUNNING", "Task is currently executing calls"),
   * </pre>
   *
   * <code>TASK_RUNNING = 2200;</code>
   */
  public static final int TASK_RUNNING_VALUE = 2200;
  /**
   * <pre>
   * "TASK_COMPLETED", "Task was completed normally"),
   * </pre>
   *
   * <code>TASK_COMPLETED = 2300;</code>
   */
  public static final int TASK_COMPLETED_VALUE = 2300;
  /**
   * <pre>
   * "TASK_CANCELLED_TIMEOUT", "Task was cancelled due to time restrictions"),
   * </pre>
   *
   * <code>TASK_CANCELLED_TIMEOUT = 2310;</code>
   */
  public static final int TASK_CANCELLED_TIMEOUT_VALUE = 2310;
  /**
   * <pre>
   * "TASK_CANCELLED_USER", "Task was cancelled by login belonging to client"),
   * </pre>
   *
   * <code>TASK_CANCELLED_USER = 2320;</code>
   */
  public static final int TASK_CANCELLED_USER_VALUE = 2320;
  /**
   * <pre>
   * "TASK_CANCELLED_ADMIN", "Task was cancelled by some login not belonging to client with permissions"),
   * </pre>
   *
   * <code>TASK_CANCELLED_ADMIN = 2330;</code>
   */
  public static final int TASK_CANCELLED_ADMIN_VALUE = 2330;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TaskStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TaskStatus forNumber(int value) {
    switch (value) {
      case 0: return TASK_UNKNOWN;
      case 2100: return TASK_SCHEDULED;
      case 2110: return TASK_WAITING;
      case 2120: return TASK_PREPARING;
      case 2200: return TASK_RUNNING;
      case 2300: return TASK_COMPLETED;
      case 2310: return TASK_CANCELLED_TIMEOUT;
      case 2320: return TASK_CANCELLED_USER;
      case 2330: return TASK_CANCELLED_ADMIN;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TaskStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TaskStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TaskStatus>() {
          public TaskStatus findValueByNumber(int number) {
            return TaskStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.TaskProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final TaskStatus[] VALUES = values();

  public static TaskStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TaskStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.TaskStatus)
}

