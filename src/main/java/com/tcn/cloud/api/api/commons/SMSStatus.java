// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/sms.proto

package com.tcn.cloud.api.api.commons;

/**
 * Protobuf enum {@code api.commons.SMSStatus}
 */
public enum SMSStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SMS_UNKWNON = 0;</code>
   */
  SMS_UNKWNON(0),
  /**
   * <pre>
   * "SMS_PREPARING", "Sms group is being prepared for scheduling"),
   * </pre>
   *
   * <code>SMS_PREPARING = 7000;</code>
   */
  SMS_PREPARING(7000),
  /**
   * <pre>
   * "SMS_SCHEDULED", "Sms group is currently waiting for scheduler"),
   * </pre>
   *
   * <code>SMS_SCHEDULED = 7100;</code>
   */
  SMS_SCHEDULED(7100),
  /**
   * <pre>
   * "SMS_RESUME", "Sms group is ready to restart after being paused"),
   * </pre>
   *
   * <code>SMS_RESUME = 7150;</code>
   */
  SMS_RESUME(7150),
  /**
   * <pre>
   * "SMS_RUNNING", "Sms group is currently being executed"),
   * </pre>
   *
   * <code>SMS_RUNNING = 7200;</code>
   */
  SMS_RUNNING(7200),
  /**
   * <pre>
   * "SMS_COMPLETED", "Sms group has been executed"),
   * </pre>
   *
   * <code>SMS_COMPLETED = 7300;</code>
   */
  SMS_COMPLETED(7300),
  /**
   * <pre>
   * "SMS_CANCELLED", "Sms group has been cancelled"),
   * </pre>
   *
   * <code>SMS_CANCELLED = 7310;</code>
   */
  SMS_CANCELLED(7310),
  /**
   * <pre>
   * "SMS_CANCELLED_ADMIN", "Sms group has been cancelled by admin"),
   * </pre>
   *
   * <code>SMS_CANCELLED_ADMIN = 7320;</code>
   */
  SMS_CANCELLED_ADMIN(7320),
  /**
   * <pre>
   *"SMS_SUMMED_COMPLETED", "Sms group has been executed and is summed"),
   * </pre>
   *
   * <code>SMS_SUMMED_COMPLETED = 7400;</code>
   */
  SMS_SUMMED_COMPLETED(7400),
  /**
   * <pre>
   *"SMS_SUMMED_CANCELLED", "Sms group has been cancelled and is summed"),
   * </pre>
   *
   * <code>SMS_SUMMED_CANCELLED = 7410;</code>
   */
  SMS_SUMMED_CANCELLED(7410),
  /**
   * <pre>
   *"SMS_SUMMED_CANCELLED_ADMIN", "Sms group has been cancelled by the admin and is summed"),
   * </pre>
   *
   * <code>SMS_SUMMED_CANCELLED_ADMIN = 7420;</code>
   */
  SMS_SUMMED_CANCELLED_ADMIN(7420),
  /**
   * <pre>
   * "SMS_PAUSED", "Sms group has been signaled to pause until further notice"),
   * </pre>
   *
   * <code>SMS_PAUSED = 7500;</code>
   */
  SMS_PAUSED(7500),
  /**
   * <pre>
   * "SMS_TASK_WAITIN";//"SMS Task is ready to be sent"),
   * </pre>
   *
   * <code>SMS_TASK_WAITING = 7600;</code>
   */
  SMS_TASK_WAITING(7600),
  /**
   * <pre>
   *"SMS_TASK_PROCESSING";//"SMS Task is sent to gateway "),
   * </pre>
   *
   * <code>SMS_TASK_PROCESSING = 7700;</code>
   */
  SMS_TASK_PROCESSING(7700),
  /**
   * <pre>
   *"SMS_TASK_DNC";//"SMS Task is DNC "),
   * </pre>
   *
   * <code>SMS_TASK_DNC = 7710;</code>
   */
  SMS_TASK_DNC(7710),
  /**
   * <pre>
   *"SMS_TASK_INVALID";//"SMS Task is invalid "),
   * </pre>
   *
   * <code>SMS_TASK_INVALID = 7720;</code>
   */
  SMS_TASK_INVALID(7720),
  /**
   * <pre>
   *"SMS_TASK_QUEUED";//"SMS Task status received as Queued from provider "),
   * </pre>
   *
   * <code>SMS_TASK_QUEUED = 7800;</code>
   */
  SMS_TASK_QUEUED(7800),
  /**
   * <pre>
   *"SMS_TASK_SENT";//"SMS Task status received as Sent from provider"),
   * </pre>
   *
   * <code>SMS_TASK_SENT = 7900;</code>
   */
  SMS_TASK_SENT(7900),
  /**
   * <pre>
   *"SMS_TASK_DELIVERED", "SMS Task status received as delivered from provider"),
   * </pre>
   *
   * <code>SMS_TASK_DELIVERED = 7910;</code>
   */
  SMS_TASK_DELIVERED(7910),
  /**
   * <pre>
   *"SMS_TASK_NOT_DELIVERED", "SMS Task is not delivered by provider"),
   * </pre>
   *
   * <code>SMS_TASK_NOT_DELIVERED = 7920;</code>
   */
  SMS_TASK_NOT_DELIVERED(7920),
  /**
   * <pre>
   *"SMS_TASK_CANCELED", "SMS Task is canceled by user/admin");
   * </pre>
   *
   * <code>SMS_TASK_CANCELED = 7930;</code>
   */
  SMS_TASK_CANCELED(7930),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SMS_UNKWNON = 0;</code>
   */
  public static final int SMS_UNKWNON_VALUE = 0;
  /**
   * <pre>
   * "SMS_PREPARING", "Sms group is being prepared for scheduling"),
   * </pre>
   *
   * <code>SMS_PREPARING = 7000;</code>
   */
  public static final int SMS_PREPARING_VALUE = 7000;
  /**
   * <pre>
   * "SMS_SCHEDULED", "Sms group is currently waiting for scheduler"),
   * </pre>
   *
   * <code>SMS_SCHEDULED = 7100;</code>
   */
  public static final int SMS_SCHEDULED_VALUE = 7100;
  /**
   * <pre>
   * "SMS_RESUME", "Sms group is ready to restart after being paused"),
   * </pre>
   *
   * <code>SMS_RESUME = 7150;</code>
   */
  public static final int SMS_RESUME_VALUE = 7150;
  /**
   * <pre>
   * "SMS_RUNNING", "Sms group is currently being executed"),
   * </pre>
   *
   * <code>SMS_RUNNING = 7200;</code>
   */
  public static final int SMS_RUNNING_VALUE = 7200;
  /**
   * <pre>
   * "SMS_COMPLETED", "Sms group has been executed"),
   * </pre>
   *
   * <code>SMS_COMPLETED = 7300;</code>
   */
  public static final int SMS_COMPLETED_VALUE = 7300;
  /**
   * <pre>
   * "SMS_CANCELLED", "Sms group has been cancelled"),
   * </pre>
   *
   * <code>SMS_CANCELLED = 7310;</code>
   */
  public static final int SMS_CANCELLED_VALUE = 7310;
  /**
   * <pre>
   * "SMS_CANCELLED_ADMIN", "Sms group has been cancelled by admin"),
   * </pre>
   *
   * <code>SMS_CANCELLED_ADMIN = 7320;</code>
   */
  public static final int SMS_CANCELLED_ADMIN_VALUE = 7320;
  /**
   * <pre>
   *"SMS_SUMMED_COMPLETED", "Sms group has been executed and is summed"),
   * </pre>
   *
   * <code>SMS_SUMMED_COMPLETED = 7400;</code>
   */
  public static final int SMS_SUMMED_COMPLETED_VALUE = 7400;
  /**
   * <pre>
   *"SMS_SUMMED_CANCELLED", "Sms group has been cancelled and is summed"),
   * </pre>
   *
   * <code>SMS_SUMMED_CANCELLED = 7410;</code>
   */
  public static final int SMS_SUMMED_CANCELLED_VALUE = 7410;
  /**
   * <pre>
   *"SMS_SUMMED_CANCELLED_ADMIN", "Sms group has been cancelled by the admin and is summed"),
   * </pre>
   *
   * <code>SMS_SUMMED_CANCELLED_ADMIN = 7420;</code>
   */
  public static final int SMS_SUMMED_CANCELLED_ADMIN_VALUE = 7420;
  /**
   * <pre>
   * "SMS_PAUSED", "Sms group has been signaled to pause until further notice"),
   * </pre>
   *
   * <code>SMS_PAUSED = 7500;</code>
   */
  public static final int SMS_PAUSED_VALUE = 7500;
  /**
   * <pre>
   * "SMS_TASK_WAITIN";//"SMS Task is ready to be sent"),
   * </pre>
   *
   * <code>SMS_TASK_WAITING = 7600;</code>
   */
  public static final int SMS_TASK_WAITING_VALUE = 7600;
  /**
   * <pre>
   *"SMS_TASK_PROCESSING";//"SMS Task is sent to gateway "),
   * </pre>
   *
   * <code>SMS_TASK_PROCESSING = 7700;</code>
   */
  public static final int SMS_TASK_PROCESSING_VALUE = 7700;
  /**
   * <pre>
   *"SMS_TASK_DNC";//"SMS Task is DNC "),
   * </pre>
   *
   * <code>SMS_TASK_DNC = 7710;</code>
   */
  public static final int SMS_TASK_DNC_VALUE = 7710;
  /**
   * <pre>
   *"SMS_TASK_INVALID";//"SMS Task is invalid "),
   * </pre>
   *
   * <code>SMS_TASK_INVALID = 7720;</code>
   */
  public static final int SMS_TASK_INVALID_VALUE = 7720;
  /**
   * <pre>
   *"SMS_TASK_QUEUED";//"SMS Task status received as Queued from provider "),
   * </pre>
   *
   * <code>SMS_TASK_QUEUED = 7800;</code>
   */
  public static final int SMS_TASK_QUEUED_VALUE = 7800;
  /**
   * <pre>
   *"SMS_TASK_SENT";//"SMS Task status received as Sent from provider"),
   * </pre>
   *
   * <code>SMS_TASK_SENT = 7900;</code>
   */
  public static final int SMS_TASK_SENT_VALUE = 7900;
  /**
   * <pre>
   *"SMS_TASK_DELIVERED", "SMS Task status received as delivered from provider"),
   * </pre>
   *
   * <code>SMS_TASK_DELIVERED = 7910;</code>
   */
  public static final int SMS_TASK_DELIVERED_VALUE = 7910;
  /**
   * <pre>
   *"SMS_TASK_NOT_DELIVERED", "SMS Task is not delivered by provider"),
   * </pre>
   *
   * <code>SMS_TASK_NOT_DELIVERED = 7920;</code>
   */
  public static final int SMS_TASK_NOT_DELIVERED_VALUE = 7920;
  /**
   * <pre>
   *"SMS_TASK_CANCELED", "SMS Task is canceled by user/admin");
   * </pre>
   *
   * <code>SMS_TASK_CANCELED = 7930;</code>
   */
  public static final int SMS_TASK_CANCELED_VALUE = 7930;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SMSStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SMSStatus forNumber(int value) {
    switch (value) {
      case 0: return SMS_UNKWNON;
      case 7000: return SMS_PREPARING;
      case 7100: return SMS_SCHEDULED;
      case 7150: return SMS_RESUME;
      case 7200: return SMS_RUNNING;
      case 7300: return SMS_COMPLETED;
      case 7310: return SMS_CANCELLED;
      case 7320: return SMS_CANCELLED_ADMIN;
      case 7400: return SMS_SUMMED_COMPLETED;
      case 7410: return SMS_SUMMED_CANCELLED;
      case 7420: return SMS_SUMMED_CANCELLED_ADMIN;
      case 7500: return SMS_PAUSED;
      case 7600: return SMS_TASK_WAITING;
      case 7700: return SMS_TASK_PROCESSING;
      case 7710: return SMS_TASK_DNC;
      case 7720: return SMS_TASK_INVALID;
      case 7800: return SMS_TASK_QUEUED;
      case 7900: return SMS_TASK_SENT;
      case 7910: return SMS_TASK_DELIVERED;
      case 7920: return SMS_TASK_NOT_DELIVERED;
      case 7930: return SMS_TASK_CANCELED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SMSStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SMSStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SMSStatus>() {
          public SMSStatus findValueByNumber(int number) {
            return SMSStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tcn.cloud.api.api.commons.SmsProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final SMSStatus[] VALUES = values();

  public static SMSStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SMSStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:api.commons.SMSStatus)
}

