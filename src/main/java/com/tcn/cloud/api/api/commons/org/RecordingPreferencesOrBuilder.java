// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/org/preferences.proto

package com.tcn.cloud.api.api.commons.org;

public interface RecordingPreferencesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.commons.org.RecordingPreferences)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Org ID.
   * </pre>
   *
   * <code>string org_id = 1 [json_name = "orgId"];</code>
   * @return The orgId.
   */
  java.lang.String getOrgId();
  /**
   * <pre>
   * Org ID.
   * </pre>
   *
   * <code>string org_id = 1 [json_name = "orgId"];</code>
   * @return The bytes for orgId.
   */
  com.google.protobuf.ByteString
      getOrgIdBytes();

  /**
   * <pre>
   * Whether to use custom recordings file name convention.
   * </pre>
   *
   * <code>bool convention_enabled = 10 [json_name = "conventionEnabled"];</code>
   * @return The conventionEnabled.
   */
  boolean getConventionEnabled();

  /**
   * <pre>
   * File name convention for recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
   * @return Whether the fileNameConvention field is set.
   */
  boolean hasFileNameConvention();
  /**
   * <pre>
   * File name convention for recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
   * @return The fileNameConvention.
   */
  com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConvention getFileNameConvention();
  /**
   * <pre>
   * File name convention for recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsFileNamingConvention file_name_convention = 11 [json_name = "fileNameConvention"];</code>
   */
  com.tcn.cloud.api.api.commons.org.RecordingsFileNamingConventionOrBuilder getFileNameConventionOrBuilder();

  /**
   * <pre>
   * Whether to use custom recordings file name convention for zip.
   * </pre>
   *
   * <code>bool zip_convention_enabled = 12 [json_name = "zipConventionEnabled"];</code>
   * @return The zipConventionEnabled.
   */
  boolean getZipConventionEnabled();

  /**
   * <pre>
   * File name convention for archived/compressed zip recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
   * @return Whether the zipFileNameConvention field is set.
   */
  boolean hasZipFileNameConvention();
  /**
   * <pre>
   * File name convention for archived/compressed zip recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
   * @return The zipFileNameConvention.
   */
  com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConvention getZipFileNameConvention();
  /**
   * <pre>
   * File name convention for archived/compressed zip recording files.
   * </pre>
   *
   * <code>.api.commons.org.RecordingsZipFileNamingConvention zip_file_name_convention = 13 [json_name = "zipFileNameConvention"];</code>
   */
  com.tcn.cloud.api.api.commons.org.RecordingsZipFileNamingConventionOrBuilder getZipFileNameConventionOrBuilder();

  /**
   * <pre>
   * Recording export file type (.wav or .mp3).
   * </pre>
   *
   * <code>.api.commons.RecordingFileType export_file_type = 14 [json_name = "exportFileType"];</code>
   * @return The enum numeric value on the wire for exportFileType.
   */
  int getExportFileTypeValue();
  /**
   * <pre>
   * Recording export file type (.wav or .mp3).
   * </pre>
   *
   * <code>.api.commons.RecordingFileType export_file_type = 14 [json_name = "exportFileType"];</code>
   * @return The exportFileType.
   */
  com.tcn.cloud.api.api.commons.RecordingFileType getExportFileType();
}
