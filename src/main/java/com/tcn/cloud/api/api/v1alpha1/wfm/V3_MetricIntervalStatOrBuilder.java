// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/v1alpha1/wfm/wfm.proto

package com.tcn.cloud.api.api.v1alpha1.wfm;

public interface V3_MetricIntervalStatOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.v1alpha1.wfm.V3_MetricIntervalStat)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Start time of the interval.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_datetime = 1 [json_name = "startDatetime"];</code>
   * @return Whether the startDatetime field is set.
   */
  boolean hasStartDatetime();
  /**
   * <pre>
   * Start time of the interval.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_datetime = 1 [json_name = "startDatetime"];</code>
   * @return The startDatetime.
   */
  com.google.protobuf.Timestamp getStartDatetime();
  /**
   * <pre>
   * Start time of the interval.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_datetime = 1 [json_name = "startDatetime"];</code>
   */
  com.google.protobuf.TimestampOrBuilder getStartDatetimeOrBuilder();

  /**
   * <pre>
   * Required FTEs for the interval.
   * </pre>
   *
   * <code>float required_fte = 2 [json_name = "requiredFte"];</code>
   * @return The requiredFte.
   */
  float getRequiredFte();

  /**
   * <pre>
   * Achieved FTEs for the interval.
   * </pre>
   *
   * <code>float achieved_fte = 3 [json_name = "achievedFte"];</code>
   * @return The achievedFte.
   */
  float getAchievedFte();

  /**
   * <pre>
   * Achieved FTEs for the interval after shrinkage is applied.
   * </pre>
   *
   * <code>float achieved_fte_with_shrinkage_applied = 4 [json_name = "achievedFteWithShrinkageApplied"];</code>
   * @return The achievedFteWithShrinkageApplied.
   */
  float getAchievedFteWithShrinkageApplied();

  /**
   * <pre>
   * Number for Productive FTEs achieved during the interval.
   * </pre>
   *
   * <code>float productive_fte = 5 [json_name = "productiveFte"];</code>
   * @return The productiveFte.
   */
  float getProductiveFte();

  /**
   * <pre>
   * Productive FTEs achieved after shrinkage is applied.
   * </pre>
   *
   * <code>float productive_fte_with_shrinkage_applied = 6 [json_name = "productiveFteWithShrinkageApplied"];</code>
   * @return The productiveFteWithShrinkageApplied.
   */
  float getProductiveFteWithShrinkageApplied();

  /**
   * <pre>
   * The achieved service level percent for the interval.
   * </pre>
   *
   * <code>float achieved_service_level_percent = 7 [json_name = "achievedServiceLevelPercent"];</code>
   * @return The achievedServiceLevelPercent.
   */
  float getAchievedServiceLevelPercent();

  /**
   * <pre>
   * Estimated number of additional agents required to achieve the target service level.
   * </pre>
   *
   * <code>float estimated_agent_shortfall_for_target_service_level = 8 [json_name = "estimatedAgentShortfallForTargetServiceLevel"];</code>
   * @return The estimatedAgentShortfallForTargetServiceLevel.
   */
  float getEstimatedAgentShortfallForTargetServiceLevel();

  /**
   * <pre>
   * Number of calls predicted for the interval.
   * </pre>
   *
   * <code>int32 num_calls = 9 [json_name = "numCalls"];</code>
   * @return The numCalls.
   */
  int getNumCalls();

  /**
   * <pre>
   * Number of agents scheduled to work during the interval.
   * </pre>
   *
   * <code>int32 num_agents = 10 [json_name = "numAgents"];</code>
   * @return The numAgents.
   */
  int getNumAgents();

  /**
   * <pre>
   * Number of agents required via erlang calculation.
   * </pre>
   *
   * <code>int32 erlang_required_agents = 11 [json_name = "erlangRequiredAgents"];</code>
   * @return The erlangRequiredAgents.
   */
  int getErlangRequiredAgents();
}
