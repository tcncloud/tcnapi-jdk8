// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/commons/org/user.proto

package com.tcn.cloud.api.api.commons.org;

public interface MfaInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.commons.org.MfaInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The user that the MFA info belongs to.
   * </pre>
   *
   * <code>string user_id = 1 [json_name = "userId"];</code>
   * @return The userId.
   */
  java.lang.String getUserId();
  /**
   * <pre>
   * The user that the MFA info belongs to.
   * </pre>
   *
   * <code>string user_id = 1 [json_name = "userId"];</code>
   * @return The bytes for userId.
   */
  com.google.protobuf.ByteString
      getUserIdBytes();

  /**
   * <pre>
   * Whether or not MFA is enabled for the user.
   * </pre>
   *
   * <code>bool mfa_enabled = 2 [json_name = "mfaEnabled"];</code>
   * @return The mfaEnabled.
   */
  boolean getMfaEnabled();

  /**
   * <code>.api.commons.org.MfaInfo.NoneSelected none = 3 [json_name = "none"];</code>
   * @return Whether the none field is set.
   */
  boolean hasNone();
  /**
   * <code>.api.commons.org.MfaInfo.NoneSelected none = 3 [json_name = "none"];</code>
   * @return The none.
   */
  com.tcn.cloud.api.api.commons.org.MfaInfo.NoneSelected getNone();
  /**
   * <code>.api.commons.org.MfaInfo.NoneSelected none = 3 [json_name = "none"];</code>
   */
  com.tcn.cloud.api.api.commons.org.MfaInfo.NoneSelectedOrBuilder getNoneOrBuilder();

  /**
   * <code>.api.commons.org.MfaInfo.OtpType otp = 4 [json_name = "otp"];</code>
   * @return Whether the otp field is set.
   */
  boolean hasOtp();
  /**
   * <code>.api.commons.org.MfaInfo.OtpType otp = 4 [json_name = "otp"];</code>
   * @return The otp.
   */
  com.tcn.cloud.api.api.commons.org.MfaInfo.OtpType getOtp();
  /**
   * <code>.api.commons.org.MfaInfo.OtpType otp = 4 [json_name = "otp"];</code>
   */
  com.tcn.cloud.api.api.commons.org.MfaInfo.OtpTypeOrBuilder getOtpOrBuilder();

  com.tcn.cloud.api.api.commons.org.MfaInfo.MfaTypeCase getMfaTypeCase();
}
