package com.tcn.cloud.api.api.v1alpha1.wfm;

import static io.grpc.MethodDescriptor.generateFullMethodName;

/**
 * <pre>
 * WFM is responsible for call prediction and call volume calculations based on call skills and other parameters.
 * </pre>
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler (version 1.57.1)",
    comments = "Source: api/v1alpha1/wfm/wfm.proto")
@io.grpc.stub.annotations.GrpcGenerated
public final class WFMGrpc {

  private WFMGrpc() {}

  public static final java.lang.String SERVICE_NAME = "api.v1alpha1.wfm.WFM";

  // Static method descriptors that strictly reflect the proto.
  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse> getPerformInitialClientSetupMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "PerformInitialClientSetup",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse> getPerformInitialClientSetupMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest, com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse> getPerformInitialClientSetupMethod;
    if ((getPerformInitialClientSetupMethod = WFMGrpc.getPerformInitialClientSetupMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getPerformInitialClientSetupMethod = WFMGrpc.getPerformInitialClientSetupMethod) == null) {
          WFMGrpc.getPerformInitialClientSetupMethod = getPerformInitialClientSetupMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest, com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "PerformInitialClientSetup"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("PerformInitialClientSetup"))
              .build();
        }
      }
    }
    return getPerformInitialClientSetupMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse> getCreateInitialDemoActivitiesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateInitialDemoActivities",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse> getCreateInitialDemoActivitiesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse> getCreateInitialDemoActivitiesMethod;
    if ((getCreateInitialDemoActivitiesMethod = WFMGrpc.getCreateInitialDemoActivitiesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateInitialDemoActivitiesMethod = WFMGrpc.getCreateInitialDemoActivitiesMethod) == null) {
          WFMGrpc.getCreateInitialDemoActivitiesMethod = getCreateInitialDemoActivitiesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateInitialDemoActivities"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateInitialDemoActivities"))
              .build();
        }
      }
    }
    return getCreateInitialDemoActivitiesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes> getListSkillProfilesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListSkillProfiles",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes> getListSkillProfilesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes> getListSkillProfilesMethod;
    if ((getListSkillProfilesMethod = WFMGrpc.getListSkillProfilesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListSkillProfilesMethod = WFMGrpc.getListSkillProfilesMethod) == null) {
          WFMGrpc.getListSkillProfilesMethod = getListSkillProfilesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListSkillProfiles"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListSkillProfiles"))
              .build();
        }
      }
    }
    return getListSkillProfilesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes> getUpdateSkillProfileMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateSkillProfile",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes> getUpdateSkillProfileMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes> getUpdateSkillProfileMethod;
    if ((getUpdateSkillProfileMethod = WFMGrpc.getUpdateSkillProfileMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateSkillProfileMethod = WFMGrpc.getUpdateSkillProfileMethod) == null) {
          WFMGrpc.getUpdateSkillProfileMethod = getUpdateSkillProfileMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateSkillProfile"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateSkillProfile"))
              .build();
        }
      }
    }
    return getUpdateSkillProfileMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes> getUpdateSkillProfileProficienciesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateSkillProfileProficiencies",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes> getUpdateSkillProfileProficienciesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes> getUpdateSkillProfileProficienciesMethod;
    if ((getUpdateSkillProfileProficienciesMethod = WFMGrpc.getUpdateSkillProfileProficienciesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateSkillProfileProficienciesMethod = WFMGrpc.getUpdateSkillProfileProficienciesMethod) == null) {
          WFMGrpc.getUpdateSkillProfileProficienciesMethod = getUpdateSkillProfileProficienciesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateSkillProfileProficiencies"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateSkillProfileProficiencies"))
              .build();
        }
      }
    }
    return getUpdateSkillProfileProficienciesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes> getGetSkillProfileMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetSkillProfile",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes> getGetSkillProfileMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes> getGetSkillProfileMethod;
    if ((getGetSkillProfileMethod = WFMGrpc.getGetSkillProfileMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetSkillProfileMethod = WFMGrpc.getGetSkillProfileMethod) == null) {
          WFMGrpc.getGetSkillProfileMethod = getGetSkillProfileMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetSkillProfile"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetSkillProfile"))
              .build();
        }
      }
    }
    return getGetSkillProfileMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes> getResyncSkillProfilesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ResyncSkillProfiles",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes> getResyncSkillProfilesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes> getResyncSkillProfilesMethod;
    if ((getResyncSkillProfilesMethod = WFMGrpc.getResyncSkillProfilesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getResyncSkillProfilesMethod = WFMGrpc.getResyncSkillProfilesMethod) == null) {
          WFMGrpc.getResyncSkillProfilesMethod = getResyncSkillProfilesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ResyncSkillProfiles"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ResyncSkillProfiles"))
              .build();
        }
      }
    }
    return getResyncSkillProfilesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes> getGetLastSkillProfileResyncDateMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetLastSkillProfileResyncDate",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes> getGetLastSkillProfileResyncDateMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes> getGetLastSkillProfileResyncDateMethod;
    if ((getGetLastSkillProfileResyncDateMethod = WFMGrpc.getGetLastSkillProfileResyncDateMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetLastSkillProfileResyncDateMethod = WFMGrpc.getGetLastSkillProfileResyncDateMethod) == null) {
          WFMGrpc.getGetLastSkillProfileResyncDateMethod = getGetLastSkillProfileResyncDateMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetLastSkillProfileResyncDate"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetLastSkillProfileResyncDate"))
              .build();
        }
      }
    }
    return getGetLastSkillProfileResyncDateMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes> getUpsertForecastingParametersMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertForecastingParameters",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes> getUpsertForecastingParametersMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes> getUpsertForecastingParametersMethod;
    if ((getUpsertForecastingParametersMethod = WFMGrpc.getUpsertForecastingParametersMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertForecastingParametersMethod = WFMGrpc.getUpsertForecastingParametersMethod) == null) {
          WFMGrpc.getUpsertForecastingParametersMethod = getUpsertForecastingParametersMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertForecastingParameters"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertForecastingParameters"))
              .build();
        }
      }
    }
    return getUpsertForecastingParametersMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes> getGetForecastingParametersMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetForecastingParameters",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes> getGetForecastingParametersMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes> getGetForecastingParametersMethod;
    if ((getGetForecastingParametersMethod = WFMGrpc.getGetForecastingParametersMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetForecastingParametersMethod = WFMGrpc.getGetForecastingParametersMethod) == null) {
          WFMGrpc.getGetForecastingParametersMethod = getGetForecastingParametersMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetForecastingParameters"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetForecastingParameters"))
              .build();
        }
      }
    }
    return getGetForecastingParametersMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes> getGetClientHistoryCacheInfoMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetClientHistoryCacheInfo",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes> getGetClientHistoryCacheInfoMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes> getGetClientHistoryCacheInfoMethod;
    if ((getGetClientHistoryCacheInfoMethod = WFMGrpc.getGetClientHistoryCacheInfoMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetClientHistoryCacheInfoMethod = WFMGrpc.getGetClientHistoryCacheInfoMethod) == null) {
          WFMGrpc.getGetClientHistoryCacheInfoMethod = getGetClientHistoryCacheInfoMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetClientHistoryCacheInfo"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetClientHistoryCacheInfo"))
              .build();
        }
      }
    }
    return getGetClientHistoryCacheInfoMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes> getListHistoricalDataMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListHistoricalData",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes> getListHistoricalDataMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes> getListHistoricalDataMethod;
    if ((getListHistoricalDataMethod = WFMGrpc.getListHistoricalDataMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListHistoricalDataMethod = WFMGrpc.getListHistoricalDataMethod) == null) {
          WFMGrpc.getListHistoricalDataMethod = getListHistoricalDataMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListHistoricalData"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListHistoricalData"))
              .build();
        }
      }
    }
    return getListHistoricalDataMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes> getUpsertHistoricalDataDeltaMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertHistoricalDataDelta",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes> getUpsertHistoricalDataDeltaMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes> getUpsertHistoricalDataDeltaMethod;
    if ((getUpsertHistoricalDataDeltaMethod = WFMGrpc.getUpsertHistoricalDataDeltaMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertHistoricalDataDeltaMethod = WFMGrpc.getUpsertHistoricalDataDeltaMethod) == null) {
          WFMGrpc.getUpsertHistoricalDataDeltaMethod = getUpsertHistoricalDataDeltaMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertHistoricalDataDelta"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertHistoricalDataDelta"))
              .build();
        }
      }
    }
    return getUpsertHistoricalDataDeltaMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes> getUpsertHistoricalDataDeltasMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertHistoricalDataDeltas",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes> getUpsertHistoricalDataDeltasMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes> getUpsertHistoricalDataDeltasMethod;
    if ((getUpsertHistoricalDataDeltasMethod = WFMGrpc.getUpsertHistoricalDataDeltasMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertHistoricalDataDeltasMethod = WFMGrpc.getUpsertHistoricalDataDeltasMethod) == null) {
          WFMGrpc.getUpsertHistoricalDataDeltasMethod = getUpsertHistoricalDataDeltasMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertHistoricalDataDeltas"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertHistoricalDataDeltas"))
              .build();
        }
      }
    }
    return getUpsertHistoricalDataDeltasMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes> getListSkillsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListSkills",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes> getListSkillsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes> getListSkillsMethod;
    if ((getListSkillsMethod = WFMGrpc.getListSkillsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListSkillsMethod = WFMGrpc.getListSkillsMethod) == null) {
          WFMGrpc.getListSkillsMethod = getListSkillsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListSkills"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListSkills"))
              .build();
        }
      }
    }
    return getListSkillsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes> getBuildCallProfileTemplateForSkillProfileMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildCallProfileTemplateForSkillProfile",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes> getBuildCallProfileTemplateForSkillProfileMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes> getBuildCallProfileTemplateForSkillProfileMethod;
    if ((getBuildCallProfileTemplateForSkillProfileMethod = WFMGrpc.getBuildCallProfileTemplateForSkillProfileMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildCallProfileTemplateForSkillProfileMethod = WFMGrpc.getBuildCallProfileTemplateForSkillProfileMethod) == null) {
          WFMGrpc.getBuildCallProfileTemplateForSkillProfileMethod = getBuildCallProfileTemplateForSkillProfileMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildCallProfileTemplateForSkillProfile"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildCallProfileTemplateForSkillProfile"))
              .build();
        }
      }
    }
    return getBuildCallProfileTemplateForSkillProfileMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes> getBuildCallProfileTemplateMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildCallProfileTemplate",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes> getBuildCallProfileTemplateMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes> getBuildCallProfileTemplateMethod;
    if ((getBuildCallProfileTemplateMethod = WFMGrpc.getBuildCallProfileTemplateMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildCallProfileTemplateMethod = WFMGrpc.getBuildCallProfileTemplateMethod) == null) {
          WFMGrpc.getBuildCallProfileTemplateMethod = getBuildCallProfileTemplateMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildCallProfileTemplate"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildCallProfileTemplate"))
              .build();
        }
      }
    }
    return getBuildCallProfileTemplateMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes> getCreateInactiveSkillProfileMappingMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateInactiveSkillProfileMapping",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes> getCreateInactiveSkillProfileMappingMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes> getCreateInactiveSkillProfileMappingMethod;
    if ((getCreateInactiveSkillProfileMappingMethod = WFMGrpc.getCreateInactiveSkillProfileMappingMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateInactiveSkillProfileMappingMethod = WFMGrpc.getCreateInactiveSkillProfileMappingMethod) == null) {
          WFMGrpc.getCreateInactiveSkillProfileMappingMethod = getCreateInactiveSkillProfileMappingMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateInactiveSkillProfileMapping"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateInactiveSkillProfileMapping"))
              .build();
        }
      }
    }
    return getCreateInactiveSkillProfileMappingMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes> getGetAvailableRegressionForecasterModelTypesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetAvailableRegressionForecasterModelTypes",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes> getGetAvailableRegressionForecasterModelTypesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes> getGetAvailableRegressionForecasterModelTypesMethod;
    if ((getGetAvailableRegressionForecasterModelTypesMethod = WFMGrpc.getGetAvailableRegressionForecasterModelTypesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetAvailableRegressionForecasterModelTypesMethod = WFMGrpc.getGetAvailableRegressionForecasterModelTypesMethod) == null) {
          WFMGrpc.getGetAvailableRegressionForecasterModelTypesMethod = getGetAvailableRegressionForecasterModelTypesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetAvailableRegressionForecasterModelTypes"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetAvailableRegressionForecasterModelTypes"))
              .build();
        }
      }
    }
    return getGetAvailableRegressionForecasterModelTypesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes> getDisconnectInactiveSkillProfileMappingMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DisconnectInactiveSkillProfileMapping",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes> getDisconnectInactiveSkillProfileMappingMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq, com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes> getDisconnectInactiveSkillProfileMappingMethod;
    if ((getDisconnectInactiveSkillProfileMappingMethod = WFMGrpc.getDisconnectInactiveSkillProfileMappingMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDisconnectInactiveSkillProfileMappingMethod = WFMGrpc.getDisconnectInactiveSkillProfileMappingMethod) == null) {
          WFMGrpc.getDisconnectInactiveSkillProfileMappingMethod = getDisconnectInactiveSkillProfileMappingMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq, com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DisconnectInactiveSkillProfileMapping"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DisconnectInactiveSkillProfileMapping"))
              .build();
        }
      }
    }
    return getDisconnectInactiveSkillProfileMappingMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes> getCreateSkillProfileGroupMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateSkillProfileGroup",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes> getCreateSkillProfileGroupMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes> getCreateSkillProfileGroupMethod;
    if ((getCreateSkillProfileGroupMethod = WFMGrpc.getCreateSkillProfileGroupMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateSkillProfileGroupMethod = WFMGrpc.getCreateSkillProfileGroupMethod) == null) {
          WFMGrpc.getCreateSkillProfileGroupMethod = getCreateSkillProfileGroupMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateSkillProfileGroup"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateSkillProfileGroup"))
              .build();
        }
      }
    }
    return getCreateSkillProfileGroupMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes> getUpdateSkillProfileGroupMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateSkillProfileGroup",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes> getUpdateSkillProfileGroupMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes> getUpdateSkillProfileGroupMethod;
    if ((getUpdateSkillProfileGroupMethod = WFMGrpc.getUpdateSkillProfileGroupMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateSkillProfileGroupMethod = WFMGrpc.getUpdateSkillProfileGroupMethod) == null) {
          WFMGrpc.getUpdateSkillProfileGroupMethod = getUpdateSkillProfileGroupMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateSkillProfileGroup"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateSkillProfileGroup"))
              .build();
        }
      }
    }
    return getUpdateSkillProfileGroupMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes> getListSkillProfileGroupsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListSkillProfileGroups",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes> getListSkillProfileGroupsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes> getListSkillProfileGroupsMethod;
    if ((getListSkillProfileGroupsMethod = WFMGrpc.getListSkillProfileGroupsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListSkillProfileGroupsMethod = WFMGrpc.getListSkillProfileGroupsMethod) == null) {
          WFMGrpc.getListSkillProfileGroupsMethod = getListSkillProfileGroupsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListSkillProfileGroups"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListSkillProfileGroups"))
              .build();
        }
      }
    }
    return getListSkillProfileGroupsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes> getUpdateSkillProfileGroupAssociationsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateSkillProfileGroupAssociations",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes> getUpdateSkillProfileGroupAssociationsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes> getUpdateSkillProfileGroupAssociationsMethod;
    if ((getUpdateSkillProfileGroupAssociationsMethod = WFMGrpc.getUpdateSkillProfileGroupAssociationsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateSkillProfileGroupAssociationsMethod = WFMGrpc.getUpdateSkillProfileGroupAssociationsMethod) == null) {
          WFMGrpc.getUpdateSkillProfileGroupAssociationsMethod = getUpdateSkillProfileGroupAssociationsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateSkillProfileGroupAssociations"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateSkillProfileGroupAssociations"))
              .build();
        }
      }
    }
    return getUpdateSkillProfileGroupAssociationsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes> getDeleteHistoricalDataDeltasMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteHistoricalDataDeltas",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes> getDeleteHistoricalDataDeltasMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes> getDeleteHistoricalDataDeltasMethod;
    if ((getDeleteHistoricalDataDeltasMethod = WFMGrpc.getDeleteHistoricalDataDeltasMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteHistoricalDataDeltasMethod = WFMGrpc.getDeleteHistoricalDataDeltasMethod) == null) {
          WFMGrpc.getDeleteHistoricalDataDeltasMethod = getDeleteHistoricalDataDeltasMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteHistoricalDataDeltas"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteHistoricalDataDeltas"))
              .build();
        }
      }
    }
    return getDeleteHistoricalDataDeltasMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes> getListTopSkillProfilesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListTopSkillProfiles",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes> getListTopSkillProfilesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes> getListTopSkillProfilesMethod;
    if ((getListTopSkillProfilesMethod = WFMGrpc.getListTopSkillProfilesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListTopSkillProfilesMethod = WFMGrpc.getListTopSkillProfilesMethod) == null) {
          WFMGrpc.getListTopSkillProfilesMethod = getListTopSkillProfilesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListTopSkillProfiles"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListTopSkillProfiles"))
              .build();
        }
      }
    }
    return getListTopSkillProfilesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes> getGetSkillProfilesCountMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetSkillProfilesCount",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes> getGetSkillProfilesCountMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes> getGetSkillProfilesCountMethod;
    if ((getGetSkillProfilesCountMethod = WFMGrpc.getGetSkillProfilesCountMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetSkillProfilesCountMethod = WFMGrpc.getGetSkillProfilesCountMethod) == null) {
          WFMGrpc.getGetSkillProfilesCountMethod = getGetSkillProfilesCountMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetSkillProfilesCount"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetSkillProfilesCount"))
              .build();
        }
      }
    }
    return getGetSkillProfilesCountMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getBuildProfileForecastByIntervalMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildProfileForecastByInterval",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval.class,
      methodType = io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getBuildProfileForecastByIntervalMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq, com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getBuildProfileForecastByIntervalMethod;
    if ((getBuildProfileForecastByIntervalMethod = WFMGrpc.getBuildProfileForecastByIntervalMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildProfileForecastByIntervalMethod = WFMGrpc.getBuildProfileForecastByIntervalMethod) == null) {
          WFMGrpc.getBuildProfileForecastByIntervalMethod = getBuildProfileForecastByIntervalMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq, com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildProfileForecastByInterval"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildProfileForecastByInterval"))
              .build();
        }
      }
    }
    return getBuildProfileForecastByIntervalMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes> getBuildProfileForecastByIntervalWithStatsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildProfileForecastByIntervalWithStats",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes> getBuildProfileForecastByIntervalWithStatsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes> getBuildProfileForecastByIntervalWithStatsMethod;
    if ((getBuildProfileForecastByIntervalWithStatsMethod = WFMGrpc.getBuildProfileForecastByIntervalWithStatsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildProfileForecastByIntervalWithStatsMethod = WFMGrpc.getBuildProfileForecastByIntervalWithStatsMethod) == null) {
          WFMGrpc.getBuildProfileForecastByIntervalWithStatsMethod = getBuildProfileForecastByIntervalWithStatsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildProfileForecastByIntervalWithStats"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildProfileForecastByIntervalWithStats"))
              .build();
        }
      }
    }
    return getBuildProfileForecastByIntervalWithStatsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes> getUpsertProfileForecastMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertProfileForecast",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes> getUpsertProfileForecastMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes> getUpsertProfileForecastMethod;
    if ((getUpsertProfileForecastMethod = WFMGrpc.getUpsertProfileForecastMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertProfileForecastMethod = WFMGrpc.getUpsertProfileForecastMethod) == null) {
          WFMGrpc.getUpsertProfileForecastMethod = getUpsertProfileForecastMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertProfileForecast"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertProfileForecast"))
              .build();
        }
      }
    }
    return getUpsertProfileForecastMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes> getCreateCallProfileTemplateMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateCallProfileTemplate",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes> getCreateCallProfileTemplateMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes> getCreateCallProfileTemplateMethod;
    if ((getCreateCallProfileTemplateMethod = WFMGrpc.getCreateCallProfileTemplateMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateCallProfileTemplateMethod = WFMGrpc.getCreateCallProfileTemplateMethod) == null) {
          WFMGrpc.getCreateCallProfileTemplateMethod = getCreateCallProfileTemplateMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateCallProfileTemplate"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateCallProfileTemplate"))
              .build();
        }
      }
    }
    return getCreateCallProfileTemplateMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes> getDeleteCallProfileTemplateMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteCallProfileTemplate",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes> getDeleteCallProfileTemplateMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes> getDeleteCallProfileTemplateMethod;
    if ((getDeleteCallProfileTemplateMethod = WFMGrpc.getDeleteCallProfileTemplateMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteCallProfileTemplateMethod = WFMGrpc.getDeleteCallProfileTemplateMethod) == null) {
          WFMGrpc.getDeleteCallProfileTemplateMethod = getDeleteCallProfileTemplateMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteCallProfileTemplate"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteCallProfileTemplate"))
              .build();
        }
      }
    }
    return getDeleteCallProfileTemplateMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes> getCreateRegressionTemplateMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateRegressionTemplate",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes> getCreateRegressionTemplateMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes> getCreateRegressionTemplateMethod;
    if ((getCreateRegressionTemplateMethod = WFMGrpc.getCreateRegressionTemplateMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateRegressionTemplateMethod = WFMGrpc.getCreateRegressionTemplateMethod) == null) {
          WFMGrpc.getCreateRegressionTemplateMethod = getCreateRegressionTemplateMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateRegressionTemplate"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateRegressionTemplate"))
              .build();
        }
      }
    }
    return getCreateRegressionTemplateMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes> getDeleteRegressionTemplateMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteRegressionTemplate",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes> getDeleteRegressionTemplateMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes> getDeleteRegressionTemplateMethod;
    if ((getDeleteRegressionTemplateMethod = WFMGrpc.getDeleteRegressionTemplateMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteRegressionTemplateMethod = WFMGrpc.getDeleteRegressionTemplateMethod) == null) {
          WFMGrpc.getDeleteRegressionTemplateMethod = getDeleteRegressionTemplateMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteRegressionTemplate"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteRegressionTemplate"))
              .build();
        }
      }
    }
    return getDeleteRegressionTemplateMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes> getListRegressionTemplatesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListRegressionTemplates",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes> getListRegressionTemplatesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes> getListRegressionTemplatesMethod;
    if ((getListRegressionTemplatesMethod = WFMGrpc.getListRegressionTemplatesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListRegressionTemplatesMethod = WFMGrpc.getListRegressionTemplatesMethod) == null) {
          WFMGrpc.getListRegressionTemplatesMethod = getListRegressionTemplatesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListRegressionTemplates"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListRegressionTemplates"))
              .build();
        }
      }
    }
    return getListRegressionTemplatesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getListForecastIntervalsForSkillProfileMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListForecastIntervalsForSkillProfile",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval.class,
      methodType = io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getListForecastIntervalsForSkillProfileMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getListForecastIntervalsForSkillProfileMethod;
    if ((getListForecastIntervalsForSkillProfileMethod = WFMGrpc.getListForecastIntervalsForSkillProfileMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListForecastIntervalsForSkillProfileMethod = WFMGrpc.getListForecastIntervalsForSkillProfileMethod) == null) {
          WFMGrpc.getListForecastIntervalsForSkillProfileMethod = getListForecastIntervalsForSkillProfileMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListForecastIntervalsForSkillProfile"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListForecastIntervalsForSkillProfile"))
              .build();
        }
      }
    }
    return getListForecastIntervalsForSkillProfileMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getListForecastIntervalsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListForecastIntervals",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval.class,
      methodType = io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getListForecastIntervalsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq, com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getListForecastIntervalsMethod;
    if ((getListForecastIntervalsMethod = WFMGrpc.getListForecastIntervalsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListForecastIntervalsMethod = WFMGrpc.getListForecastIntervalsMethod) == null) {
          WFMGrpc.getListForecastIntervalsMethod = getListForecastIntervalsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq, com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListForecastIntervals"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListForecastIntervals"))
              .build();
        }
      }
    }
    return getListForecastIntervalsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response> getListForecastIntervalsV2Method;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListForecastIntervalsV2",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response> getListForecastIntervalsV2Method() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request, com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response> getListForecastIntervalsV2Method;
    if ((getListForecastIntervalsV2Method = WFMGrpc.getListForecastIntervalsV2Method) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListForecastIntervalsV2Method = WFMGrpc.getListForecastIntervalsV2Method) == null) {
          WFMGrpc.getListForecastIntervalsV2Method = getListForecastIntervalsV2Method =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request, com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListForecastIntervalsV2"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListForecastIntervalsV2"))
              .build();
        }
      }
    }
    return getListForecastIntervalsV2Method;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getBuildRegressionForecastByIntervalMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildRegressionForecastByInterval",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval.class,
      methodType = io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getBuildRegressionForecastByIntervalMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq, com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> getBuildRegressionForecastByIntervalMethod;
    if ((getBuildRegressionForecastByIntervalMethod = WFMGrpc.getBuildRegressionForecastByIntervalMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildRegressionForecastByIntervalMethod = WFMGrpc.getBuildRegressionForecastByIntervalMethod) == null) {
          WFMGrpc.getBuildRegressionForecastByIntervalMethod = getBuildRegressionForecastByIntervalMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq, com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildRegressionForecastByInterval"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildRegressionForecastByInterval"))
              .build();
        }
      }
    }
    return getBuildRegressionForecastByIntervalMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes> getBuildRegressionForecastByIntervalWithStatsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildRegressionForecastByIntervalWithStats",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes> getBuildRegressionForecastByIntervalWithStatsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes> getBuildRegressionForecastByIntervalWithStatsMethod;
    if ((getBuildRegressionForecastByIntervalWithStatsMethod = WFMGrpc.getBuildRegressionForecastByIntervalWithStatsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildRegressionForecastByIntervalWithStatsMethod = WFMGrpc.getBuildRegressionForecastByIntervalWithStatsMethod) == null) {
          WFMGrpc.getBuildRegressionForecastByIntervalWithStatsMethod = getBuildRegressionForecastByIntervalWithStatsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildRegressionForecastByIntervalWithStats"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildRegressionForecastByIntervalWithStats"))
              .build();
        }
      }
    }
    return getBuildRegressionForecastByIntervalWithStatsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes> getListCallProfileTemplatesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListCallProfileTemplates",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes> getListCallProfileTemplatesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes> getListCallProfileTemplatesMethod;
    if ((getListCallProfileTemplatesMethod = WFMGrpc.getListCallProfileTemplatesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListCallProfileTemplatesMethod = WFMGrpc.getListCallProfileTemplatesMethod) == null) {
          WFMGrpc.getListCallProfileTemplatesMethod = getListCallProfileTemplatesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListCallProfileTemplates"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListCallProfileTemplates"))
              .build();
        }
      }
    }
    return getListCallProfileTemplatesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes> getUpsertRegressionForecastMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertRegressionForecast",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes> getUpsertRegressionForecastMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes> getUpsertRegressionForecastMethod;
    if ((getUpsertRegressionForecastMethod = WFMGrpc.getUpsertRegressionForecastMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertRegressionForecastMethod = WFMGrpc.getUpsertRegressionForecastMethod) == null) {
          WFMGrpc.getUpsertRegressionForecastMethod = getUpsertRegressionForecastMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertRegressionForecast"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertRegressionForecast"))
              .build();
        }
      }
    }
    return getUpsertRegressionForecastMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes> getUpsertForecastDataDeltaMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertForecastDataDelta",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes> getUpsertForecastDataDeltaMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes> getUpsertForecastDataDeltaMethod;
    if ((getUpsertForecastDataDeltaMethod = WFMGrpc.getUpsertForecastDataDeltaMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertForecastDataDeltaMethod = WFMGrpc.getUpsertForecastDataDeltaMethod) == null) {
          WFMGrpc.getUpsertForecastDataDeltaMethod = getUpsertForecastDataDeltaMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertForecastDataDelta"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertForecastDataDelta"))
              .build();
        }
      }
    }
    return getUpsertForecastDataDeltaMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes> getUpsertForecastDataDeltasMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertForecastDataDeltas",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes> getUpsertForecastDataDeltasMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes> getUpsertForecastDataDeltasMethod;
    if ((getUpsertForecastDataDeltasMethod = WFMGrpc.getUpsertForecastDataDeltasMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertForecastDataDeltasMethod = WFMGrpc.getUpsertForecastDataDeltasMethod) == null) {
          WFMGrpc.getUpsertForecastDataDeltasMethod = getUpsertForecastDataDeltasMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertForecastDataDeltas"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertForecastDataDeltas"))
              .build();
        }
      }
    }
    return getUpsertForecastDataDeltasMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes> getDeleteForecastIntervalsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteForecastIntervals",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes> getDeleteForecastIntervalsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes> getDeleteForecastIntervalsMethod;
    if ((getDeleteForecastIntervalsMethod = WFMGrpc.getDeleteForecastIntervalsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteForecastIntervalsMethod = WFMGrpc.getDeleteForecastIntervalsMethod) == null) {
          WFMGrpc.getDeleteForecastIntervalsMethod = getDeleteForecastIntervalsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteForecastIntervals"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteForecastIntervals"))
              .build();
        }
      }
    }
    return getDeleteForecastIntervalsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes> getListHistoricalDataForAllSkillProfilesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListHistoricalDataForAllSkillProfiles",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes> getListHistoricalDataForAllSkillProfilesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes> getListHistoricalDataForAllSkillProfilesMethod;
    if ((getListHistoricalDataForAllSkillProfilesMethod = WFMGrpc.getListHistoricalDataForAllSkillProfilesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListHistoricalDataForAllSkillProfilesMethod = WFMGrpc.getListHistoricalDataForAllSkillProfilesMethod) == null) {
          WFMGrpc.getListHistoricalDataForAllSkillProfilesMethod = getListHistoricalDataForAllSkillProfilesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListHistoricalDataForAllSkillProfiles"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListHistoricalDataForAllSkillProfiles"))
              .build();
        }
      }
    }
    return getListHistoricalDataForAllSkillProfilesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes> getBuildDOWAndMOYProfilesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildDOWAndMOYProfiles",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes> getBuildDOWAndMOYProfilesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes> getBuildDOWAndMOYProfilesMethod;
    if ((getBuildDOWAndMOYProfilesMethod = WFMGrpc.getBuildDOWAndMOYProfilesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildDOWAndMOYProfilesMethod = WFMGrpc.getBuildDOWAndMOYProfilesMethod) == null) {
          WFMGrpc.getBuildDOWAndMOYProfilesMethod = getBuildDOWAndMOYProfilesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildDOWAndMOYProfiles"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildDOWAndMOYProfiles"))
              .build();
        }
      }
    }
    return getBuildDOWAndMOYProfilesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes> getCalculateTrainingDataAveragesForSkillProfileMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CalculateTrainingDataAveragesForSkillProfile",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes> getCalculateTrainingDataAveragesForSkillProfileMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes> getCalculateTrainingDataAveragesForSkillProfileMethod;
    if ((getCalculateTrainingDataAveragesForSkillProfileMethod = WFMGrpc.getCalculateTrainingDataAveragesForSkillProfileMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCalculateTrainingDataAveragesForSkillProfileMethod = WFMGrpc.getCalculateTrainingDataAveragesForSkillProfileMethod) == null) {
          WFMGrpc.getCalculateTrainingDataAveragesForSkillProfileMethod = getCalculateTrainingDataAveragesForSkillProfileMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq, com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CalculateTrainingDataAveragesForSkillProfile"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CalculateTrainingDataAveragesForSkillProfile"))
              .build();
        }
      }
    }
    return getCalculateTrainingDataAveragesForSkillProfileMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes> getUpdateSkillProfileAveragesUsingHistoricalDataMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateSkillProfileAveragesUsingHistoricalData",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes> getUpdateSkillProfileAveragesUsingHistoricalDataMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes> getUpdateSkillProfileAveragesUsingHistoricalDataMethod;
    if ((getUpdateSkillProfileAveragesUsingHistoricalDataMethod = WFMGrpc.getUpdateSkillProfileAveragesUsingHistoricalDataMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateSkillProfileAveragesUsingHistoricalDataMethod = WFMGrpc.getUpdateSkillProfileAveragesUsingHistoricalDataMethod) == null) {
          WFMGrpc.getUpdateSkillProfileAveragesUsingHistoricalDataMethod = getUpdateSkillProfileAveragesUsingHistoricalDataMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateSkillProfileAveragesUsingHistoricalData"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateSkillProfileAveragesUsingHistoricalData"))
              .build();
        }
      }
    }
    return getUpdateSkillProfileAveragesUsingHistoricalDataMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes> getUpdateCallCenterNodeMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateCallCenterNode",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes> getUpdateCallCenterNodeMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes> getUpdateCallCenterNodeMethod;
    if ((getUpdateCallCenterNodeMethod = WFMGrpc.getUpdateCallCenterNodeMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateCallCenterNodeMethod = WFMGrpc.getUpdateCallCenterNodeMethod) == null) {
          WFMGrpc.getUpdateCallCenterNodeMethod = getUpdateCallCenterNodeMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateCallCenterNode"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateCallCenterNode"))
              .build();
        }
      }
    }
    return getUpdateCallCenterNodeMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes> getCreateClientNodeMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateClientNode",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes> getCreateClientNodeMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes> getCreateClientNodeMethod;
    if ((getCreateClientNodeMethod = WFMGrpc.getCreateClientNodeMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateClientNodeMethod = WFMGrpc.getCreateClientNodeMethod) == null) {
          WFMGrpc.getCreateClientNodeMethod = getCreateClientNodeMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateClientNode"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateClientNode"))
              .build();
        }
      }
    }
    return getCreateClientNodeMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes> getUpdateClientNodeMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateClientNode",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes> getUpdateClientNodeMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes> getUpdateClientNodeMethod;
    if ((getUpdateClientNodeMethod = WFMGrpc.getUpdateClientNodeMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateClientNodeMethod = WFMGrpc.getUpdateClientNodeMethod) == null) {
          WFMGrpc.getUpdateClientNodeMethod = getUpdateClientNodeMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateClientNode"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateClientNode"))
              .build();
        }
      }
    }
    return getUpdateClientNodeMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes> getCreateLocationNodeMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateLocationNode",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes> getCreateLocationNodeMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes> getCreateLocationNodeMethod;
    if ((getCreateLocationNodeMethod = WFMGrpc.getCreateLocationNodeMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateLocationNodeMethod = WFMGrpc.getCreateLocationNodeMethod) == null) {
          WFMGrpc.getCreateLocationNodeMethod = getCreateLocationNodeMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateLocationNode"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateLocationNode"))
              .build();
        }
      }
    }
    return getCreateLocationNodeMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes> getUpdateLocationNodeMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateLocationNode",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes> getUpdateLocationNodeMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes> getUpdateLocationNodeMethod;
    if ((getUpdateLocationNodeMethod = WFMGrpc.getUpdateLocationNodeMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateLocationNodeMethod = WFMGrpc.getUpdateLocationNodeMethod) == null) {
          WFMGrpc.getUpdateLocationNodeMethod = getUpdateLocationNodeMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateLocationNode"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateLocationNode"))
              .build();
        }
      }
    }
    return getUpdateLocationNodeMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes> getCreateProgramNodeMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateProgramNode",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes> getCreateProgramNodeMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes> getCreateProgramNodeMethod;
    if ((getCreateProgramNodeMethod = WFMGrpc.getCreateProgramNodeMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateProgramNodeMethod = WFMGrpc.getCreateProgramNodeMethod) == null) {
          WFMGrpc.getCreateProgramNodeMethod = getCreateProgramNodeMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateProgramNode"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateProgramNode"))
              .build();
        }
      }
    }
    return getCreateProgramNodeMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes> getUpdateProgramNodeMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateProgramNode",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes> getUpdateProgramNodeMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes> getUpdateProgramNodeMethod;
    if ((getUpdateProgramNodeMethod = WFMGrpc.getUpdateProgramNodeMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateProgramNodeMethod = WFMGrpc.getUpdateProgramNodeMethod) == null) {
          WFMGrpc.getUpdateProgramNodeMethod = getUpdateProgramNodeMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateProgramNode"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateProgramNode"))
              .build();
        }
      }
    }
    return getUpdateProgramNodeMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes> getListProgramNodesBySidMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListProgramNodesBySid",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes> getListProgramNodesBySidMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes> getListProgramNodesBySidMethod;
    if ((getListProgramNodesBySidMethod = WFMGrpc.getListProgramNodesBySidMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListProgramNodesBySidMethod = WFMGrpc.getListProgramNodesBySidMethod) == null) {
          WFMGrpc.getListProgramNodesBySidMethod = getListProgramNodesBySidMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListProgramNodesBySid"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListProgramNodesBySid"))
              .build();
        }
      }
    }
    return getListProgramNodesBySidMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes> getCreateConstraintRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateConstraintRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes> getCreateConstraintRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes> getCreateConstraintRuleMethod;
    if ((getCreateConstraintRuleMethod = WFMGrpc.getCreateConstraintRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateConstraintRuleMethod = WFMGrpc.getCreateConstraintRuleMethod) == null) {
          WFMGrpc.getCreateConstraintRuleMethod = getCreateConstraintRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateConstraintRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateConstraintRule"))
              .build();
        }
      }
    }
    return getCreateConstraintRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes> getUpdateConstraintRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateConstraintRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes> getUpdateConstraintRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes> getUpdateConstraintRuleMethod;
    if ((getUpdateConstraintRuleMethod = WFMGrpc.getUpdateConstraintRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateConstraintRuleMethod = WFMGrpc.getUpdateConstraintRuleMethod) == null) {
          WFMGrpc.getUpdateConstraintRuleMethod = getUpdateConstraintRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateConstraintRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateConstraintRule"))
              .build();
        }
      }
    }
    return getUpdateConstraintRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes> getDeleteConstraintRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteConstraintRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes> getDeleteConstraintRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes> getDeleteConstraintRuleMethod;
    if ((getDeleteConstraintRuleMethod = WFMGrpc.getDeleteConstraintRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteConstraintRuleMethod = WFMGrpc.getDeleteConstraintRuleMethod) == null) {
          WFMGrpc.getDeleteConstraintRuleMethod = getDeleteConstraintRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteConstraintRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteConstraintRule"))
              .build();
        }
      }
    }
    return getDeleteConstraintRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes> getCreateNonSkillActivityMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateNonSkillActivity",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes> getCreateNonSkillActivityMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes> getCreateNonSkillActivityMethod;
    if ((getCreateNonSkillActivityMethod = WFMGrpc.getCreateNonSkillActivityMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateNonSkillActivityMethod = WFMGrpc.getCreateNonSkillActivityMethod) == null) {
          WFMGrpc.getCreateNonSkillActivityMethod = getCreateNonSkillActivityMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateNonSkillActivity"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateNonSkillActivity"))
              .build();
        }
      }
    }
    return getCreateNonSkillActivityMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes> getUpdateNonSkillActivityMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateNonSkillActivity",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes> getUpdateNonSkillActivityMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes> getUpdateNonSkillActivityMethod;
    if ((getUpdateNonSkillActivityMethod = WFMGrpc.getUpdateNonSkillActivityMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateNonSkillActivityMethod = WFMGrpc.getUpdateNonSkillActivityMethod) == null) {
          WFMGrpc.getUpdateNonSkillActivityMethod = getUpdateNonSkillActivityMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateNonSkillActivity"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateNonSkillActivity"))
              .build();
        }
      }
    }
    return getUpdateNonSkillActivityMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes> getListNonSkillActivitiesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListNonSkillActivities",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes> getListNonSkillActivitiesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes> getListNonSkillActivitiesMethod;
    if ((getListNonSkillActivitiesMethod = WFMGrpc.getListNonSkillActivitiesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListNonSkillActivitiesMethod = WFMGrpc.getListNonSkillActivitiesMethod) == null) {
          WFMGrpc.getListNonSkillActivitiesMethod = getListNonSkillActivitiesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListNonSkillActivities"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListNonSkillActivities"))
              .build();
        }
      }
    }
    return getListNonSkillActivitiesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes> getListNonSkillActivityAssociationsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListNonSkillActivityAssociations",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes> getListNonSkillActivityAssociationsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes> getListNonSkillActivityAssociationsMethod;
    if ((getListNonSkillActivityAssociationsMethod = WFMGrpc.getListNonSkillActivityAssociationsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListNonSkillActivityAssociationsMethod = WFMGrpc.getListNonSkillActivityAssociationsMethod) == null) {
          WFMGrpc.getListNonSkillActivityAssociationsMethod = getListNonSkillActivityAssociationsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListNonSkillActivityAssociations"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListNonSkillActivityAssociations"))
              .build();
        }
      }
    }
    return getListNonSkillActivityAssociationsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes> getListCandidateSchedulingActivitiesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListCandidateSchedulingActivities",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes> getListCandidateSchedulingActivitiesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes> getListCandidateSchedulingActivitiesMethod;
    if ((getListCandidateSchedulingActivitiesMethod = WFMGrpc.getListCandidateSchedulingActivitiesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListCandidateSchedulingActivitiesMethod = WFMGrpc.getListCandidateSchedulingActivitiesMethod) == null) {
          WFMGrpc.getListCandidateSchedulingActivitiesMethod = getListCandidateSchedulingActivitiesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListCandidateSchedulingActivities"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListCandidateSchedulingActivities"))
              .build();
        }
      }
    }
    return getListCandidateSchedulingActivitiesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse> getListSchedulingActivitiesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListSchedulingActivities",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse> getListSchedulingActivitiesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse> getListSchedulingActivitiesMethod;
    if ((getListSchedulingActivitiesMethod = WFMGrpc.getListSchedulingActivitiesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListSchedulingActivitiesMethod = WFMGrpc.getListSchedulingActivitiesMethod) == null) {
          WFMGrpc.getListSchedulingActivitiesMethod = getListSchedulingActivitiesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListSchedulingActivities"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListSchedulingActivities"))
              .build();
        }
      }
    }
    return getListSchedulingActivitiesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes> getGetOnCallSchedulingActivityMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetOnCallSchedulingActivity",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes> getGetOnCallSchedulingActivityMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes> getGetOnCallSchedulingActivityMethod;
    if ((getGetOnCallSchedulingActivityMethod = WFMGrpc.getGetOnCallSchedulingActivityMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetOnCallSchedulingActivityMethod = WFMGrpc.getGetOnCallSchedulingActivityMethod) == null) {
          WFMGrpc.getGetOnCallSchedulingActivityMethod = getGetOnCallSchedulingActivityMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetOnCallSchedulingActivity"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetOnCallSchedulingActivity"))
              .build();
        }
      }
    }
    return getGetOnCallSchedulingActivityMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse> getListPatternsForSchedulingActivityClassificationsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListPatternsForSchedulingActivityClassifications",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse> getListPatternsForSchedulingActivityClassificationsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse> getListPatternsForSchedulingActivityClassificationsMethod;
    if ((getListPatternsForSchedulingActivityClassificationsMethod = WFMGrpc.getListPatternsForSchedulingActivityClassificationsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListPatternsForSchedulingActivityClassificationsMethod = WFMGrpc.getListPatternsForSchedulingActivityClassificationsMethod) == null) {
          WFMGrpc.getListPatternsForSchedulingActivityClassificationsMethod = getListPatternsForSchedulingActivityClassificationsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListPatternsForSchedulingActivityClassifications"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListPatternsForSchedulingActivityClassifications"))
              .build();
        }
      }
    }
    return getListPatternsForSchedulingActivityClassificationsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse> getGetTimeOffSchedulingActivityMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetTimeOffSchedulingActivity",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse> getGetTimeOffSchedulingActivityMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest, com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse> getGetTimeOffSchedulingActivityMethod;
    if ((getGetTimeOffSchedulingActivityMethod = WFMGrpc.getGetTimeOffSchedulingActivityMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetTimeOffSchedulingActivityMethod = WFMGrpc.getGetTimeOffSchedulingActivityMethod) == null) {
          WFMGrpc.getGetTimeOffSchedulingActivityMethod = getGetTimeOffSchedulingActivityMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest, com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetTimeOffSchedulingActivity"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetTimeOffSchedulingActivity"))
              .build();
        }
      }
    }
    return getGetTimeOffSchedulingActivityMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes> getCreateAgentGroupMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateAgentGroup",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes> getCreateAgentGroupMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes> getCreateAgentGroupMethod;
    if ((getCreateAgentGroupMethod = WFMGrpc.getCreateAgentGroupMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateAgentGroupMethod = WFMGrpc.getCreateAgentGroupMethod) == null) {
          WFMGrpc.getCreateAgentGroupMethod = getCreateAgentGroupMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateAgentGroup"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateAgentGroup"))
              .build();
        }
      }
    }
    return getCreateAgentGroupMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse> getListAgentScheduleGroupsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListAgentScheduleGroups",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse> getListAgentScheduleGroupsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse> getListAgentScheduleGroupsMethod;
    if ((getListAgentScheduleGroupsMethod = WFMGrpc.getListAgentScheduleGroupsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListAgentScheduleGroupsMethod = WFMGrpc.getListAgentScheduleGroupsMethod) == null) {
          WFMGrpc.getListAgentScheduleGroupsMethod = getListAgentScheduleGroupsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListAgentScheduleGroups"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListAgentScheduleGroups"))
              .build();
        }
      }
    }
    return getListAgentScheduleGroupsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes> getUpdateAgentGroupMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateAgentGroup",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes> getUpdateAgentGroupMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes> getUpdateAgentGroupMethod;
    if ((getUpdateAgentGroupMethod = WFMGrpc.getUpdateAgentGroupMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateAgentGroupMethod = WFMGrpc.getUpdateAgentGroupMethod) == null) {
          WFMGrpc.getUpdateAgentGroupMethod = getUpdateAgentGroupMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateAgentGroup"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateAgentGroup"))
              .build();
        }
      }
    }
    return getUpdateAgentGroupMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse> getCreateUnassignedWFMAgentMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateUnassignedWFMAgent",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse> getCreateUnassignedWFMAgentMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse> getCreateUnassignedWFMAgentMethod;
    if ((getCreateUnassignedWFMAgentMethod = WFMGrpc.getCreateUnassignedWFMAgentMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateUnassignedWFMAgentMethod = WFMGrpc.getCreateUnassignedWFMAgentMethod) == null) {
          WFMGrpc.getCreateUnassignedWFMAgentMethod = getCreateUnassignedWFMAgentMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateUnassignedWFMAgent"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateUnassignedWFMAgent"))
              .build();
        }
      }
    }
    return getCreateUnassignedWFMAgentMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes> getUpdateWFMAgentMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateWFMAgent",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes> getUpdateWFMAgentMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes> getUpdateWFMAgentMethod;
    if ((getUpdateWFMAgentMethod = WFMGrpc.getUpdateWFMAgentMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateWFMAgentMethod = WFMGrpc.getUpdateWFMAgentMethod) == null) {
          WFMGrpc.getUpdateWFMAgentMethod = getUpdateWFMAgentMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateWFMAgent"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateWFMAgent"))
              .build();
        }
      }
    }
    return getUpdateWFMAgentMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes> getListAllWFMAgentsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListAllWFMAgents",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes> getListAllWFMAgentsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes> getListAllWFMAgentsMethod;
    if ((getListAllWFMAgentsMethod = WFMGrpc.getListAllWFMAgentsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListAllWFMAgentsMethod = WFMGrpc.getListAllWFMAgentsMethod) == null) {
          WFMGrpc.getListAllWFMAgentsMethod = getListAllWFMAgentsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListAllWFMAgents"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListAllWFMAgents"))
              .build();
        }
      }
    }
    return getListAllWFMAgentsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes> getListCandidateWFMAgentsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListCandidateWFMAgents",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes> getListCandidateWFMAgentsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes> getListCandidateWFMAgentsMethod;
    if ((getListCandidateWFMAgentsMethod = WFMGrpc.getListCandidateWFMAgentsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListCandidateWFMAgentsMethod = WFMGrpc.getListCandidateWFMAgentsMethod) == null) {
          WFMGrpc.getListCandidateWFMAgentsMethod = getListCandidateWFMAgentsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListCandidateWFMAgents"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListCandidateWFMAgents"))
              .build();
        }
      }
    }
    return getListCandidateWFMAgentsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes> getListUngroupedWFMAgentsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListUngroupedWFMAgents",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes> getListUngroupedWFMAgentsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes> getListUngroupedWFMAgentsMethod;
    if ((getListUngroupedWFMAgentsMethod = WFMGrpc.getListUngroupedWFMAgentsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListUngroupedWFMAgentsMethod = WFMGrpc.getListUngroupedWFMAgentsMethod) == null) {
          WFMGrpc.getListUngroupedWFMAgentsMethod = getListUngroupedWFMAgentsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListUngroupedWFMAgents"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListUngroupedWFMAgents"))
              .build();
        }
      }
    }
    return getListUngroupedWFMAgentsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes> getListWFMAgentSidsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListWFMAgentSids",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes> getListWFMAgentSidsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes> getListWFMAgentSidsMethod;
    if ((getListWFMAgentSidsMethod = WFMGrpc.getListWFMAgentSidsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListWFMAgentSidsMethod = WFMGrpc.getListWFMAgentSidsMethod) == null) {
          WFMGrpc.getListWFMAgentSidsMethod = getListWFMAgentSidsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListWFMAgentSids"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListWFMAgentSids"))
              .build();
        }
      }
    }
    return getListWFMAgentSidsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse> getListUnassignedWFMAgentsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListUnassignedWFMAgents",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse> getListUnassignedWFMAgentsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse> getListUnassignedWFMAgentsMethod;
    if ((getListUnassignedWFMAgentsMethod = WFMGrpc.getListUnassignedWFMAgentsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListUnassignedWFMAgentsMethod = WFMGrpc.getListUnassignedWFMAgentsMethod) == null) {
          WFMGrpc.getListUnassignedWFMAgentsMethod = getListUnassignedWFMAgentsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListUnassignedWFMAgents"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListUnassignedWFMAgents"))
              .build();
        }
      }
    }
    return getListUnassignedWFMAgentsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes> getListWFMAgentsAssociatedWithAgentGroupMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListWFMAgentsAssociatedWithAgentGroup",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes> getListWFMAgentsAssociatedWithAgentGroupMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes> getListWFMAgentsAssociatedWithAgentGroupMethod;
    if ((getListWFMAgentsAssociatedWithAgentGroupMethod = WFMGrpc.getListWFMAgentsAssociatedWithAgentGroupMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListWFMAgentsAssociatedWithAgentGroupMethod = WFMGrpc.getListWFMAgentsAssociatedWithAgentGroupMethod) == null) {
          WFMGrpc.getListWFMAgentsAssociatedWithAgentGroupMethod = getListWFMAgentsAssociatedWithAgentGroupMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListWFMAgentsAssociatedWithAgentGroup"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListWFMAgentsAssociatedWithAgentGroup"))
              .build();
        }
      }
    }
    return getListWFMAgentsAssociatedWithAgentGroupMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes> getCreateWFMAgentMembershipsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateWFMAgentMemberships",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes> getCreateWFMAgentMembershipsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes> getCreateWFMAgentMembershipsMethod;
    if ((getCreateWFMAgentMembershipsMethod = WFMGrpc.getCreateWFMAgentMembershipsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateWFMAgentMembershipsMethod = WFMGrpc.getCreateWFMAgentMembershipsMethod) == null) {
          WFMGrpc.getCreateWFMAgentMembershipsMethod = getCreateWFMAgentMembershipsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateWFMAgentMemberships"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateWFMAgentMemberships"))
              .build();
        }
      }
    }
    return getCreateWFMAgentMembershipsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse> getCopyWFMAgentMembershipsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CopyWFMAgentMemberships",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse> getCopyWFMAgentMembershipsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse> getCopyWFMAgentMembershipsMethod;
    if ((getCopyWFMAgentMembershipsMethod = WFMGrpc.getCopyWFMAgentMembershipsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCopyWFMAgentMembershipsMethod = WFMGrpc.getCopyWFMAgentMembershipsMethod) == null) {
          WFMGrpc.getCopyWFMAgentMembershipsMethod = getCopyWFMAgentMembershipsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CopyWFMAgentMemberships"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CopyWFMAgentMemberships"))
              .build();
        }
      }
    }
    return getCopyWFMAgentMembershipsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes> getDeleteWFMAgentMembershipsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteWFMAgentMemberships",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes> getDeleteWFMAgentMembershipsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes> getDeleteWFMAgentMembershipsMethod;
    if ((getDeleteWFMAgentMembershipsMethod = WFMGrpc.getDeleteWFMAgentMembershipsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteWFMAgentMembershipsMethod = WFMGrpc.getDeleteWFMAgentMembershipsMethod) == null) {
          WFMGrpc.getDeleteWFMAgentMembershipsMethod = getDeleteWFMAgentMembershipsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteWFMAgentMemberships"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteWFMAgentMemberships"))
              .build();
        }
      }
    }
    return getDeleteWFMAgentMembershipsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes> getDeleteWFMAgentsMembershipsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteWFMAgentsMemberships",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes> getDeleteWFMAgentsMembershipsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes> getDeleteWFMAgentsMembershipsMethod;
    if ((getDeleteWFMAgentsMembershipsMethod = WFMGrpc.getDeleteWFMAgentsMembershipsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteWFMAgentsMembershipsMethod = WFMGrpc.getDeleteWFMAgentsMembershipsMethod) == null) {
          WFMGrpc.getDeleteWFMAgentsMembershipsMethod = getDeleteWFMAgentsMembershipsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteWFMAgentsMemberships"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteWFMAgentsMemberships"))
              .build();
        }
      }
    }
    return getDeleteWFMAgentsMembershipsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse> getRemoveAgentFromFutureShiftsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "RemoveAgentFromFutureShifts",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse> getRemoveAgentFromFutureShiftsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse> getRemoveAgentFromFutureShiftsMethod;
    if ((getRemoveAgentFromFutureShiftsMethod = WFMGrpc.getRemoveAgentFromFutureShiftsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getRemoveAgentFromFutureShiftsMethod = WFMGrpc.getRemoveAgentFromFutureShiftsMethod) == null) {
          WFMGrpc.getRemoveAgentFromFutureShiftsMethod = getRemoveAgentFromFutureShiftsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "RemoveAgentFromFutureShifts"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("RemoveAgentFromFutureShifts"))
              .build();
        }
      }
    }
    return getRemoveAgentFromFutureShiftsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes> getBuildAgentDiagnosticsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildAgentDiagnostics",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes> getBuildAgentDiagnosticsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes> getBuildAgentDiagnosticsMethod;
    if ((getBuildAgentDiagnosticsMethod = WFMGrpc.getBuildAgentDiagnosticsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildAgentDiagnosticsMethod = WFMGrpc.getBuildAgentDiagnosticsMethod) == null) {
          WFMGrpc.getBuildAgentDiagnosticsMethod = getBuildAgentDiagnosticsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildAgentDiagnostics"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildAgentDiagnostics"))
              .build();
        }
      }
    }
    return getBuildAgentDiagnosticsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes> getCreateShiftTemplateMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateShiftTemplate",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes> getCreateShiftTemplateMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes> getCreateShiftTemplateMethod;
    if ((getCreateShiftTemplateMethod = WFMGrpc.getCreateShiftTemplateMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateShiftTemplateMethod = WFMGrpc.getCreateShiftTemplateMethod) == null) {
          WFMGrpc.getCreateShiftTemplateMethod = getCreateShiftTemplateMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateShiftTemplate"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateShiftTemplate"))
              .build();
        }
      }
    }
    return getCreateShiftTemplateMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes> getUpdateShiftTemplateMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateShiftTemplate",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes> getUpdateShiftTemplateMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes> getUpdateShiftTemplateMethod;
    if ((getUpdateShiftTemplateMethod = WFMGrpc.getUpdateShiftTemplateMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateShiftTemplateMethod = WFMGrpc.getUpdateShiftTemplateMethod) == null) {
          WFMGrpc.getUpdateShiftTemplateMethod = getUpdateShiftTemplateMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateShiftTemplate"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateShiftTemplate"))
              .build();
        }
      }
    }
    return getUpdateShiftTemplateMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes> getListShiftTemplatesBySidsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListShiftTemplatesBySids",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes> getListShiftTemplatesBySidsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes> getListShiftTemplatesBySidsMethod;
    if ((getListShiftTemplatesBySidsMethod = WFMGrpc.getListShiftTemplatesBySidsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListShiftTemplatesBySidsMethod = WFMGrpc.getListShiftTemplatesBySidsMethod) == null) {
          WFMGrpc.getListShiftTemplatesBySidsMethod = getListShiftTemplatesBySidsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListShiftTemplatesBySids"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListShiftTemplatesBySids"))
              .build();
        }
      }
    }
    return getListShiftTemplatesBySidsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes> getBuildShiftTemplateDiagnosticsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildShiftTemplateDiagnostics",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes> getBuildShiftTemplateDiagnosticsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes> getBuildShiftTemplateDiagnosticsMethod;
    if ((getBuildShiftTemplateDiagnosticsMethod = WFMGrpc.getBuildShiftTemplateDiagnosticsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildShiftTemplateDiagnosticsMethod = WFMGrpc.getBuildShiftTemplateDiagnosticsMethod) == null) {
          WFMGrpc.getBuildShiftTemplateDiagnosticsMethod = getBuildShiftTemplateDiagnosticsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildShiftTemplateDiagnostics"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildShiftTemplateDiagnostics"))
              .build();
        }
      }
    }
    return getBuildShiftTemplateDiagnosticsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes> getCreatePlacementRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreatePlacementRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes> getCreatePlacementRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes> getCreatePlacementRuleMethod;
    if ((getCreatePlacementRuleMethod = WFMGrpc.getCreatePlacementRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreatePlacementRuleMethod = WFMGrpc.getCreatePlacementRuleMethod) == null) {
          WFMGrpc.getCreatePlacementRuleMethod = getCreatePlacementRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreatePlacementRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreatePlacementRule"))
              .build();
        }
      }
    }
    return getCreatePlacementRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes> getUpdatePlacementRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdatePlacementRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes> getUpdatePlacementRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes> getUpdatePlacementRuleMethod;
    if ((getUpdatePlacementRuleMethod = WFMGrpc.getUpdatePlacementRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdatePlacementRuleMethod = WFMGrpc.getUpdatePlacementRuleMethod) == null) {
          WFMGrpc.getUpdatePlacementRuleMethod = getUpdatePlacementRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdatePlacementRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdatePlacementRule"))
              .build();
        }
      }
    }
    return getUpdatePlacementRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes> getDeletePlacementRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeletePlacementRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes> getDeletePlacementRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes> getDeletePlacementRuleMethod;
    if ((getDeletePlacementRuleMethod = WFMGrpc.getDeletePlacementRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeletePlacementRuleMethod = WFMGrpc.getDeletePlacementRuleMethod) == null) {
          WFMGrpc.getDeletePlacementRuleMethod = getDeletePlacementRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeletePlacementRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeletePlacementRule"))
              .build();
        }
      }
    }
    return getDeletePlacementRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes> getCreateOpenTimesPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateOpenTimesPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes> getCreateOpenTimesPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes> getCreateOpenTimesPatternMethod;
    if ((getCreateOpenTimesPatternMethod = WFMGrpc.getCreateOpenTimesPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateOpenTimesPatternMethod = WFMGrpc.getCreateOpenTimesPatternMethod) == null) {
          WFMGrpc.getCreateOpenTimesPatternMethod = getCreateOpenTimesPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateOpenTimesPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateOpenTimesPattern"))
              .build();
        }
      }
    }
    return getCreateOpenTimesPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes> getUpdateOpenTimesPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateOpenTimesPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes> getUpdateOpenTimesPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes> getUpdateOpenTimesPatternMethod;
    if ((getUpdateOpenTimesPatternMethod = WFMGrpc.getUpdateOpenTimesPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateOpenTimesPatternMethod = WFMGrpc.getUpdateOpenTimesPatternMethod) == null) {
          WFMGrpc.getUpdateOpenTimesPatternMethod = getUpdateOpenTimesPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateOpenTimesPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateOpenTimesPattern"))
              .build();
        }
      }
    }
    return getUpdateOpenTimesPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes> getDeleteOpenTimesPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteOpenTimesPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes> getDeleteOpenTimesPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes> getDeleteOpenTimesPatternMethod;
    if ((getDeleteOpenTimesPatternMethod = WFMGrpc.getDeleteOpenTimesPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteOpenTimesPatternMethod = WFMGrpc.getDeleteOpenTimesPatternMethod) == null) {
          WFMGrpc.getDeleteOpenTimesPatternMethod = getDeleteOpenTimesPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteOpenTimesPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteOpenTimesPattern"))
              .build();
        }
      }
    }
    return getDeleteOpenTimesPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes> getGetOpenTimesBitmapsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetOpenTimesBitmaps",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes> getGetOpenTimesBitmapsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes> getGetOpenTimesBitmapsMethod;
    if ((getGetOpenTimesBitmapsMethod = WFMGrpc.getGetOpenTimesBitmapsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetOpenTimesBitmapsMethod = WFMGrpc.getGetOpenTimesBitmapsMethod) == null) {
          WFMGrpc.getGetOpenTimesBitmapsMethod = getGetOpenTimesBitmapsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetOpenTimesBitmaps"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetOpenTimesBitmaps"))
              .build();
        }
      }
    }
    return getGetOpenTimesBitmapsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse> getListOpenDateRangesForNodeOpenTimesBitmapsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListOpenDateRangesForNodeOpenTimesBitmaps",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse> getListOpenDateRangesForNodeOpenTimesBitmapsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse> getListOpenDateRangesForNodeOpenTimesBitmapsMethod;
    if ((getListOpenDateRangesForNodeOpenTimesBitmapsMethod = WFMGrpc.getListOpenDateRangesForNodeOpenTimesBitmapsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListOpenDateRangesForNodeOpenTimesBitmapsMethod = WFMGrpc.getListOpenDateRangesForNodeOpenTimesBitmapsMethod) == null) {
          WFMGrpc.getListOpenDateRangesForNodeOpenTimesBitmapsMethod = getListOpenDateRangesForNodeOpenTimesBitmapsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListOpenDateRangesForNodeOpenTimesBitmaps"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListOpenDateRangesForNodeOpenTimesBitmaps"))
              .build();
        }
      }
    }
    return getListOpenDateRangesForNodeOpenTimesBitmapsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes> getCreateAgentAvailabilityPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateAgentAvailabilityPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes> getCreateAgentAvailabilityPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes> getCreateAgentAvailabilityPatternMethod;
    if ((getCreateAgentAvailabilityPatternMethod = WFMGrpc.getCreateAgentAvailabilityPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateAgentAvailabilityPatternMethod = WFMGrpc.getCreateAgentAvailabilityPatternMethod) == null) {
          WFMGrpc.getCreateAgentAvailabilityPatternMethod = getCreateAgentAvailabilityPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateAgentAvailabilityPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateAgentAvailabilityPattern"))
              .build();
        }
      }
    }
    return getCreateAgentAvailabilityPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes> getUpdateAgentAvailabilityPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateAgentAvailabilityPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes> getUpdateAgentAvailabilityPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes> getUpdateAgentAvailabilityPatternMethod;
    if ((getUpdateAgentAvailabilityPatternMethod = WFMGrpc.getUpdateAgentAvailabilityPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateAgentAvailabilityPatternMethod = WFMGrpc.getUpdateAgentAvailabilityPatternMethod) == null) {
          WFMGrpc.getUpdateAgentAvailabilityPatternMethod = getUpdateAgentAvailabilityPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateAgentAvailabilityPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateAgentAvailabilityPattern"))
              .build();
        }
      }
    }
    return getUpdateAgentAvailabilityPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes> getDeleteAgentAvailabilityPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteAgentAvailabilityPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes> getDeleteAgentAvailabilityPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes> getDeleteAgentAvailabilityPatternMethod;
    if ((getDeleteAgentAvailabilityPatternMethod = WFMGrpc.getDeleteAgentAvailabilityPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteAgentAvailabilityPatternMethod = WFMGrpc.getDeleteAgentAvailabilityPatternMethod) == null) {
          WFMGrpc.getDeleteAgentAvailabilityPatternMethod = getDeleteAgentAvailabilityPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteAgentAvailabilityPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteAgentAvailabilityPattern"))
              .build();
        }
      }
    }
    return getDeleteAgentAvailabilityPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes> getGetAvailabilityBitmapsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetAvailabilityBitmaps",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes> getGetAvailabilityBitmapsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes> getGetAvailabilityBitmapsMethod;
    if ((getGetAvailabilityBitmapsMethod = WFMGrpc.getGetAvailabilityBitmapsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetAvailabilityBitmapsMethod = WFMGrpc.getGetAvailabilityBitmapsMethod) == null) {
          WFMGrpc.getGetAvailabilityBitmapsMethod = getGetAvailabilityBitmapsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetAvailabilityBitmaps"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetAvailabilityBitmaps"))
              .build();
        }
      }
    }
    return getGetAvailabilityBitmapsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes> getUpsertNonSkillActivityAssociationMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertNonSkillActivityAssociation",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes> getUpsertNonSkillActivityAssociationMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes> getUpsertNonSkillActivityAssociationMethod;
    if ((getUpsertNonSkillActivityAssociationMethod = WFMGrpc.getUpsertNonSkillActivityAssociationMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertNonSkillActivityAssociationMethod = WFMGrpc.getUpsertNonSkillActivityAssociationMethod) == null) {
          WFMGrpc.getUpsertNonSkillActivityAssociationMethod = getUpsertNonSkillActivityAssociationMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertNonSkillActivityAssociation"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertNonSkillActivityAssociation"))
              .build();
        }
      }
    }
    return getUpsertNonSkillActivityAssociationMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes> getCreateSkillProficienciesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateSkillProficiencies",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes> getCreateSkillProficienciesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes> getCreateSkillProficienciesMethod;
    if ((getCreateSkillProficienciesMethod = WFMGrpc.getCreateSkillProficienciesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateSkillProficienciesMethod = WFMGrpc.getCreateSkillProficienciesMethod) == null) {
          WFMGrpc.getCreateSkillProficienciesMethod = getCreateSkillProficienciesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateSkillProficiencies"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateSkillProficiencies"))
              .build();
        }
      }
    }
    return getCreateSkillProficienciesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes> getUpdateSkillProficienciesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateSkillProficiencies",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes> getUpdateSkillProficienciesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes> getUpdateSkillProficienciesMethod;
    if ((getUpdateSkillProficienciesMethod = WFMGrpc.getUpdateSkillProficienciesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateSkillProficienciesMethod = WFMGrpc.getUpdateSkillProficienciesMethod) == null) {
          WFMGrpc.getUpdateSkillProficienciesMethod = getUpdateSkillProficienciesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateSkillProficiencies"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateSkillProficiencies"))
              .build();
        }
      }
    }
    return getUpdateSkillProficienciesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes> getDeleteSkillProficiencyMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteSkillProficiency",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes> getDeleteSkillProficiencyMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes> getDeleteSkillProficiencyMethod;
    if ((getDeleteSkillProficiencyMethod = WFMGrpc.getDeleteSkillProficiencyMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteSkillProficiencyMethod = WFMGrpc.getDeleteSkillProficiencyMethod) == null) {
          WFMGrpc.getDeleteSkillProficiencyMethod = getDeleteSkillProficiencyMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteSkillProficiency"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteSkillProficiency"))
              .build();
        }
      }
    }
    return getDeleteSkillProficiencyMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes> getCopyScenarioMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CopyScenario",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes> getCopyScenarioMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq, com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes> getCopyScenarioMethod;
    if ((getCopyScenarioMethod = WFMGrpc.getCopyScenarioMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCopyScenarioMethod = WFMGrpc.getCopyScenarioMethod) == null) {
          WFMGrpc.getCopyScenarioMethod = getCopyScenarioMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq, com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CopyScenario"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CopyScenario"))
              .build();
        }
      }
    }
    return getCopyScenarioMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes> getCreateScheduleScenarioWithNodesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateScheduleScenarioWithNodes",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes> getCreateScheduleScenarioWithNodesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes> getCreateScheduleScenarioWithNodesMethod;
    if ((getCreateScheduleScenarioWithNodesMethod = WFMGrpc.getCreateScheduleScenarioWithNodesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateScheduleScenarioWithNodesMethod = WFMGrpc.getCreateScheduleScenarioWithNodesMethod) == null) {
          WFMGrpc.getCreateScheduleScenarioWithNodesMethod = getCreateScheduleScenarioWithNodesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateScheduleScenarioWithNodes"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateScheduleScenarioWithNodes"))
              .build();
        }
      }
    }
    return getCreateScheduleScenarioWithNodesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes> getUpdateScheduleScenarioMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateScheduleScenario",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes> getUpdateScheduleScenarioMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes> getUpdateScheduleScenarioMethod;
    if ((getUpdateScheduleScenarioMethod = WFMGrpc.getUpdateScheduleScenarioMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateScheduleScenarioMethod = WFMGrpc.getUpdateScheduleScenarioMethod) == null) {
          WFMGrpc.getUpdateScheduleScenarioMethod = getUpdateScheduleScenarioMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateScheduleScenario"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateScheduleScenario"))
              .build();
        }
      }
    }
    return getUpdateScheduleScenarioMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes> getListConfigEntitiesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListConfigEntities",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes> getListConfigEntitiesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes> getListConfigEntitiesMethod;
    if ((getListConfigEntitiesMethod = WFMGrpc.getListConfigEntitiesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListConfigEntitiesMethod = WFMGrpc.getListConfigEntitiesMethod) == null) {
          WFMGrpc.getListConfigEntitiesMethod = getListConfigEntitiesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListConfigEntities"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListConfigEntities"))
              .build();
        }
      }
    }
    return getListConfigEntitiesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes> getDeleteShiftInstancesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteShiftInstances",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes> getDeleteShiftInstancesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes> getDeleteShiftInstancesMethod;
    if ((getDeleteShiftInstancesMethod = WFMGrpc.getDeleteShiftInstancesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteShiftInstancesMethod = WFMGrpc.getDeleteShiftInstancesMethod) == null) {
          WFMGrpc.getDeleteShiftInstancesMethod = getDeleteShiftInstancesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteShiftInstances"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteShiftInstances"))
              .build();
        }
      }
    }
    return getDeleteShiftInstancesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes> getBuildNodeDiagnosticsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildNodeDiagnostics",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes> getBuildNodeDiagnosticsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes> getBuildNodeDiagnosticsMethod;
    if ((getBuildNodeDiagnosticsMethod = WFMGrpc.getBuildNodeDiagnosticsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildNodeDiagnosticsMethod = WFMGrpc.getBuildNodeDiagnosticsMethod) == null) {
          WFMGrpc.getBuildNodeDiagnosticsMethod = getBuildNodeDiagnosticsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildNodeDiagnostics"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildNodeDiagnostics"))
              .build();
        }
      }
    }
    return getBuildNodeDiagnosticsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes> getBuildGlobalDiagnosticsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildGlobalDiagnostics",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes> getBuildGlobalDiagnosticsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes> getBuildGlobalDiagnosticsMethod;
    if ((getBuildGlobalDiagnosticsMethod = WFMGrpc.getBuildGlobalDiagnosticsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildGlobalDiagnosticsMethod = WFMGrpc.getBuildGlobalDiagnosticsMethod) == null) {
          WFMGrpc.getBuildGlobalDiagnosticsMethod = getBuildGlobalDiagnosticsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildGlobalDiagnostics"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildGlobalDiagnostics"))
              .build();
        }
      }
    }
    return getBuildGlobalDiagnosticsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes> getGetPublishedScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetPublishedSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes> getGetPublishedScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes> getGetPublishedScheduleMethod;
    if ((getGetPublishedScheduleMethod = WFMGrpc.getGetPublishedScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetPublishedScheduleMethod = WFMGrpc.getGetPublishedScheduleMethod) == null) {
          WFMGrpc.getGetPublishedScheduleMethod = getGetPublishedScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetPublishedSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetPublishedSchedule"))
              .build();
        }
      }
    }
    return getGetPublishedScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes> getGetPublishedScheduleRequiredCallsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetPublishedScheduleRequiredCalls",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes> getGetPublishedScheduleRequiredCallsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes> getGetPublishedScheduleRequiredCallsMethod;
    if ((getGetPublishedScheduleRequiredCallsMethod = WFMGrpc.getGetPublishedScheduleRequiredCallsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetPublishedScheduleRequiredCallsMethod = WFMGrpc.getGetPublishedScheduleRequiredCallsMethod) == null) {
          WFMGrpc.getGetPublishedScheduleRequiredCallsMethod = getGetPublishedScheduleRequiredCallsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetPublishedScheduleRequiredCalls"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetPublishedScheduleRequiredCalls"))
              .build();
        }
      }
    }
    return getGetPublishedScheduleRequiredCallsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes> getGetDraftScheduleRequiredCallsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetDraftScheduleRequiredCalls",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes> getGetDraftScheduleRequiredCallsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes> getGetDraftScheduleRequiredCallsMethod;
    if ((getGetDraftScheduleRequiredCallsMethod = WFMGrpc.getGetDraftScheduleRequiredCallsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetDraftScheduleRequiredCallsMethod = WFMGrpc.getGetDraftScheduleRequiredCallsMethod) == null) {
          WFMGrpc.getGetDraftScheduleRequiredCallsMethod = getGetDraftScheduleRequiredCallsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetDraftScheduleRequiredCalls"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetDraftScheduleRequiredCalls"))
              .build();
        }
      }
    }
    return getGetDraftScheduleRequiredCallsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes> getCreateDraftScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateDraftSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes> getCreateDraftScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes> getCreateDraftScheduleMethod;
    if ((getCreateDraftScheduleMethod = WFMGrpc.getCreateDraftScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateDraftScheduleMethod = WFMGrpc.getCreateDraftScheduleMethod) == null) {
          WFMGrpc.getCreateDraftScheduleMethod = getCreateDraftScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateDraftSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateDraftSchedule"))
              .build();
        }
      }
    }
    return getCreateDraftScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes> getUpdateDraftScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateDraftSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes> getUpdateDraftScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes> getUpdateDraftScheduleMethod;
    if ((getUpdateDraftScheduleMethod = WFMGrpc.getUpdateDraftScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateDraftScheduleMethod = WFMGrpc.getUpdateDraftScheduleMethod) == null) {
          WFMGrpc.getUpdateDraftScheduleMethod = getUpdateDraftScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateDraftSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateDraftSchedule"))
              .build();
        }
      }
    }
    return getUpdateDraftScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes> getBuildDraftScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "BuildDraftSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes> getBuildDraftScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes> getBuildDraftScheduleMethod;
    if ((getBuildDraftScheduleMethod = WFMGrpc.getBuildDraftScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getBuildDraftScheduleMethod = WFMGrpc.getBuildDraftScheduleMethod) == null) {
          WFMGrpc.getBuildDraftScheduleMethod = getBuildDraftScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "BuildDraftSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("BuildDraftSchedule"))
              .build();
        }
      }
    }
    return getBuildDraftScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse> getPollBuildInProgressMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "PollBuildInProgress",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse> getPollBuildInProgressMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest, com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse> getPollBuildInProgressMethod;
    if ((getPollBuildInProgressMethod = WFMGrpc.getPollBuildInProgressMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getPollBuildInProgressMethod = WFMGrpc.getPollBuildInProgressMethod) == null) {
          WFMGrpc.getPollBuildInProgressMethod = getPollBuildInProgressMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest, com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "PollBuildInProgress"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("PollBuildInProgress"))
              .build();
        }
      }
    }
    return getPollBuildInProgressMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse> getCancelBuildInProgressMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CancelBuildInProgress",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse> getCancelBuildInProgressMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse> getCancelBuildInProgressMethod;
    if ((getCancelBuildInProgressMethod = WFMGrpc.getCancelBuildInProgressMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCancelBuildInProgressMethod = WFMGrpc.getCancelBuildInProgressMethod) == null) {
          WFMGrpc.getCancelBuildInProgressMethod = getCancelBuildInProgressMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CancelBuildInProgress"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CancelBuildInProgress"))
              .build();
        }
      }
    }
    return getCancelBuildInProgressMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes> getPublishDraftScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "PublishDraftSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes> getPublishDraftScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes> getPublishDraftScheduleMethod;
    if ((getPublishDraftScheduleMethod = WFMGrpc.getPublishDraftScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getPublishDraftScheduleMethod = WFMGrpc.getPublishDraftScheduleMethod) == null) {
          WFMGrpc.getPublishDraftScheduleMethod = getPublishDraftScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "PublishDraftSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("PublishDraftSchedule"))
              .build();
        }
      }
    }
    return getPublishDraftScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes> getResetDraftScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ResetDraftSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes> getResetDraftScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes> getResetDraftScheduleMethod;
    if ((getResetDraftScheduleMethod = WFMGrpc.getResetDraftScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getResetDraftScheduleMethod = WFMGrpc.getResetDraftScheduleMethod) == null) {
          WFMGrpc.getResetDraftScheduleMethod = getResetDraftScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ResetDraftSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ResetDraftSchedule"))
              .build();
        }
      }
    }
    return getResetDraftScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes> getGetDraftScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetDraftSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes> getGetDraftScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes> getGetDraftScheduleMethod;
    if ((getGetDraftScheduleMethod = WFMGrpc.getGetDraftScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetDraftScheduleMethod = WFMGrpc.getGetDraftScheduleMethod) == null) {
          WFMGrpc.getGetDraftScheduleMethod = getGetDraftScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetDraftSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetDraftSchedule"))
              .build();
        }
      }
    }
    return getGetDraftScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes> getListDraftSchedulesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListDraftSchedules",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes> getListDraftSchedulesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes> getListDraftSchedulesMethod;
    if ((getListDraftSchedulesMethod = WFMGrpc.getListDraftSchedulesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListDraftSchedulesMethod = WFMGrpc.getListDraftSchedulesMethod) == null) {
          WFMGrpc.getListDraftSchedulesMethod = getListDraftSchedulesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListDraftSchedules"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListDraftSchedules"))
              .build();
        }
      }
    }
    return getListDraftSchedulesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes> getClearScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ClearSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes> getClearScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes> getClearScheduleMethod;
    if ((getClearScheduleMethod = WFMGrpc.getClearScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getClearScheduleMethod = WFMGrpc.getClearScheduleMethod) == null) {
          WFMGrpc.getClearScheduleMethod = getClearScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ClearSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ClearSchedule"))
              .build();
        }
      }
    }
    return getClearScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes> getDeleteDraftScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteDraftSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes> getDeleteDraftScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes> getDeleteDraftScheduleMethod;
    if ((getDeleteDraftScheduleMethod = WFMGrpc.getDeleteDraftScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteDraftScheduleMethod = WFMGrpc.getDeleteDraftScheduleMethod) == null) {
          WFMGrpc.getDeleteDraftScheduleMethod = getDeleteDraftScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteDraftSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteDraftSchedule"))
              .build();
        }
      }
    }
    return getDeleteDraftScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes> getListShiftInstancesBySidMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListShiftInstancesBySid",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes> getListShiftInstancesBySidMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes> getListShiftInstancesBySidMethod;
    if ((getListShiftInstancesBySidMethod = WFMGrpc.getListShiftInstancesBySidMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListShiftInstancesBySidMethod = WFMGrpc.getListShiftInstancesBySidMethod) == null) {
          WFMGrpc.getListShiftInstancesBySidMethod = getListShiftInstancesBySidMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListShiftInstancesBySid"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListShiftInstancesBySid"))
              .build();
        }
      }
    }
    return getListShiftInstancesBySidMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes> getCopyScheduleToScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CopyScheduleToSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes> getCopyScheduleToScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes> getCopyScheduleToScheduleMethod;
    if ((getCopyScheduleToScheduleMethod = WFMGrpc.getCopyScheduleToScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCopyScheduleToScheduleMethod = WFMGrpc.getCopyScheduleToScheduleMethod) == null) {
          WFMGrpc.getCopyScheduleToScheduleMethod = getCopyScheduleToScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CopyScheduleToSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CopyScheduleToSchedule"))
              .build();
        }
      }
    }
    return getCopyScheduleToScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes> getCreateShiftInstanceMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateShiftInstance",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes> getCreateShiftInstanceMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes> getCreateShiftInstanceMethod;
    if ((getCreateShiftInstanceMethod = WFMGrpc.getCreateShiftInstanceMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateShiftInstanceMethod = WFMGrpc.getCreateShiftInstanceMethod) == null) {
          WFMGrpc.getCreateShiftInstanceMethod = getCreateShiftInstanceMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateShiftInstance"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateShiftInstance"))
              .build();
        }
      }
    }
    return getCreateShiftInstanceMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res> getCreateShiftInstanceV2Method;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateShiftInstanceV2",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res> getCreateShiftInstanceV2Method() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req, com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res> getCreateShiftInstanceV2Method;
    if ((getCreateShiftInstanceV2Method = WFMGrpc.getCreateShiftInstanceV2Method) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateShiftInstanceV2Method = WFMGrpc.getCreateShiftInstanceV2Method) == null) {
          WFMGrpc.getCreateShiftInstanceV2Method = getCreateShiftInstanceV2Method =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req, com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateShiftInstanceV2"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateShiftInstanceV2"))
              .build();
        }
      }
    }
    return getCreateShiftInstanceV2Method;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse> getCreateShiftInstanceWithSegmentsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateShiftInstanceWithSegments",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse> getCreateShiftInstanceWithSegmentsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse> getCreateShiftInstanceWithSegmentsMethod;
    if ((getCreateShiftInstanceWithSegmentsMethod = WFMGrpc.getCreateShiftInstanceWithSegmentsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateShiftInstanceWithSegmentsMethod = WFMGrpc.getCreateShiftInstanceWithSegmentsMethod) == null) {
          WFMGrpc.getCreateShiftInstanceWithSegmentsMethod = getCreateShiftInstanceWithSegmentsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateShiftInstanceWithSegments"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateShiftInstanceWithSegments"))
              .build();
        }
      }
    }
    return getCreateShiftInstanceWithSegmentsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes> getSplitShiftInstanceMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "SplitShiftInstance",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes> getSplitShiftInstanceMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq, com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes> getSplitShiftInstanceMethod;
    if ((getSplitShiftInstanceMethod = WFMGrpc.getSplitShiftInstanceMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getSplitShiftInstanceMethod = WFMGrpc.getSplitShiftInstanceMethod) == null) {
          WFMGrpc.getSplitShiftInstanceMethod = getSplitShiftInstanceMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq, com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "SplitShiftInstance"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("SplitShiftInstance"))
              .build();
        }
      }
    }
    return getSplitShiftInstanceMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes> getSwapShiftInstancesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "SwapShiftInstances",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes> getSwapShiftInstancesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq, com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes> getSwapShiftInstancesMethod;
    if ((getSwapShiftInstancesMethod = WFMGrpc.getSwapShiftInstancesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getSwapShiftInstancesMethod = WFMGrpc.getSwapShiftInstancesMethod) == null) {
          WFMGrpc.getSwapShiftInstancesMethod = getSwapShiftInstancesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq, com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "SwapShiftInstances"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("SwapShiftInstances"))
              .build();
        }
      }
    }
    return getSwapShiftInstancesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes> getUpdateShiftInstanceMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateShiftInstance",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes> getUpdateShiftInstanceMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes> getUpdateShiftInstanceMethod;
    if ((getUpdateShiftInstanceMethod = WFMGrpc.getUpdateShiftInstanceMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateShiftInstanceMethod = WFMGrpc.getUpdateShiftInstanceMethod) == null) {
          WFMGrpc.getUpdateShiftInstanceMethod = getUpdateShiftInstanceMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateShiftInstance"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateShiftInstance"))
              .build();
        }
      }
    }
    return getUpdateShiftInstanceMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res> getUpdateShiftInstanceV2Method;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateShiftInstanceV2",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res> getUpdateShiftInstanceV2Method() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res> getUpdateShiftInstanceV2Method;
    if ((getUpdateShiftInstanceV2Method = WFMGrpc.getUpdateShiftInstanceV2Method) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateShiftInstanceV2Method = WFMGrpc.getUpdateShiftInstanceV2Method) == null) {
          WFMGrpc.getUpdateShiftInstanceV2Method = getUpdateShiftInstanceV2Method =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateShiftInstanceV2"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateShiftInstanceV2"))
              .build();
        }
      }
    }
    return getUpdateShiftInstanceV2Method;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse> getUpdateShiftInstanceWithSegmentsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateShiftInstanceWithSegments",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse> getUpdateShiftInstanceWithSegmentsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse> getUpdateShiftInstanceWithSegmentsMethod;
    if ((getUpdateShiftInstanceWithSegmentsMethod = WFMGrpc.getUpdateShiftInstanceWithSegmentsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateShiftInstanceWithSegmentsMethod = WFMGrpc.getUpdateShiftInstanceWithSegmentsMethod) == null) {
          WFMGrpc.getUpdateShiftInstanceWithSegmentsMethod = getUpdateShiftInstanceWithSegmentsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateShiftInstanceWithSegments"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateShiftInstanceWithSegments"))
              .build();
        }
      }
    }
    return getUpdateShiftInstanceWithSegmentsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes> getCopyShiftInstancesToScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CopyShiftInstancesToSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes> getCopyShiftInstancesToScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes> getCopyShiftInstancesToScheduleMethod;
    if ((getCopyShiftInstancesToScheduleMethod = WFMGrpc.getCopyShiftInstancesToScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCopyShiftInstancesToScheduleMethod = WFMGrpc.getCopyShiftInstancesToScheduleMethod) == null) {
          WFMGrpc.getCopyShiftInstancesToScheduleMethod = getCopyShiftInstancesToScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CopyShiftInstancesToSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CopyShiftInstancesToSchedule"))
              .build();
        }
      }
    }
    return getCopyShiftInstancesToScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes> getListShiftInstanceSidsForAgentMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListShiftInstanceSidsForAgent",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes> getListShiftInstanceSidsForAgentMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes> getListShiftInstanceSidsForAgentMethod;
    if ((getListShiftInstanceSidsForAgentMethod = WFMGrpc.getListShiftInstanceSidsForAgentMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListShiftInstanceSidsForAgentMethod = WFMGrpc.getListShiftInstanceSidsForAgentMethod) == null) {
          WFMGrpc.getListShiftInstanceSidsForAgentMethod = getListShiftInstanceSidsForAgentMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListShiftInstanceSidsForAgent"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListShiftInstanceSidsForAgent"))
              .build();
        }
      }
    }
    return getListShiftInstanceSidsForAgentMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse> getListShiftInstanceSidsForScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListShiftInstanceSidsForSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse> getListShiftInstanceSidsForScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse> getListShiftInstanceSidsForScheduleMethod;
    if ((getListShiftInstanceSidsForScheduleMethod = WFMGrpc.getListShiftInstanceSidsForScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListShiftInstanceSidsForScheduleMethod = WFMGrpc.getListShiftInstanceSidsForScheduleMethod) == null) {
          WFMGrpc.getListShiftInstanceSidsForScheduleMethod = getListShiftInstanceSidsForScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListShiftInstanceSidsForSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListShiftInstanceSidsForSchedule"))
              .build();
        }
      }
    }
    return getListShiftInstanceSidsForScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes> getListShiftSegmentsByShiftInstanceSidsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListShiftSegmentsByShiftInstanceSids",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes> getListShiftSegmentsByShiftInstanceSidsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes> getListShiftSegmentsByShiftInstanceSidsMethod;
    if ((getListShiftSegmentsByShiftInstanceSidsMethod = WFMGrpc.getListShiftSegmentsByShiftInstanceSidsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListShiftSegmentsByShiftInstanceSidsMethod = WFMGrpc.getListShiftSegmentsByShiftInstanceSidsMethod) == null) {
          WFMGrpc.getListShiftSegmentsByShiftInstanceSidsMethod = getListShiftSegmentsByShiftInstanceSidsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListShiftSegmentsByShiftInstanceSids"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListShiftSegmentsByShiftInstanceSids"))
              .build();
        }
      }
    }
    return getListShiftSegmentsByShiftInstanceSidsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes> getSetSchedulingTargetMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "SetSchedulingTarget",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes> getSetSchedulingTargetMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes> getSetSchedulingTargetMethod;
    if ((getSetSchedulingTargetMethod = WFMGrpc.getSetSchedulingTargetMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getSetSchedulingTargetMethod = WFMGrpc.getSetSchedulingTargetMethod) == null) {
          WFMGrpc.getSetSchedulingTargetMethod = getSetSchedulingTargetMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "SetSchedulingTarget"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("SetSchedulingTarget"))
              .build();
        }
      }
    }
    return getSetSchedulingTargetMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes> getGetSchedulingTargetMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetSchedulingTarget",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes> getGetSchedulingTargetMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes> getGetSchedulingTargetMethod;
    if ((getGetSchedulingTargetMethod = WFMGrpc.getGetSchedulingTargetMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetSchedulingTargetMethod = WFMGrpc.getGetSchedulingTargetMethod) == null) {
          WFMGrpc.getGetSchedulingTargetMethod = getGetSchedulingTargetMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetSchedulingTarget"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetSchedulingTarget"))
              .build();
        }
      }
    }
    return getGetSchedulingTargetMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes> getDeleteSchedulingTargetMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteSchedulingTarget",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes> getDeleteSchedulingTargetMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes> getDeleteSchedulingTargetMethod;
    if ((getDeleteSchedulingTargetMethod = WFMGrpc.getDeleteSchedulingTargetMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteSchedulingTargetMethod = WFMGrpc.getDeleteSchedulingTargetMethod) == null) {
          WFMGrpc.getDeleteSchedulingTargetMethod = getDeleteSchedulingTargetMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteSchedulingTarget"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteSchedulingTarget"))
              .build();
        }
      }
    }
    return getDeleteSchedulingTargetMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes> getGetDefaultSchedulingTargetMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetDefaultSchedulingTarget",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes> getGetDefaultSchedulingTargetMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes> getGetDefaultSchedulingTargetMethod;
    if ((getGetDefaultSchedulingTargetMethod = WFMGrpc.getGetDefaultSchedulingTargetMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetDefaultSchedulingTargetMethod = WFMGrpc.getGetDefaultSchedulingTargetMethod) == null) {
          WFMGrpc.getGetDefaultSchedulingTargetMethod = getGetDefaultSchedulingTargetMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetDefaultSchedulingTarget"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetDefaultSchedulingTarget"))
              .build();
        }
      }
    }
    return getGetDefaultSchedulingTargetMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes> getSetDefaultSchedulingTargetMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "SetDefaultSchedulingTarget",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes> getSetDefaultSchedulingTargetMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes> getSetDefaultSchedulingTargetMethod;
    if ((getSetDefaultSchedulingTargetMethod = WFMGrpc.getSetDefaultSchedulingTargetMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getSetDefaultSchedulingTargetMethod = WFMGrpc.getSetDefaultSchedulingTargetMethod) == null) {
          WFMGrpc.getSetDefaultSchedulingTargetMethod = getSetDefaultSchedulingTargetMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq, com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "SetDefaultSchedulingTarget"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("SetDefaultSchedulingTarget"))
              .build();
        }
      }
    }
    return getSetDefaultSchedulingTargetMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes> getGetPerformanceMetricsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetPerformanceMetrics",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes> getGetPerformanceMetricsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes> getGetPerformanceMetricsMethod;
    if ((getGetPerformanceMetricsMethod = WFMGrpc.getGetPerformanceMetricsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetPerformanceMetricsMethod = WFMGrpc.getGetPerformanceMetricsMethod) == null) {
          WFMGrpc.getGetPerformanceMetricsMethod = getGetPerformanceMetricsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetPerformanceMetrics"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetPerformanceMetrics"))
              .build();
        }
      }
    }
    return getGetPerformanceMetricsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes> getListRequiredCallsIntervalsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListRequiredCallsIntervals",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes> getListRequiredCallsIntervalsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes> getListRequiredCallsIntervalsMethod;
    if ((getListRequiredCallsIntervalsMethod = WFMGrpc.getListRequiredCallsIntervalsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListRequiredCallsIntervalsMethod = WFMGrpc.getListRequiredCallsIntervalsMethod) == null) {
          WFMGrpc.getListRequiredCallsIntervalsMethod = getListRequiredCallsIntervalsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListRequiredCallsIntervals"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListRequiredCallsIntervals"))
              .build();
        }
      }
    }
    return getListRequiredCallsIntervalsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes> getCreateTourPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateTourPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes> getCreateTourPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes> getCreateTourPatternMethod;
    if ((getCreateTourPatternMethod = WFMGrpc.getCreateTourPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateTourPatternMethod = WFMGrpc.getCreateTourPatternMethod) == null) {
          WFMGrpc.getCreateTourPatternMethod = getCreateTourPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateTourPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateTourPattern"))
              .build();
        }
      }
    }
    return getCreateTourPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes> getGetTourPatternDiagnosticsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetTourPatternDiagnostics",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes> getGetTourPatternDiagnosticsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes> getGetTourPatternDiagnosticsMethod;
    if ((getGetTourPatternDiagnosticsMethod = WFMGrpc.getGetTourPatternDiagnosticsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetTourPatternDiagnosticsMethod = WFMGrpc.getGetTourPatternDiagnosticsMethod) == null) {
          WFMGrpc.getGetTourPatternDiagnosticsMethod = getGetTourPatternDiagnosticsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetTourPatternDiagnostics"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetTourPatternDiagnostics"))
              .build();
        }
      }
    }
    return getGetTourPatternDiagnosticsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes> getUpsertTourPatternWithMembersMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertTourPatternWithMembers",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes> getUpsertTourPatternWithMembersMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes> getUpsertTourPatternWithMembersMethod;
    if ((getUpsertTourPatternWithMembersMethod = WFMGrpc.getUpsertTourPatternWithMembersMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertTourPatternWithMembersMethod = WFMGrpc.getUpsertTourPatternWithMembersMethod) == null) {
          WFMGrpc.getUpsertTourPatternWithMembersMethod = getUpsertTourPatternWithMembersMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertTourPatternWithMembers"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertTourPatternWithMembers"))
              .build();
        }
      }
    }
    return getUpsertTourPatternWithMembersMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes> getGetTourPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetTourPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes> getGetTourPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes> getGetTourPatternMethod;
    if ((getGetTourPatternMethod = WFMGrpc.getGetTourPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetTourPatternMethod = WFMGrpc.getGetTourPatternMethod) == null) {
          WFMGrpc.getGetTourPatternMethod = getGetTourPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetTourPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetTourPattern"))
              .build();
        }
      }
    }
    return getGetTourPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes> getGetTourPatternWithMembersMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GetTourPatternWithMembers",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes> getGetTourPatternWithMembersMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes> getGetTourPatternWithMembersMethod;
    if ((getGetTourPatternWithMembersMethod = WFMGrpc.getGetTourPatternWithMembersMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGetTourPatternWithMembersMethod = WFMGrpc.getGetTourPatternWithMembersMethod) == null) {
          WFMGrpc.getGetTourPatternWithMembersMethod = getGetTourPatternWithMembersMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq, com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GetTourPatternWithMembers"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GetTourPatternWithMembers"))
              .build();
        }
      }
    }
    return getGetTourPatternWithMembersMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes> getDeleteTourPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteTourPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes> getDeleteTourPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes> getDeleteTourPatternMethod;
    if ((getDeleteTourPatternMethod = WFMGrpc.getDeleteTourPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteTourPatternMethod = WFMGrpc.getDeleteTourPatternMethod) == null) {
          WFMGrpc.getDeleteTourPatternMethod = getDeleteTourPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteTourPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteTourPattern"))
              .build();
        }
      }
    }
    return getDeleteTourPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes> getCreateTourWeekPatternMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateTourWeekPattern",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes> getCreateTourWeekPatternMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes> getCreateTourWeekPatternMethod;
    if ((getCreateTourWeekPatternMethod = WFMGrpc.getCreateTourWeekPatternMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateTourWeekPatternMethod = WFMGrpc.getCreateTourWeekPatternMethod) == null) {
          WFMGrpc.getCreateTourWeekPatternMethod = getCreateTourWeekPatternMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateTourWeekPattern"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateTourWeekPattern"))
              .build();
        }
      }
    }
    return getCreateTourWeekPatternMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes> getListTourWeekPatternsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListTourWeekPatterns",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes> getListTourWeekPatternsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes> getListTourWeekPatternsMethod;
    if ((getListTourWeekPatternsMethod = WFMGrpc.getListTourWeekPatternsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListTourWeekPatternsMethod = WFMGrpc.getListTourWeekPatternsMethod) == null) {
          WFMGrpc.getListTourWeekPatternsMethod = getListTourWeekPatternsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListTourWeekPatterns"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListTourWeekPatterns"))
              .build();
        }
      }
    }
    return getListTourWeekPatternsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes> getDeleteTourWeekPatternsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteTourWeekPatterns",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes> getDeleteTourWeekPatternsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes> getDeleteTourWeekPatternsMethod;
    if ((getDeleteTourWeekPatternsMethod = WFMGrpc.getDeleteTourWeekPatternsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteTourWeekPatternsMethod = WFMGrpc.getDeleteTourWeekPatternsMethod) == null) {
          WFMGrpc.getDeleteTourWeekPatternsMethod = getDeleteTourWeekPatternsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteTourWeekPatterns"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteTourWeekPatterns"))
              .build();
        }
      }
    }
    return getDeleteTourWeekPatternsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes> getCreateTourShiftInstanceConfigMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateTourShiftInstanceConfig",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes> getCreateTourShiftInstanceConfigMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes> getCreateTourShiftInstanceConfigMethod;
    if ((getCreateTourShiftInstanceConfigMethod = WFMGrpc.getCreateTourShiftInstanceConfigMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateTourShiftInstanceConfigMethod = WFMGrpc.getCreateTourShiftInstanceConfigMethod) == null) {
          WFMGrpc.getCreateTourShiftInstanceConfigMethod = getCreateTourShiftInstanceConfigMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateTourShiftInstanceConfig"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateTourShiftInstanceConfig"))
              .build();
        }
      }
    }
    return getCreateTourShiftInstanceConfigMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes> getUpdateTourShiftInstanceConfigMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateTourShiftInstanceConfig",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes> getUpdateTourShiftInstanceConfigMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes> getUpdateTourShiftInstanceConfigMethod;
    if ((getUpdateTourShiftInstanceConfigMethod = WFMGrpc.getUpdateTourShiftInstanceConfigMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateTourShiftInstanceConfigMethod = WFMGrpc.getUpdateTourShiftInstanceConfigMethod) == null) {
          WFMGrpc.getUpdateTourShiftInstanceConfigMethod = getUpdateTourShiftInstanceConfigMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateTourShiftInstanceConfig"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateTourShiftInstanceConfig"))
              .build();
        }
      }
    }
    return getUpdateTourShiftInstanceConfigMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes> getListTourShiftInstanceConfigsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListTourShiftInstanceConfigs",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes> getListTourShiftInstanceConfigsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes> getListTourShiftInstanceConfigsMethod;
    if ((getListTourShiftInstanceConfigsMethod = WFMGrpc.getListTourShiftInstanceConfigsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListTourShiftInstanceConfigsMethod = WFMGrpc.getListTourShiftInstanceConfigsMethod) == null) {
          WFMGrpc.getListTourShiftInstanceConfigsMethod = getListTourShiftInstanceConfigsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListTourShiftInstanceConfigs"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListTourShiftInstanceConfigs"))
              .build();
        }
      }
    }
    return getListTourShiftInstanceConfigsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes> getDeleteTourShiftInstanceConfigsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteTourShiftInstanceConfigs",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes> getDeleteTourShiftInstanceConfigsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes> getDeleteTourShiftInstanceConfigsMethod;
    if ((getDeleteTourShiftInstanceConfigsMethod = WFMGrpc.getDeleteTourShiftInstanceConfigsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteTourShiftInstanceConfigsMethod = WFMGrpc.getDeleteTourShiftInstanceConfigsMethod) == null) {
          WFMGrpc.getDeleteTourShiftInstanceConfigsMethod = getDeleteTourShiftInstanceConfigsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteTourShiftInstanceConfigs"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteTourShiftInstanceConfigs"))
              .build();
        }
      }
    }
    return getDeleteTourShiftInstanceConfigsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes> getCreateTourShiftSegmentConfigMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateTourShiftSegmentConfig",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes> getCreateTourShiftSegmentConfigMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes> getCreateTourShiftSegmentConfigMethod;
    if ((getCreateTourShiftSegmentConfigMethod = WFMGrpc.getCreateTourShiftSegmentConfigMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateTourShiftSegmentConfigMethod = WFMGrpc.getCreateTourShiftSegmentConfigMethod) == null) {
          WFMGrpc.getCreateTourShiftSegmentConfigMethod = getCreateTourShiftSegmentConfigMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateTourShiftSegmentConfig"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateTourShiftSegmentConfig"))
              .build();
        }
      }
    }
    return getCreateTourShiftSegmentConfigMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes> getUpdateTourShiftSegmentConfigMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateTourShiftSegmentConfig",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes> getUpdateTourShiftSegmentConfigMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes> getUpdateTourShiftSegmentConfigMethod;
    if ((getUpdateTourShiftSegmentConfigMethod = WFMGrpc.getUpdateTourShiftSegmentConfigMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateTourShiftSegmentConfigMethod = WFMGrpc.getUpdateTourShiftSegmentConfigMethod) == null) {
          WFMGrpc.getUpdateTourShiftSegmentConfigMethod = getUpdateTourShiftSegmentConfigMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateTourShiftSegmentConfig"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateTourShiftSegmentConfig"))
              .build();
        }
      }
    }
    return getUpdateTourShiftSegmentConfigMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes> getListTourShiftSegmentConfigsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListTourShiftSegmentConfigs",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes> getListTourShiftSegmentConfigsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes> getListTourShiftSegmentConfigsMethod;
    if ((getListTourShiftSegmentConfigsMethod = WFMGrpc.getListTourShiftSegmentConfigsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListTourShiftSegmentConfigsMethod = WFMGrpc.getListTourShiftSegmentConfigsMethod) == null) {
          WFMGrpc.getListTourShiftSegmentConfigsMethod = getListTourShiftSegmentConfigsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListTourShiftSegmentConfigs"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListTourShiftSegmentConfigs"))
              .build();
        }
      }
    }
    return getListTourShiftSegmentConfigsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes> getDeleteTourShiftSegmentConfigsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteTourShiftSegmentConfigs",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes> getDeleteTourShiftSegmentConfigsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes> getDeleteTourShiftSegmentConfigsMethod;
    if ((getDeleteTourShiftSegmentConfigsMethod = WFMGrpc.getDeleteTourShiftSegmentConfigsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteTourShiftSegmentConfigsMethod = WFMGrpc.getDeleteTourShiftSegmentConfigsMethod) == null) {
          WFMGrpc.getDeleteTourShiftSegmentConfigsMethod = getDeleteTourShiftSegmentConfigsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteTourShiftSegmentConfigs"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteTourShiftSegmentConfigs"))
              .build();
        }
      }
    }
    return getDeleteTourShiftSegmentConfigsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes> getCreateTourAgentCollectionMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateTourAgentCollection",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes> getCreateTourAgentCollectionMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes> getCreateTourAgentCollectionMethod;
    if ((getCreateTourAgentCollectionMethod = WFMGrpc.getCreateTourAgentCollectionMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateTourAgentCollectionMethod = WFMGrpc.getCreateTourAgentCollectionMethod) == null) {
          WFMGrpc.getCreateTourAgentCollectionMethod = getCreateTourAgentCollectionMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateTourAgentCollection"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateTourAgentCollection"))
              .build();
        }
      }
    }
    return getCreateTourAgentCollectionMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes> getUpdateTourAgentCollectionMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateTourAgentCollection",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes> getUpdateTourAgentCollectionMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes> getUpdateTourAgentCollectionMethod;
    if ((getUpdateTourAgentCollectionMethod = WFMGrpc.getUpdateTourAgentCollectionMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateTourAgentCollectionMethod = WFMGrpc.getUpdateTourAgentCollectionMethod) == null) {
          WFMGrpc.getUpdateTourAgentCollectionMethod = getUpdateTourAgentCollectionMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateTourAgentCollection"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateTourAgentCollection"))
              .build();
        }
      }
    }
    return getUpdateTourAgentCollectionMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes> getListTourAgentCollectionsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListTourAgentCollections",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes> getListTourAgentCollectionsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes> getListTourAgentCollectionsMethod;
    if ((getListTourAgentCollectionsMethod = WFMGrpc.getListTourAgentCollectionsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListTourAgentCollectionsMethod = WFMGrpc.getListTourAgentCollectionsMethod) == null) {
          WFMGrpc.getListTourAgentCollectionsMethod = getListTourAgentCollectionsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListTourAgentCollections"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListTourAgentCollections"))
              .build();
        }
      }
    }
    return getListTourAgentCollectionsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes> getDeleteTourAgentCollectionsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteTourAgentCollections",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes> getDeleteTourAgentCollectionsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes> getDeleteTourAgentCollectionsMethod;
    if ((getDeleteTourAgentCollectionsMethod = WFMGrpc.getDeleteTourAgentCollectionsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteTourAgentCollectionsMethod = WFMGrpc.getDeleteTourAgentCollectionsMethod) == null) {
          WFMGrpc.getDeleteTourAgentCollectionsMethod = getDeleteTourAgentCollectionsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteTourAgentCollections"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteTourAgentCollections"))
              .build();
        }
      }
    }
    return getDeleteTourAgentCollectionsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes> getCreateTourAgentCollectionWFMAgentsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateTourAgentCollectionWFMAgents",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes> getCreateTourAgentCollectionWFMAgentsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes> getCreateTourAgentCollectionWFMAgentsMethod;
    if ((getCreateTourAgentCollectionWFMAgentsMethod = WFMGrpc.getCreateTourAgentCollectionWFMAgentsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateTourAgentCollectionWFMAgentsMethod = WFMGrpc.getCreateTourAgentCollectionWFMAgentsMethod) == null) {
          WFMGrpc.getCreateTourAgentCollectionWFMAgentsMethod = getCreateTourAgentCollectionWFMAgentsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateTourAgentCollectionWFMAgents"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateTourAgentCollectionWFMAgents"))
              .build();
        }
      }
    }
    return getCreateTourAgentCollectionWFMAgentsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes> getListTourAgentCollectionWFMAgentsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListTourAgentCollectionWFMAgents",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes> getListTourAgentCollectionWFMAgentsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes> getListTourAgentCollectionWFMAgentsMethod;
    if ((getListTourAgentCollectionWFMAgentsMethod = WFMGrpc.getListTourAgentCollectionWFMAgentsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListTourAgentCollectionWFMAgentsMethod = WFMGrpc.getListTourAgentCollectionWFMAgentsMethod) == null) {
          WFMGrpc.getListTourAgentCollectionWFMAgentsMethod = getListTourAgentCollectionWFMAgentsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListTourAgentCollectionWFMAgents"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListTourAgentCollectionWFMAgents"))
              .build();
        }
      }
    }
    return getListTourAgentCollectionWFMAgentsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes> getDeleteTourAgentCollectionWFMAgentsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteTourAgentCollectionWFMAgents",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes> getDeleteTourAgentCollectionWFMAgentsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes> getDeleteTourAgentCollectionWFMAgentsMethod;
    if ((getDeleteTourAgentCollectionWFMAgentsMethod = WFMGrpc.getDeleteTourAgentCollectionWFMAgentsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteTourAgentCollectionWFMAgentsMethod = WFMGrpc.getDeleteTourAgentCollectionWFMAgentsMethod) == null) {
          WFMGrpc.getDeleteTourAgentCollectionWFMAgentsMethod = getDeleteTourAgentCollectionWFMAgentsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteTourAgentCollectionWFMAgents"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteTourAgentCollectionWFMAgents"))
              .build();
        }
      }
    }
    return getDeleteTourAgentCollectionWFMAgentsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes> getGenerateTourWeekPatternsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "GenerateTourWeekPatterns",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes> getGenerateTourWeekPatternsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes> getGenerateTourWeekPatternsMethod;
    if ((getGenerateTourWeekPatternsMethod = WFMGrpc.getGenerateTourWeekPatternsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getGenerateTourWeekPatternsMethod = WFMGrpc.getGenerateTourWeekPatternsMethod) == null) {
          WFMGrpc.getGenerateTourWeekPatternsMethod = getGenerateTourWeekPatternsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq, com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "GenerateTourWeekPatterns"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("GenerateTourWeekPatterns"))
              .build();
        }
      }
    }
    return getGenerateTourWeekPatternsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes> getListValidAgentsForReplacementMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListValidAgentsForReplacement",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes> getListValidAgentsForReplacementMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes> getListValidAgentsForReplacementMethod;
    if ((getListValidAgentsForReplacementMethod = WFMGrpc.getListValidAgentsForReplacementMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListValidAgentsForReplacementMethod = WFMGrpc.getListValidAgentsForReplacementMethod) == null) {
          WFMGrpc.getListValidAgentsForReplacementMethod = getListValidAgentsForReplacementMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq, com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListValidAgentsForReplacement"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListValidAgentsForReplacement"))
              .build();
        }
      }
    }
    return getListValidAgentsForReplacementMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes,
      com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> getReplaceAgentOnScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ReplaceAgentOnSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes,
      com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> getReplaceAgentOnScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes, com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> getReplaceAgentOnScheduleMethod;
    if ((getReplaceAgentOnScheduleMethod = WFMGrpc.getReplaceAgentOnScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getReplaceAgentOnScheduleMethod = WFMGrpc.getReplaceAgentOnScheduleMethod) == null) {
          WFMGrpc.getReplaceAgentOnScheduleMethod = getReplaceAgentOnScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes, com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ReplaceAgentOnSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ReplaceAgentOnSchedule"))
              .build();
        }
      }
    }
    return getReplaceAgentOnScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> getReplaceAgentOnScheduleV1Method;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ReplaceAgentOnScheduleV1",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq,
      com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> getReplaceAgentOnScheduleV1Method() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> getReplaceAgentOnScheduleV1Method;
    if ((getReplaceAgentOnScheduleV1Method = WFMGrpc.getReplaceAgentOnScheduleV1Method) == null) {
      synchronized (WFMGrpc.class) {
        if ((getReplaceAgentOnScheduleV1Method = WFMGrpc.getReplaceAgentOnScheduleV1Method) == null) {
          WFMGrpc.getReplaceAgentOnScheduleV1Method = getReplaceAgentOnScheduleV1Method =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq, com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ReplaceAgentOnScheduleV1"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ReplaceAgentOnScheduleV1"))
              .build();
        }
      }
    }
    return getReplaceAgentOnScheduleV1Method;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse> getRemoveAgentFromScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "RemoveAgentFromSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse> getRemoveAgentFromScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse> getRemoveAgentFromScheduleMethod;
    if ((getRemoveAgentFromScheduleMethod = WFMGrpc.getRemoveAgentFromScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getRemoveAgentFromScheduleMethod = WFMGrpc.getRemoveAgentFromScheduleMethod) == null) {
          WFMGrpc.getRemoveAgentFromScheduleMethod = getRemoveAgentFromScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "RemoveAgentFromSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("RemoveAgentFromSchedule"))
              .build();
        }
      }
    }
    return getRemoveAgentFromScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse> getCreateAgentLeavePetitionMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateAgentLeavePetition",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse> getCreateAgentLeavePetitionMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse> getCreateAgentLeavePetitionMethod;
    if ((getCreateAgentLeavePetitionMethod = WFMGrpc.getCreateAgentLeavePetitionMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateAgentLeavePetitionMethod = WFMGrpc.getCreateAgentLeavePetitionMethod) == null) {
          WFMGrpc.getCreateAgentLeavePetitionMethod = getCreateAgentLeavePetitionMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateAgentLeavePetition"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateAgentLeavePetition"))
              .build();
        }
      }
    }
    return getCreateAgentLeavePetitionMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse> getListAgentLeavePetitionsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListAgentLeavePetitions",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse> getListAgentLeavePetitionsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse> getListAgentLeavePetitionsMethod;
    if ((getListAgentLeavePetitionsMethod = WFMGrpc.getListAgentLeavePetitionsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListAgentLeavePetitionsMethod = WFMGrpc.getListAgentLeavePetitionsMethod) == null) {
          WFMGrpc.getListAgentLeavePetitionsMethod = getListAgentLeavePetitionsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListAgentLeavePetitions"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListAgentLeavePetitions"))
              .build();
        }
      }
    }
    return getListAgentLeavePetitionsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse> getArchiveAgentLeavePetitionMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ArchiveAgentLeavePetition",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse> getArchiveAgentLeavePetitionMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse> getArchiveAgentLeavePetitionMethod;
    if ((getArchiveAgentLeavePetitionMethod = WFMGrpc.getArchiveAgentLeavePetitionMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getArchiveAgentLeavePetitionMethod = WFMGrpc.getArchiveAgentLeavePetitionMethod) == null) {
          WFMGrpc.getArchiveAgentLeavePetitionMethod = getArchiveAgentLeavePetitionMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ArchiveAgentLeavePetition"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ArchiveAgentLeavePetition"))
              .build();
        }
      }
    }
    return getArchiveAgentLeavePetitionMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse> getResolveAgentLeavePetitionMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ResolveAgentLeavePetition",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse> getResolveAgentLeavePetitionMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse> getResolveAgentLeavePetitionMethod;
    if ((getResolveAgentLeavePetitionMethod = WFMGrpc.getResolveAgentLeavePetitionMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getResolveAgentLeavePetitionMethod = WFMGrpc.getResolveAgentLeavePetitionMethod) == null) {
          WFMGrpc.getResolveAgentLeavePetitionMethod = getResolveAgentLeavePetitionMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ResolveAgentLeavePetition"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ResolveAgentLeavePetition"))
              .build();
        }
      }
    }
    return getResolveAgentLeavePetitionMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse> getCancelAgentLeavePetitionMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CancelAgentLeavePetition",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse> getCancelAgentLeavePetitionMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse> getCancelAgentLeavePetitionMethod;
    if ((getCancelAgentLeavePetitionMethod = WFMGrpc.getCancelAgentLeavePetitionMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCancelAgentLeavePetitionMethod = WFMGrpc.getCancelAgentLeavePetitionMethod) == null) {
          WFMGrpc.getCancelAgentLeavePetitionMethod = getCancelAgentLeavePetitionMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CancelAgentLeavePetition"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CancelAgentLeavePetition"))
              .build();
        }
      }
    }
    return getCancelAgentLeavePetitionMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse> getHelloWorldWFMAdherenceMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "HelloWorldWFMAdherence",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse> getHelloWorldWFMAdherenceMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest, com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse> getHelloWorldWFMAdherenceMethod;
    if ((getHelloWorldWFMAdherenceMethod = WFMGrpc.getHelloWorldWFMAdherenceMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getHelloWorldWFMAdherenceMethod = WFMGrpc.getHelloWorldWFMAdherenceMethod) == null) {
          WFMGrpc.getHelloWorldWFMAdherenceMethod = getHelloWorldWFMAdherenceMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest, com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "HelloWorldWFMAdherence"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("HelloWorldWFMAdherence"))
              .build();
        }
      }
    }
    return getHelloWorldWFMAdherenceMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse> getListAgentStatesForDayMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListAgentStatesForDay",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse> getListAgentStatesForDayMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse> getListAgentStatesForDayMethod;
    if ((getListAgentStatesForDayMethod = WFMGrpc.getListAgentStatesForDayMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListAgentStatesForDayMethod = WFMGrpc.getListAgentStatesForDayMethod) == null) {
          WFMGrpc.getListAgentStatesForDayMethod = getListAgentStatesForDayMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListAgentStatesForDay"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListAgentStatesForDay"))
              .build();
        }
      }
    }
    return getListAgentStatesForDayMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse> getListRealTimeManagementStatesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListRealTimeManagementStates",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse> getListRealTimeManagementStatesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse> getListRealTimeManagementStatesMethod;
    if ((getListRealTimeManagementStatesMethod = WFMGrpc.getListRealTimeManagementStatesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListRealTimeManagementStatesMethod = WFMGrpc.getListRealTimeManagementStatesMethod) == null) {
          WFMGrpc.getListRealTimeManagementStatesMethod = getListRealTimeManagementStatesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListRealTimeManagementStates"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListRealTimeManagementStates"))
              .build();
        }
      }
    }
    return getListRealTimeManagementStatesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse> getListAdherenceAgentStatesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListAdherenceAgentStates",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse> getListAdherenceAgentStatesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse> getListAdherenceAgentStatesMethod;
    if ((getListAdherenceAgentStatesMethod = WFMGrpc.getListAdherenceAgentStatesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListAdherenceAgentStatesMethod = WFMGrpc.getListAdherenceAgentStatesMethod) == null) {
          WFMGrpc.getListAdherenceAgentStatesMethod = getListAdherenceAgentStatesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListAdherenceAgentStates"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListAdherenceAgentStates"))
              .build();
        }
      }
    }
    return getListAdherenceAgentStatesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse> getUpsertRealTimeManagementStateColorMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpsertRealTimeManagementStateColor",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse> getUpsertRealTimeManagementStateColorMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse> getUpsertRealTimeManagementStateColorMethod;
    if ((getUpsertRealTimeManagementStateColorMethod = WFMGrpc.getUpsertRealTimeManagementStateColorMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpsertRealTimeManagementStateColorMethod = WFMGrpc.getUpsertRealTimeManagementStateColorMethod) == null) {
          WFMGrpc.getUpsertRealTimeManagementStateColorMethod = getUpsertRealTimeManagementStateColorMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpsertRealTimeManagementStateColor"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpsertRealTimeManagementStateColor"))
              .build();
        }
      }
    }
    return getUpsertRealTimeManagementStateColorMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse> getListRealTimeManagementStateColorsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListRealTimeManagementStateColors",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse> getListRealTimeManagementStateColorsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse> getListRealTimeManagementStateColorsMethod;
    if ((getListRealTimeManagementStateColorsMethod = WFMGrpc.getListRealTimeManagementStateColorsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListRealTimeManagementStateColorsMethod = WFMGrpc.getListRealTimeManagementStateColorsMethod) == null) {
          WFMGrpc.getListRealTimeManagementStateColorsMethod = getListRealTimeManagementStateColorsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListRealTimeManagementStateColors"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListRealTimeManagementStateColors"))
              .build();
        }
      }
    }
    return getListRealTimeManagementStateColorsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse> getDeleteRealTimeManagementStateColorMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteRealTimeManagementStateColor",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse> getDeleteRealTimeManagementStateColorMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse> getDeleteRealTimeManagementStateColorMethod;
    if ((getDeleteRealTimeManagementStateColorMethod = WFMGrpc.getDeleteRealTimeManagementStateColorMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteRealTimeManagementStateColorMethod = WFMGrpc.getDeleteRealTimeManagementStateColorMethod) == null) {
          WFMGrpc.getDeleteRealTimeManagementStateColorMethod = getDeleteRealTimeManagementStateColorMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteRealTimeManagementStateColor"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteRealTimeManagementStateColor"))
              .build();
        }
      }
    }
    return getDeleteRealTimeManagementStateColorMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse> getCreateRgbaColorMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateRgbaColor",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse> getCreateRgbaColorMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse> getCreateRgbaColorMethod;
    if ((getCreateRgbaColorMethod = WFMGrpc.getCreateRgbaColorMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateRgbaColorMethod = WFMGrpc.getCreateRgbaColorMethod) == null) {
          WFMGrpc.getCreateRgbaColorMethod = getCreateRgbaColorMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateRgbaColor"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateRgbaColor"))
              .build();
        }
      }
    }
    return getCreateRgbaColorMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse> getListRgbaColorsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListRgbaColors",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse> getListRgbaColorsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse> getListRgbaColorsMethod;
    if ((getListRgbaColorsMethod = WFMGrpc.getListRgbaColorsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListRgbaColorsMethod = WFMGrpc.getListRgbaColorsMethod) == null) {
          WFMGrpc.getListRgbaColorsMethod = getListRgbaColorsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListRgbaColors"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListRgbaColors"))
              .build();
        }
      }
    }
    return getListRgbaColorsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse> getUpdateRgbaColorMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateRgbaColor",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse> getUpdateRgbaColorMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse> getUpdateRgbaColorMethod;
    if ((getUpdateRgbaColorMethod = WFMGrpc.getUpdateRgbaColorMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateRgbaColorMethod = WFMGrpc.getUpdateRgbaColorMethod) == null) {
          WFMGrpc.getUpdateRgbaColorMethod = getUpdateRgbaColorMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateRgbaColor"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateRgbaColor"))
              .build();
        }
      }
    }
    return getUpdateRgbaColorMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse> getDeleteRgbaColorMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteRgbaColor",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse> getDeleteRgbaColorMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse> getDeleteRgbaColorMethod;
    if ((getDeleteRgbaColorMethod = WFMGrpc.getDeleteRgbaColorMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteRgbaColorMethod = WFMGrpc.getDeleteRgbaColorMethod) == null) {
          WFMGrpc.getDeleteRgbaColorMethod = getDeleteRgbaColorMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteRgbaColor"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteRgbaColor"))
              .build();
        }
      }
    }
    return getDeleteRgbaColorMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse> getCreateAdherenceRuleNotificationConfigMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateAdherenceRuleNotificationConfig",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse> getCreateAdherenceRuleNotificationConfigMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse> getCreateAdherenceRuleNotificationConfigMethod;
    if ((getCreateAdherenceRuleNotificationConfigMethod = WFMGrpc.getCreateAdherenceRuleNotificationConfigMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateAdherenceRuleNotificationConfigMethod = WFMGrpc.getCreateAdherenceRuleNotificationConfigMethod) == null) {
          WFMGrpc.getCreateAdherenceRuleNotificationConfigMethod = getCreateAdherenceRuleNotificationConfigMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateAdherenceRuleNotificationConfig"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateAdherenceRuleNotificationConfig"))
              .build();
        }
      }
    }
    return getCreateAdherenceRuleNotificationConfigMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse> getUpdateAdherenceRuleNotificationConfigMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateAdherenceRuleNotificationConfig",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse> getUpdateAdherenceRuleNotificationConfigMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse> getUpdateAdherenceRuleNotificationConfigMethod;
    if ((getUpdateAdherenceRuleNotificationConfigMethod = WFMGrpc.getUpdateAdherenceRuleNotificationConfigMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateAdherenceRuleNotificationConfigMethod = WFMGrpc.getUpdateAdherenceRuleNotificationConfigMethod) == null) {
          WFMGrpc.getUpdateAdherenceRuleNotificationConfigMethod = getUpdateAdherenceRuleNotificationConfigMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateAdherenceRuleNotificationConfig"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateAdherenceRuleNotificationConfig"))
              .build();
        }
      }
    }
    return getUpdateAdherenceRuleNotificationConfigMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse> getCreateAdherenceRuleNotificationConfigEntryMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateAdherenceRuleNotificationConfigEntry",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse> getCreateAdherenceRuleNotificationConfigEntryMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse> getCreateAdherenceRuleNotificationConfigEntryMethod;
    if ((getCreateAdherenceRuleNotificationConfigEntryMethod = WFMGrpc.getCreateAdherenceRuleNotificationConfigEntryMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateAdherenceRuleNotificationConfigEntryMethod = WFMGrpc.getCreateAdherenceRuleNotificationConfigEntryMethod) == null) {
          WFMGrpc.getCreateAdherenceRuleNotificationConfigEntryMethod = getCreateAdherenceRuleNotificationConfigEntryMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateAdherenceRuleNotificationConfigEntry"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateAdherenceRuleNotificationConfigEntry"))
              .build();
        }
      }
    }
    return getCreateAdherenceRuleNotificationConfigEntryMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse> getUpdateAdherenceRuleNotificationConfigEntryMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateAdherenceRuleNotificationConfigEntry",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse> getUpdateAdherenceRuleNotificationConfigEntryMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse> getUpdateAdherenceRuleNotificationConfigEntryMethod;
    if ((getUpdateAdherenceRuleNotificationConfigEntryMethod = WFMGrpc.getUpdateAdherenceRuleNotificationConfigEntryMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateAdherenceRuleNotificationConfigEntryMethod = WFMGrpc.getUpdateAdherenceRuleNotificationConfigEntryMethod) == null) {
          WFMGrpc.getUpdateAdherenceRuleNotificationConfigEntryMethod = getUpdateAdherenceRuleNotificationConfigEntryMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateAdherenceRuleNotificationConfigEntry"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateAdherenceRuleNotificationConfigEntry"))
              .build();
        }
      }
    }
    return getUpdateAdherenceRuleNotificationConfigEntryMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse> getDeleteAdherenceRuleNotificationConfigEntryMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteAdherenceRuleNotificationConfigEntry",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse> getDeleteAdherenceRuleNotificationConfigEntryMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse> getDeleteAdherenceRuleNotificationConfigEntryMethod;
    if ((getDeleteAdherenceRuleNotificationConfigEntryMethod = WFMGrpc.getDeleteAdherenceRuleNotificationConfigEntryMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteAdherenceRuleNotificationConfigEntryMethod = WFMGrpc.getDeleteAdherenceRuleNotificationConfigEntryMethod) == null) {
          WFMGrpc.getDeleteAdherenceRuleNotificationConfigEntryMethod = getDeleteAdherenceRuleNotificationConfigEntryMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteAdherenceRuleNotificationConfigEntry"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteAdherenceRuleNotificationConfigEntry"))
              .build();
        }
      }
    }
    return getDeleteAdherenceRuleNotificationConfigEntryMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse> getListAdherenceRuleNotificationConfigsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListAdherenceRuleNotificationConfigs",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse> getListAdherenceRuleNotificationConfigsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse> getListAdherenceRuleNotificationConfigsMethod;
    if ((getListAdherenceRuleNotificationConfigsMethod = WFMGrpc.getListAdherenceRuleNotificationConfigsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListAdherenceRuleNotificationConfigsMethod = WFMGrpc.getListAdherenceRuleNotificationConfigsMethod) == null) {
          WFMGrpc.getListAdherenceRuleNotificationConfigsMethod = getListAdherenceRuleNotificationConfigsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListAdherenceRuleNotificationConfigs"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListAdherenceRuleNotificationConfigs"))
              .build();
        }
      }
    }
    return getListAdherenceRuleNotificationConfigsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse> getCreateAdherenceDepartmentalRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateAdherenceDepartmentalRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse> getCreateAdherenceDepartmentalRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse> getCreateAdherenceDepartmentalRuleMethod;
    if ((getCreateAdherenceDepartmentalRuleMethod = WFMGrpc.getCreateAdherenceDepartmentalRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateAdherenceDepartmentalRuleMethod = WFMGrpc.getCreateAdherenceDepartmentalRuleMethod) == null) {
          WFMGrpc.getCreateAdherenceDepartmentalRuleMethod = getCreateAdherenceDepartmentalRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateAdherenceDepartmentalRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateAdherenceDepartmentalRule"))
              .build();
        }
      }
    }
    return getCreateAdherenceDepartmentalRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse> getUpdateAdherenceDepartmentalRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateAdherenceDepartmentalRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse> getUpdateAdherenceDepartmentalRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse> getUpdateAdherenceDepartmentalRuleMethod;
    if ((getUpdateAdherenceDepartmentalRuleMethod = WFMGrpc.getUpdateAdherenceDepartmentalRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateAdherenceDepartmentalRuleMethod = WFMGrpc.getUpdateAdherenceDepartmentalRuleMethod) == null) {
          WFMGrpc.getUpdateAdherenceDepartmentalRuleMethod = getUpdateAdherenceDepartmentalRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateAdherenceDepartmentalRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateAdherenceDepartmentalRule"))
              .build();
        }
      }
    }
    return getUpdateAdherenceDepartmentalRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse> getCreateAdherenceDepartmentalRuleClauseMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateAdherenceDepartmentalRuleClause",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse> getCreateAdherenceDepartmentalRuleClauseMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse> getCreateAdherenceDepartmentalRuleClauseMethod;
    if ((getCreateAdherenceDepartmentalRuleClauseMethod = WFMGrpc.getCreateAdherenceDepartmentalRuleClauseMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateAdherenceDepartmentalRuleClauseMethod = WFMGrpc.getCreateAdherenceDepartmentalRuleClauseMethod) == null) {
          WFMGrpc.getCreateAdherenceDepartmentalRuleClauseMethod = getCreateAdherenceDepartmentalRuleClauseMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateAdherenceDepartmentalRuleClause"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateAdherenceDepartmentalRuleClause"))
              .build();
        }
      }
    }
    return getCreateAdherenceDepartmentalRuleClauseMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse> getUpdateAdherenceDepartmentalRuleClauseMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateAdherenceDepartmentalRuleClause",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse> getUpdateAdherenceDepartmentalRuleClauseMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse> getUpdateAdherenceDepartmentalRuleClauseMethod;
    if ((getUpdateAdherenceDepartmentalRuleClauseMethod = WFMGrpc.getUpdateAdherenceDepartmentalRuleClauseMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateAdherenceDepartmentalRuleClauseMethod = WFMGrpc.getUpdateAdherenceDepartmentalRuleClauseMethod) == null) {
          WFMGrpc.getUpdateAdherenceDepartmentalRuleClauseMethod = getUpdateAdherenceDepartmentalRuleClauseMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateAdherenceDepartmentalRuleClause"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateAdherenceDepartmentalRuleClause"))
              .build();
        }
      }
    }
    return getUpdateAdherenceDepartmentalRuleClauseMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse> getDeleteAdherenceDepartmentalRuleClauseMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteAdherenceDepartmentalRuleClause",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse> getDeleteAdherenceDepartmentalRuleClauseMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse> getDeleteAdherenceDepartmentalRuleClauseMethod;
    if ((getDeleteAdherenceDepartmentalRuleClauseMethod = WFMGrpc.getDeleteAdherenceDepartmentalRuleClauseMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteAdherenceDepartmentalRuleClauseMethod = WFMGrpc.getDeleteAdherenceDepartmentalRuleClauseMethod) == null) {
          WFMGrpc.getDeleteAdherenceDepartmentalRuleClauseMethod = getDeleteAdherenceDepartmentalRuleClauseMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteAdherenceDepartmentalRuleClause"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteAdherenceDepartmentalRuleClause"))
              .build();
        }
      }
    }
    return getDeleteAdherenceDepartmentalRuleClauseMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse> getListAdherenceDepartmentalRulesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListAdherenceDepartmentalRules",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse> getListAdherenceDepartmentalRulesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse> getListAdherenceDepartmentalRulesMethod;
    if ((getListAdherenceDepartmentalRulesMethod = WFMGrpc.getListAdherenceDepartmentalRulesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListAdherenceDepartmentalRulesMethod = WFMGrpc.getListAdherenceDepartmentalRulesMethod) == null) {
          WFMGrpc.getListAdherenceDepartmentalRulesMethod = getListAdherenceDepartmentalRulesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListAdherenceDepartmentalRules"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListAdherenceDepartmentalRules"))
              .build();
        }
      }
    }
    return getListAdherenceDepartmentalRulesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse> getCreateAdherenceAgentRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateAdherenceAgentRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse> getCreateAdherenceAgentRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse> getCreateAdherenceAgentRuleMethod;
    if ((getCreateAdherenceAgentRuleMethod = WFMGrpc.getCreateAdherenceAgentRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateAdherenceAgentRuleMethod = WFMGrpc.getCreateAdherenceAgentRuleMethod) == null) {
          WFMGrpc.getCreateAdherenceAgentRuleMethod = getCreateAdherenceAgentRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateAdherenceAgentRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateAdherenceAgentRule"))
              .build();
        }
      }
    }
    return getCreateAdherenceAgentRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse> getUpdateAdherenceAgentRuleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateAdherenceAgentRule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse> getUpdateAdherenceAgentRuleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse> getUpdateAdherenceAgentRuleMethod;
    if ((getUpdateAdherenceAgentRuleMethod = WFMGrpc.getUpdateAdherenceAgentRuleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateAdherenceAgentRuleMethod = WFMGrpc.getUpdateAdherenceAgentRuleMethod) == null) {
          WFMGrpc.getUpdateAdherenceAgentRuleMethod = getUpdateAdherenceAgentRuleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateAdherenceAgentRule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateAdherenceAgentRule"))
              .build();
        }
      }
    }
    return getUpdateAdherenceAgentRuleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse> getCreateAdherenceAgentRuleClauseMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "CreateAdherenceAgentRuleClause",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse> getCreateAdherenceAgentRuleClauseMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse> getCreateAdherenceAgentRuleClauseMethod;
    if ((getCreateAdherenceAgentRuleClauseMethod = WFMGrpc.getCreateAdherenceAgentRuleClauseMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getCreateAdherenceAgentRuleClauseMethod = WFMGrpc.getCreateAdherenceAgentRuleClauseMethod) == null) {
          WFMGrpc.getCreateAdherenceAgentRuleClauseMethod = getCreateAdherenceAgentRuleClauseMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "CreateAdherenceAgentRuleClause"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("CreateAdherenceAgentRuleClause"))
              .build();
        }
      }
    }
    return getCreateAdherenceAgentRuleClauseMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse> getUpdateAdherenceAgentRuleClauseMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "UpdateAdherenceAgentRuleClause",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse> getUpdateAdherenceAgentRuleClauseMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse> getUpdateAdherenceAgentRuleClauseMethod;
    if ((getUpdateAdherenceAgentRuleClauseMethod = WFMGrpc.getUpdateAdherenceAgentRuleClauseMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getUpdateAdherenceAgentRuleClauseMethod = WFMGrpc.getUpdateAdherenceAgentRuleClauseMethod) == null) {
          WFMGrpc.getUpdateAdherenceAgentRuleClauseMethod = getUpdateAdherenceAgentRuleClauseMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "UpdateAdherenceAgentRuleClause"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("UpdateAdherenceAgentRuleClause"))
              .build();
        }
      }
    }
    return getUpdateAdherenceAgentRuleClauseMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse> getListAdherenceAgentRulesMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "ListAdherenceAgentRules",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse> getListAdherenceAgentRulesMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse> getListAdherenceAgentRulesMethod;
    if ((getListAdherenceAgentRulesMethod = WFMGrpc.getListAdherenceAgentRulesMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getListAdherenceAgentRulesMethod = WFMGrpc.getListAdherenceAgentRulesMethod) == null) {
          WFMGrpc.getListAdherenceAgentRulesMethod = getListAdherenceAgentRulesMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest, com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "ListAdherenceAgentRules"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("ListAdherenceAgentRules"))
              .build();
        }
      }
    }
    return getListAdherenceAgentRulesMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse> getDeleteAdherenceAgentRuleClauseMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "DeleteAdherenceAgentRuleClause",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse> getDeleteAdherenceAgentRuleClauseMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse> getDeleteAdherenceAgentRuleClauseMethod;
    if ((getDeleteAdherenceAgentRuleClauseMethod = WFMGrpc.getDeleteAdherenceAgentRuleClauseMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getDeleteAdherenceAgentRuleClauseMethod = WFMGrpc.getDeleteAdherenceAgentRuleClauseMethod) == null) {
          WFMGrpc.getDeleteAdherenceAgentRuleClauseMethod = getDeleteAdherenceAgentRuleClauseMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest, com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "DeleteAdherenceAgentRuleClause"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("DeleteAdherenceAgentRuleClause"))
              .build();
        }
      }
    }
    return getDeleteAdherenceAgentRuleClauseMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse> getAgentGetScheduleMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "AgentGetSchedule",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse> getAgentGetScheduleMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse> getAgentGetScheduleMethod;
    if ((getAgentGetScheduleMethod = WFMGrpc.getAgentGetScheduleMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getAgentGetScheduleMethod = WFMGrpc.getAgentGetScheduleMethod) == null) {
          WFMGrpc.getAgentGetScheduleMethod = getAgentGetScheduleMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest, com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "AgentGetSchedule"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("AgentGetSchedule"))
              .build();
        }
      }
    }
    return getAgentGetScheduleMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse> getAgentListLeavePetitionsMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "AgentListLeavePetitions",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse> getAgentListLeavePetitionsMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse> getAgentListLeavePetitionsMethod;
    if ((getAgentListLeavePetitionsMethod = WFMGrpc.getAgentListLeavePetitionsMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getAgentListLeavePetitionsMethod = WFMGrpc.getAgentListLeavePetitionsMethod) == null) {
          WFMGrpc.getAgentListLeavePetitionsMethod = getAgentListLeavePetitionsMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest, com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "AgentListLeavePetitions"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("AgentListLeavePetitions"))
              .build();
        }
      }
    }
    return getAgentListLeavePetitionsMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse> getAgentCreateLeavePetitionMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "AgentCreateLeavePetition",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse> getAgentCreateLeavePetitionMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse> getAgentCreateLeavePetitionMethod;
    if ((getAgentCreateLeavePetitionMethod = WFMGrpc.getAgentCreateLeavePetitionMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getAgentCreateLeavePetitionMethod = WFMGrpc.getAgentCreateLeavePetitionMethod) == null) {
          WFMGrpc.getAgentCreateLeavePetitionMethod = getAgentCreateLeavePetitionMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "AgentCreateLeavePetition"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("AgentCreateLeavePetition"))
              .build();
        }
      }
    }
    return getAgentCreateLeavePetitionMethod;
  }

  private static volatile io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse> getAgentCancelLeavePetitionMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "AgentCancelLeavePetition",
      requestType = com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest.class,
      responseType = com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest,
      com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse> getAgentCancelLeavePetitionMethod() {
    io.grpc.MethodDescriptor<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse> getAgentCancelLeavePetitionMethod;
    if ((getAgentCancelLeavePetitionMethod = WFMGrpc.getAgentCancelLeavePetitionMethod) == null) {
      synchronized (WFMGrpc.class) {
        if ((getAgentCancelLeavePetitionMethod = WFMGrpc.getAgentCancelLeavePetitionMethod) == null) {
          WFMGrpc.getAgentCancelLeavePetitionMethod = getAgentCancelLeavePetitionMethod =
              io.grpc.MethodDescriptor.<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest, com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "AgentCancelLeavePetition"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse.getDefaultInstance()))
              .setSchemaDescriptor(new WFMMethodDescriptorSupplier("AgentCancelLeavePetition"))
              .build();
        }
      }
    }
    return getAgentCancelLeavePetitionMethod;
  }

  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static WFMStub newStub(io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<WFMStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<WFMStub>() {
        @java.lang.Override
        public WFMStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new WFMStub(channel, callOptions);
        }
      };
    return WFMStub.newStub(factory, channel);
  }

  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static WFMBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<WFMBlockingStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<WFMBlockingStub>() {
        @java.lang.Override
        public WFMBlockingStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new WFMBlockingStub(channel, callOptions);
        }
      };
    return WFMBlockingStub.newStub(factory, channel);
  }

  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static WFMFutureStub newFutureStub(
      io.grpc.Channel channel) {
    io.grpc.stub.AbstractStub.StubFactory<WFMFutureStub> factory =
      new io.grpc.stub.AbstractStub.StubFactory<WFMFutureStub>() {
        @java.lang.Override
        public WFMFutureStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
          return new WFMFutureStub(channel, callOptions);
        }
      };
    return WFMFutureStub.newStub(factory, channel);
  }

  /**
   * <pre>
   * WFM is responsible for call prediction and call volume calculations based on call skills and other parameters.
   * </pre>
   */
  public interface AsyncService {

    /**
     * <pre>
     * Starts the tasks to perform the initial setup on wfm services for the org sending the request.
     * It will then report the state of their setup task.
     * A new setup task will only be started if the client hasn't done one before, or their setup failed previously.
     * Errors:
     *  - grpc.Internal: error occurs when performing the initial setup.
     * </pre>
     */
    default void performInitialClientSetup(com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getPerformInitialClientSetupMethod(), responseObserver);
    }

    /**
     * <pre>
     * Create an initial set of demo activities for the org sending the requests.
     * If any non skill activities already exist matching the names of the demo non skill activities, a second copy will not be created.
     * Required permissions:
     *   NONE
     * Errors:
     *   - grpc.Internal: error occurs when creating the activities or checking if they already exist.
     * </pre>
     */
    default void createInitialDemoActivities(com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateInitialDemoActivitiesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Retrieves all the skill profiles of the org sending the request.
     * Also it can return the skills of each of the returned profiles.
     * Errors:
     * </pre>
     */
    default void listSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListSkillProfilesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the &#64;name, and averages of a skill profile that has the given &#64;skill_profile_sid.
     * It also updates it to no longer be unnamed.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid, &#64;name or averages in the request are invalid.
     *   - grpc.Internal: error occurs when updating the skill profile.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     * </pre>
     */
    default void updateSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateSkillProfileMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the &#64;proficiencies for the given skill profile's skills that belong the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;proficiencies in the request are invalid.
     *   - grpc.Internal: error occurs when updating the skill profiles proficiencies.
     * </pre>
     */
    default void updateSkillProfileProficiencies(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateSkillProfileProficienciesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Get a skill profile that has the given &#64;skill_profile_sid.
     * It also gets all the skills and the mappings associated with that profile.
     * If the &#64;inactive_as_of_date of the skill profile is nil then the mapping is of inactive profiles to this one,
     * otherwise the mapping is of this profile to an active one.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.Internal: error occurs when getting the skill profile.
     *   - grpc.NotFound: skill profile doesn't exist.
     * </pre>
     */
    default void getSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetSkillProfileMethod(), responseObserver);
    }

    /**
     * <pre>
     * Resyncs the skill profiles of the org sending the request.
     * It will add skills and skill profiles based on that client's historical call data.
     * Errors:
     *   - grpc.Internal: error occurs when creating the new skills and skill profiles.
     * </pre>
     */
    default void resyncSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getResyncSkillProfilesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the last date of a skill profile resync for the org seding the request.
     * If the org has never done a skill profile resync &#64;resync_date will not be set.
     * Errors:
     *   - grpc.Internal: error occurs when getting the resync date.
     * </pre>
     */
    default void getLastSkillProfileResyncDate(com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetLastSkillProfileResyncDateMethod(), responseObserver);
    }

    /**
     * <pre>
     * Tries to create an entry for the given forecasting parameters for the org sending the request.
     * If the org already has an entry for them, it will update the already existing entry.
     * Errors:
     *   - grpc.Invalid: the &#64;forecasting_parameters in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the parameters.
     * </pre>
     */
    default void upsertForecastingParameters(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertForecastingParametersMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the forecasting parameters for the org sending the request.
     * If the org hasn't created any parameters, it will return the default parameters.
     * Errors:
     *   - grpc.Internal: error occurs when getting the parameters.
     * </pre>
     */
    default void getForecastingParameters(com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetForecastingParametersMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the state of the cache for the org sending the request, and if the cache's state is not_loaded, or loading_failed,
     * it will start the loading task before returning the current state.
     * DEPRECATED as of Dec/13/2023 - Use PerformInitialClientSetup instead.
     * Errors:
     *  -grpc.Internal: error occurs when getting the cache info.
     * </pre>
     */
    @java.lang.Deprecated
    default void getClientHistoryCacheInfo(com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetClientHistoryCacheInfoMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the historical data for the org sending the request and the given &#64;skill_profile_category.
     * It will look through the client's call history and generate the historical data by using their configured forecasting parameters (historical data period and interval width).
     * The duration of each interval will be the interval width of the org's forecasting parameters.
     * It also applies any deltas that the client has stored for the given &#64;skill_profile_category, if the category is a group it will use the deltas of the skill profiles part of that group.
     * If the client has no historical data, only the deltas will be applied to the returned intervals, all other intervals will have nil averages.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_category given is not found for the org.
     *   - grpc.Internal: error occurs when getting the historical data.
     * </pre>
     */
    default void listHistoricalData(com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListHistoricalDataMethod(), responseObserver);
    }

    /**
     * <pre>
     * Tries to create an entry for the given &#64;delta for the org sending the request.
     * If the org already has an entry for it, it will update the already exisiting entry.
     * Errors:
     *   - grpc.Invalid: the &#64;delta in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the historical data interval.
     * </pre>
     */
    default void upsertHistoricalDataDelta(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertHistoricalDataDeltaMethod(), responseObserver);
    }

    /**
     * <pre>
     * Tries to create entries for the given &#64;deltas.
     * If the given org already has an entry for any of the deltas, it will replace the already existing entries.
     * This is made into a unary due to the UI's lack of support for client streams.
     * Errors:
     *   - grpc.Invalid: the &#64;deltas in the request are invalid.
     *   - grpc.Internal: error occurs when upserting the historical data deltas.
     * </pre>
     */
    default void upsertHistoricalDataDeltas(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertHistoricalDataDeltasMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets all the skills that the org sending the request has.
     * Skills returned will be sorted by &#64;skill_sid in ascending order.
     * Errors:
     *   - grpc.Internal: error occurs when getting the skills.
     * </pre>
     */
    default void listSkills(com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListSkillsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds and returns a call profile template for the org sending the request and the given &#64;skill_profile_sid.
     * The template will be generated using the training data for said skill profile using the &#64;training_data_range and &#64;averages_calculation_range_in_months
     * from the client's saved forecasting parameters.
     * The &#64;total_calls in the returned template be summed from the (&#64;training_data_start_datetime - &#64;averages_calculation_range_in_months) to &#64;training_data_end_datetime,
     * or from &#64;training_data_start_datetime to &#64;training_data_end_datetime if &#64;averages_calculation_range_in_months is 0.
     * The fixed averages fields in the call profile template, will be set to the averages that the skill profile has.
     * DEPRECATED as of Sep/7/2023 - Use BuildCallProfileTemplate instead.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid given is not found for the org.
     *   - grpc.Internal: error occurs when building the call profile template.
     * </pre>
     */
    @java.lang.Deprecated
    default void buildCallProfileTemplateForSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildCallProfileTemplateForSkillProfileMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds and returns a call profile template for the org sending the request and the given &#64;skill_profile_category.
     * The template will be generated using the training data for said skill profile category using the &#64;training_data_range and &#64;averages_calculation_range_in_months
     * from the client's saved forecasting parameters.
     * The &#64;total_calls in the returned template be summed from the (&#64;training_data_start_datetime - &#64;averages_calculation_range_in_months) to &#64;training_data_end_datetime,
     * or from &#64;training_data_start_datetime to &#64;training_data_end_datetime if &#64;averages_calculation_range_in_months is 0.
     * The fixed averages fields in the call profile template, will be set to the averages that the skill profile category has.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_category given is not found for the org.
     *   - grpc.Internal: error occurs when building the call profile template.
     * </pre>
     */
    default void buildCallProfileTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildCallProfileTemplateMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a mapping entry for the &#64;inactive_skill_profile_sid to the &#64;active_skill_profile_sid for the org sending the request.
     * DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
     * Errors:
     *   - grpc.Invalid: the &#64;inactive_skill_profile_sid, or &#64;active_skill_profile_sid in the request are invalid.
     *                   the &#64;inactive_skill_profile_sid given is of an active skill profile.
     *                   the &#64;active_skill_profile_sid given is of an inactive skill profile.
     *   - grpc.Internal: error occurs when creating the inactive skill profile mapping.
     * </pre>
     */
    @java.lang.Deprecated
    default void createInactiveSkillProfileMapping(com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateInactiveSkillProfileMappingMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets a list of enums that represent all of the forecaster types that are currently available for use
     * Errors:
     *  -grpc.Internal: error occurs when contacting the forecaster to get the available forecaster types.
     * </pre>
     */
    default void getAvailableRegressionForecasterModelTypes(com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetAvailableRegressionForecasterModelTypesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Changes the current mapping for the given &#64;inactive_skill_profile_sid to be disconnected.
     * DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
     * Errors:
     *   - grpc.Invalid: the &#64;inactive_skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the skill profile is not found for the org.
     *   - grpc.Internal: the current mapping for the given &#64;inactive_skill_profile_sid is already disconnected,
     *				            the given &#64;inactive_skill_profile_sid is of an active skill profile.
     * </pre>
     */
    @java.lang.Deprecated
    default void disconnectInactiveSkillProfileMapping(com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDisconnectInactiveSkillProfileMappingMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;skill_profile_group.
     * &#64;skill_profile_group_sids will be ignored since associations cannot be created by this method.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group in the request is invalid.
     *   - grpc.Internal: error occurs creating the skill profile group.
     * </pre>
     */
    default void createSkillProfileGroup(com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateSkillProfileGroupMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given &#64;skill_profile_group that has the &#64;skill_profile_group_sid for the org sending the request.
     * &#64;skill_profile_group_sids will be ignored since associations cannot be updated by this method.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group in the request is invalid.
     *   - grpc.NotFound: the skill profile group to update doesn't exist.
     *   - grpc.Internal: error occurs updating the skill profile group.
     * </pre>
     */
    default void updateSkillProfileGroup(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateSkillProfileGroupMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the skill profile groups that have the &#64;skill_profile_group_sids for the org sending the request.
     * if &#64;include_inactive is true then inactive groups will also be included, otherwise only active groups will be returned.
     * If &#64;skill_profile_group_sids is empty it will get all the skill profile groups for the org.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group_sids in the request is invalid.
     *   - grpc.Internal: error occurs getting the skill profile groups.
     * </pre>
     */
    default void listSkillProfileGroups(com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListSkillProfileGroupsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates associations of the given &#64;skill_profile_group_sid for the org sending the request.
     * It will create the associations with the &#64;skill_profile_sids_to_associate, and remove the associations with the &#64;skill_profile_sids_to_disassociate.
     * Only one of the skill_profile_sids fields needs to be set, but both can be set on the same request.
     * Errors:
     *   - grpc.Invalid: the values in the request are invalid.
     *   - grpc.Internal: error occurs updating the skill profile group associations.
     * </pre>
     */
    default void updateSkillProfileGroupAssociations(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateSkillProfileGroupAssociationsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes deltas whose dates match the given &#64;start_datetimes for the given &#64;skill_profile_sid.
     * If no &#64;start_datetimes are given, it will delete all the deltas that the given &#64;skill_profile_sid has.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid, or &#64;start_datetimes in the request are invalid.
     *   - grpc.NotFound: no matching deltas are found for deletion.
     *   - grpc.Internal: error occurs during the deletion of the historical data interval.
     * </pre>
     */
    default void deleteHistoricalDataDeltas(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteHistoricalDataDeltasMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the top N skill profiles with the highest calls_count for org sending the request where N is &#64;max_number_of_profiles.
     * It will also return the number of skills found for that profile.
     * Individual skills that each profile has will not be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;max_number_of_profiles in the request is invalid.
     *   - grpc.Internal: error occurs when getting the skill profiles.
     * </pre>
     */
    default void listTopSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListTopSkillProfilesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the total number of skill profiles associated with the org sending the request.
     * Errors:
     *   - grpc.Internal: error occurs when getting the skill profiles count.
     * </pre>
     */
    default void getSkillProfilesCount(com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetSkillProfilesCountMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds a profile forecast using the provided &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * (&#64;training_data_range_end_datetime - &#64;forecast_test_range_in_weeks) to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category or &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the building of the profile forecast.
     * </pre>
     */
    default void buildProfileForecastByInterval(com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildProfileForecastByIntervalMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds a profile forecast using the provided &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * (&#64;training_data_range_end_datetime - &#64;forecast_test_range_in_weeks) to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * It also returns the statistics of the produced forecast by using the test data of the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category or &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the building of the profile forecast.
     * </pre>
     */
    default void buildProfileForecastByIntervalWithStats(com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildProfileForecastByIntervalWithStatsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds a profile forecast for the given &#64;skill_profile_sid and org sending the request using the given &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * &#64;forecast_range_start_datetime to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
     * The intervals produced will be saved in the database.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid or &#64;call_profile_template in the request are invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid doesn't exist.
     *   - grpc.Internal: error occurs when upserting the profile forecast.
     * </pre>
     */
    default void upsertProfileForecast(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertProfileForecastMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;call_profile_template for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the creation of the call profile.
     * </pre>
     */
    default void createCallProfileTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateCallProfileTemplateMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes a call profile template for the requesting org that has the given &#64;call_profile_template_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;call_profile_template_sid in the request is invalid.
     *   - grpc.Internal: error occurs during the deletion of the call profile.
     * </pre>
     */
    default void deleteCallProfileTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteCallProfileTemplateMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates an entry for the &#64;regression_template for the requesting org.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs when creating the regression template.
     * </pre>
     */
    default void createRegressionTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateRegressionTemplateMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes a regression template for the requesting org that has the given &#64;regression_template_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template_sid in the request is invalid.
     *   - grpc.Internal: error occurs during the deletion of the regression template.
     * </pre>
     */
    default void deleteRegressionTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteRegressionTemplateMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets all the regression templates that the org sending the request has.
     * Errors:
     *   - grpc.Internal: error occurs when getting the regression templates.
     * </pre>
     */
    default void listRegressionTemplates(com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListRegressionTemplatesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_sid.
     * DEPRECATED as of Sep/13/2023 - Use ListForecastIntervals instead.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    @java.lang.Deprecated
    default void listForecastIntervalsForSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListForecastIntervalsForSkillProfileMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    default void listForecastIntervals(com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListForecastIntervalsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    default void listForecastIntervalsV2(com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListForecastIntervalsV2Method(), responseObserver);
    }

    /**
     * <pre>
     * Generates a regression forecast using the provided &#64;regression_template.
     * It will generate forecast intervals for the skill profiles sids in &#64;skill_profile_sids_to_forecast.
     * It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
     * It will use the client's saved interval width to divide the resulting forecast intervals.
     * Errors:
     *   - grpc.Invalid: no &#64;skill_profile_sids_to_forecast are given or the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs during the building of the regression forecast.
     * </pre>
     */
    default void buildRegressionForecastByInterval(com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildRegressionForecastByIntervalMethod(), responseObserver);
    }

    /**
     * <pre>
     * Generates a regression forecast and calculates forecast statistics using the provided &#64;regression_template.
     * It will generate forecast intervals for the skill profiles sids in &#64;skill_profile_sids_to_forecast.
     * It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
     * It will use the client's saved interval width to divide the resulting forecast intervals.
     * The first message received will be the forecast statistics while all subsequent ones will be the forecast intervals.
     * Errors:
     *   - grpc.Invalid: no &#64;skill_profile_sids_to_forecast are given or the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs either during the when building the forecast or calculating the stats.
     * </pre>
     */
    default void buildRegressionForecastByIntervalWithStats(com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildRegressionForecastByIntervalWithStatsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the call profile templates that the org sending the request has.
     * Errors:
     *   - grpc.Internal: error occurs when getting the templates.
     * </pre>
     */
    default void listCallProfileTemplates(com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListCallProfileTemplatesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds a regression forecast for the org using the given &#64;regression_template and saves the resulting intervals in the db.
     * It will generate forecast intervals for the skill profiles sids in &#64;save_forecasts_for_skill_profile_sids,
     * if the list is empty or has no valid skill profile sids, it will generate and save forecasts for all active skill profiles.
     * If any intervals produced already exist in the db, they will be replaced with the ones produced.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the regression forecast.
     * </pre>
     */
    default void upsertRegressionForecast(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertRegressionForecastMethod(), responseObserver);
    }

    /**
     * <pre>
     * Tries to create an entry for the given &#64;delta for the org sending the request.
     * If the org already has an entry for it, it will update the already exisiting entry.
     * Errors:
     *   - grpc.Invalid: the &#64;delta in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the forecast data delta.
     * </pre>
     */
    default void upsertForecastDataDelta(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertForecastDataDeltaMethod(), responseObserver);
    }

    /**
     * <pre>
     * Tries to create entries for the given &#64;deltas.
     * If the org already has entries for any of them, it will update the already existing entry.
     * Errors:
     *   - grpc.Invalid: the &#64;deltas in the request are invalid.
     *   - grpc.Internal: error occurs when upserting the forecast data deltas.
     * </pre>
     */
    default void upsertForecastDataDeltas(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertForecastDataDeltasMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes forecast data intervals/deltas based on the parameters provided.
     * If &#64;delete_param is type skill_profile_category, then the intervals/deltas to be deleted will be
     * associated with that id. If &#64;delete_param is type interval_sids, then the intervals/deltas to be
     * deleted will be contained in the list &#64;interval_sids. The &#64;delete_type field determines which
     * table(s) in the database the intervals/deltas will be deleted from.
     * Errors:
     *   - grpc.Invalid: one of the &#64;delete_params is invalid
     *   - grpc.NotFound: no matching intervals/deltas are found for deletion.
     *   - grpc.Internal: error occurs during the deletion of the forecast data intervals/deltas.
     * </pre>
     */
    default void deleteForecastIntervals(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteForecastIntervalsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Retrieves the history for all the skill profiles of the requesting org.
     * Each value in every interval that has the same &#64;start_datetime of each skill profile will be summed then averaged and made into a single one.
     * When calculating the averages, each interval's values will be weighted by the number of &#64;total_calls it has.
     * History will be sorted by &#64;start_datetime in ascending order, and the range is determined by the client's historical range.
     * Errors:
     *   - grpc.Internal: error occurs when retriving the history.
     * </pre>
     */
    default void listHistoricalDataForAllSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListHistoricalDataForAllSkillProfilesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Converts the given &#64;profile_tod and &#64;profile_woms to a ProfileDOW and ProfileMOY.
     * Errors:
     *   - grpc.Invalid: the &#64;profile_tod or &#64;profile_woms in the request are invalid.
     *   - grpc.Internal: error occurs when building the ProfileDOW or ProfileMOY.
     * </pre>
     */
    default void buildDOWAndMOYProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildDOWAndMOYProfilesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Calculates and returns the averages in the training data for the given &#64;skill_profile_sid.
     * Averages to be returned will be weighted by the number of calls that each training data interval has.
     * The start time that the training data will be averaged can be modified based on the forecasting parameter &#64;averages_calculation_range_in_months,
     * which will subtract that many months from the training data range end datetime and set it as the start time.
     * If &#64;averages_calculation_range_in_months is 0, it will use the training data range start datetime.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid given is not found.
     *   - grpc.Internal: error occurs when calculating the averages from the training data.
     * </pre>
     */
    default void calculateTrainingDataAveragesForSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCalculateTrainingDataAveragesForSkillProfileMethod(), responseObserver);
    }

    /**
     * <pre>
     * Calculates the averages for call characteristics using the historical data of the given &#64;skill_profile_sids, &#64;skill_profile_group_sids and org sending the request.
     * If no &#64;skill_profile_sids are given, it will calculate the averages for all skill profiles for the org sending the request.
     * If no &#64;skill_profile_group_sids are given, it will calculate the averages for all skill profile groups for the org sending the request.
     * Averages will be weighted by the number of calls that each historical data interval has.
     * Once the averages are calculated, they will be updated in the db for those skill profiles.
     * If a nil &#64;datetime_range is given then the range used will be &#64;training_data_range_end_datetime - &#64;averages_calculation_range_in_months to the &#64;training_data_range_end_datetime from the forecasting parameters.
     * If &#64;averages_calculation_range_in_months is 0, it will use the &#64;training_data_range_start_datetime as the start datetime of the range.
     * If &#64;exclude_skill_profiles_with_manual_averages is true, it will exclude skill profiles and groups that have manual averages from the calculation
     * even if those skill profiles and groups are in &#64;skill_profile_sids or &#64;skill_profile_group_sids respectively.
     * Errors:
     *   - grpc.Internal: error occurs when calculating the averages from the historical data.
     * </pre>
     */
    default void updateSkillProfileAveragesUsingHistoricalData(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateSkillProfileAveragesUsingHistoricalDataMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the call center &#64;node that has the given &#64;call_center_node_sid.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this call center node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the one or more of the fields in the request are invalid.
     *   - grpc.Internal: error occurs when updating the call center node.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     * </pre>
     */
    default void updateCallCenterNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateCallCenterNodeMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given client &#64;node for the org sending the request and &#64;parent_sid in the node.
     * The &#64;client_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent call center node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;parent_sid, or &#64;time_zone_val is invalid.
     *   - grpc.NotFound: parent call center node doesn't exist, or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the client node.
     * </pre>
     */
    default void createClientNode(com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateClientNodeMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a client node for the org sending the request that has the given &#64;client_node_sid and &#64;schedule_scenario_sid.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this client node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.Internal: error occurs when updating the client &#64;node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given &#64;parent_sid (call_center_node_sid) belongs to a different scenario than this &#64;node.
     * </pre>
     */
    default void updateClientNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateClientNodeMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given location &#64;node for the org sending the request and parent &#64;client_node_sid.
     * The &#64;location_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent client node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.NotFound: parent client node doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the location node.
     * </pre>
     */
    default void createLocationNode(com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateLocationNodeMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a location node corresponding to the given &#64;location_node_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this location node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;location_node have invalid values.
     *   - grpc.Internal: error occurs when updating the location node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given parent &#64;client_node_sid belongs to a different scenario than the node to update.
     * </pre>
     */
    default void updateLocationNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateLocationNodeMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given program &#64;node for the org sending the request and parent &#64;location_node_sid.
     * The &#64;program_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent location node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.NotFound: parent location node doesn't exist or belongs to a different scenario than the one given.
     *                    the &#64;skill_profile_category does not exist.
     *   - grpc.Internal: error occurs when creating the program node.
     * </pre>
     */
    default void createProgramNode(com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateProgramNodeMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a program node for the given &#64;program_node_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this program node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;program_node have invalid values.
     *   - grpc.Internal: error occurs when updating the program node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given parent &#64;location_node_sid belongs to a different scenario than the program node to update.
     *                    the &#64;skill_profile_category does not exist.
     * </pre>
     */
    default void updateProgramNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateProgramNodeMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the program nodes with the given &#64;program_node_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the given &#64;program_node_sids are invalid.
     *   - grpc.Internal: error occurs when listing the program nodes.
     * </pre>
     */
    default void listProgramNodesBySid(com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListProgramNodesBySidMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;constraint_rule for the org sending the request.
     * The &#64;constraint_rule_sid and &#64;skill_proficiency_sid (if one was created) of the new entities will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * If &#64;rule_type is set to MIN_SKILL_LEVEL, the &#64;member_target_entity field must be set with a skill proficiency and the &#64;constraint_rule.target_sid will be ignored.
     * If the &#64;member_target_entity is for a skill proficiency, that skill proficiency will be created with the given &#64;constraint_rule as parent.
     * If &#64;rule_type is NOT MIN_SKILL_LEVEL then the &#64;target_sid must be that of a scheduling activity.
     * The all other &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;constraint_rule have invalid values.
     *   - grpc.NotFound: the given &#64;target_sid for the given &#64;rule_type, or &#64;parent_entity don't exist.
     *   - grpc.Internal: error occurs when creating the constraint rule.
     * </pre>
     */
    default void createConstraintRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateConstraintRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the constraint rule corresponding for given &#64;contraint_rule_sid for the org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this constraint rule since it cannot be changed.
     * If &#64;rule_type is set to MIN_SKILL_LEVEL, the &#64;member_target_entity field must be set with a skill proficiency, otherwise it should not be set and field will be ignored.
     * If the &#64;target_sid is for a different skill proficiency than the current one the constraint rule has as a target,
     * the old one will be deleted and a new one will be created for the given &#64;member_target_entity.
     * If &#64;rule_type is NOT MIN_SKILL_LEVEL then the &#64;target_sid must be that of a scheduling activity.
     * The all other &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;constraint_rule have invalid values.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the constraint rule.
     *                  : the given &#64;target_sid for the given &#64;rule_type, or &#64;parent_entity don't exist.
     *   - grpc.Internal: error occurs when updating the constraint rule.
     * </pre>
     */
    default void updateConstraintRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateConstraintRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes a constraint rule with the coresponding &#64;constraint_rule_sid for the org sending the request.
     * It also deletes the entity referenced by the &#64;target_sid and &#64;rule_type if said entity is not a member of any other entity or the on call scheduling activity.
     * Errors:
     *   - grpc.Invalid: the &#64;constraint_rule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;constraint_rule doesn't exist.
     *   - grpc.Internal: error occurs when removing the constraint rule.
     * </pre>
     */
    default void deleteConstraintRule(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteConstraintRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;non_skill_activity for the org sending the request.
     * Will also create a scheduling activity wrapper for the non skill activity.
     * The &#64;non_skill_activity_sid and &#64;scheduling_activity_sid of the new entities will be returned in the response.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;non_skill_activity have invalid values.
     *   - grpc.NotFound: the &#64;schedule_scenario_sid doesn't exist.
     *   - grpc.Internal: error occurs when creating the non skill activity or scheduling activity.
     * </pre>
     */
    default void createNonSkillActivity(com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateNonSkillActivityMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a non skill activity that has the given &#64;non_skill_activity_sid with the given values.
     * Errors:
     *   - grpc.Invalid: &#64;non_skill_activity fields have invalid values.
     *   - grpc.NotFound: non skill activity for the given &#64;non_skill_activity_sid doesn't exist.
     *   - grpc.Internal: error occurs when updating the non skill activity.
     * </pre>
     */
    default void updateNonSkillActivity(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateNonSkillActivityMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the non skill activities that belong to the org sending the request.
     * Errors:.
     *   - grpc.Internal: error occurs when listing the activites.
     * </pre>
     */
    default void listNonSkillActivities(com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListNonSkillActivitiesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the IDs of non skill activities that belong to the org sending the request which have the given &#64;relationship_type with the &#64;associated_entity.
     * Errors:
     *   - grpc.Invalid: the &#64;associated_entity or &#64;relationship_type are invalid.
     *   - grpc.Internal: error occurs when listing the associations.
     * </pre>
     */
    default void listNonSkillActivityAssociations(com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListNonSkillActivityAssociationsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the candidate scheduling activities for a constraint or placement rule, inherited through given &#64;parent_of_rule for &#64;schedule_scenario_sid for the org making the request.
     * &#64;parent_of_rule may be any type of node, agent group, or shift template which the rule will belong to.
     * If the rule will belong to a wfm agent, the agent group must be supplied instead to get a relevant set of candidate scheduling activities.
     * Member non skill activity of each scheduling activity will be included in the response.
     * The on call scheduling activity will always be included.
     * Errors:
     *   - grpc.Invalid: the &#64;parent_of_rule is invalid.
     *   - grpc.NotFound: &#64;parent_of_rule doesn't exist
     *   - grpc.Internal: error occurs when applying inheritance or getting the nodes from &#64;parent_of_rule.
     * </pre>
     */
    default void listCandidateSchedulingActivities(com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListCandidateSchedulingActivitiesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists all the scheduling activities for the org making the request.
     * Their member non skill activities and pause codes will always be included.
     * Errors:
     *   - grpc.Internal: error occurs when getting the activities or its members.
     * </pre>
     */
    default void listSchedulingActivities(com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListSchedulingActivitiesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the on call scheduling activity for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   -grpc.NotFound: the on call scheduling activity for the org is not found.
     *   -grpc.Internal: error occurs when getting on call scheduling activity.
     * </pre>
     */
    default void getOnCallSchedulingActivity(com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetOnCallSchedulingActivityMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the Open Time and Agent Availability patterns for the given &#64;parent_entity and &#64;scheduling_activity_classifications for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   - grpc.Invalid: the arguments in the request are invalid.
     *   - grpc.Internal: error occurs getting the patterns or their scheduling activity sids.
     * </pre>
     */
    default void listPatternsForSchedulingActivityClassifications(com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListPatternsForSchedulingActivityClassificationsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the time off scheduling activity for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   -grpc.NotFound: the time off scheduling activity for the org is not found.
     *   -grpc.Internal: error occurs when getting time off scheduling activity.
     * </pre>
     */
    default void getTimeOffSchedulingActivity(com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetTimeOffSchedulingActivityMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates an agent group with the provided parameters.
     * A successful response should contain the &#64;agent_group_sid of the newly created entity.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, or &#64;parent_entity are invalid.
     *   - grpc.NotFound: &#64;parent_entity doesn't exist
     *   - grpc.Internal: error occurs when creating the agent group.
     * </pre>
     */
    default void createAgentGroup(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateAgentGroupMethod(), responseObserver);
    }

    /**
     * <pre>
     * ListAgentScheduleGroups lists all schedulable agent groups for the given &#64;entity filled with &#64;member_wfm_agents for the org sending the request.
     * The given &#64;entity must be either a Node or a ShiftTemplate.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the agent groups.
     * </pre>
     */
    default void listAgentScheduleGroups(com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListAgentScheduleGroupsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the agent group corresponding to the &#64;agent_group_sid, &#64;name, and &#64;parent_entity.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this agent group since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_group_sid, &#64;parent_entity, or &#64;name in the request are invalid.
     *   - grpc.Internal: error occurs when updating the agent group.
     *   - grpc.AlreadyExists: an agent group with the given &#64;name already exists.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the agent group.
     * </pre>
     */
    default void updateAgentGroup(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateAgentGroupMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates an agent that is not assigned a tcn agent for the org sending the request.
     * If &#64;wfm_agent_sid_to_copy_agent_group_associations is set, it will also copy that agent's agent group associations to the new agent.
     * Otherwise only the new agent will be created.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sid_to_copy_agent_group_associations in the request is invalid.
     *   - grpc.Internal: error occurs creating the agent or the memberships.
     *   - grpc.NotFound: the given &#64;wfm_agent_sid_to_copy_agent_group_associations doesn't exist for the org.
     * </pre>
     */
    default void createUnassignedWFMAgent(com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateUnassignedWFMAgentMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a wfm agent for the given &#64;wfm_agent_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * The &#64;tcn_agent_sid cannot be updated.
     * Required permission:
     *   NONE
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;wfm_agent have invalid values.
     *   - grpc.NotFound: WFM agent with the given &#64;wfm_agent_sid doesn't exist.
     *   - grpc.Internal: error occurs when updating the wfm agent.
     * </pre>
     */
    default void updateWFMAgent(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateWFMAgentMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists all wfm agents for the org sending the request.
     * if &#64;include_inactive is true then inactive agents will also be included, otherwise only active agents will be returned.
     * if &#64;include_skill_proficiencies is true then agents returned will include their skill proficiencies.
     * if &#64;include_agent_groups is true then the &#64;agent_groups_by_agent response field will be set with a list of agent groups correlating to each agents index in the &#64;wfm_agents field.
     * if &#64;include_agent_groups is set to true, the &#64;agent_group_schedule_scenario_sid field must be set, so that the agent groups for the correct scenario are returned.
     * if &#64;include_agent_groups is set to true, and &#64;agent_group_schedule_scenario_sid is not set, the agent groups will not be filtered by schedule scenario.
     * if &#64;include_agent_groups is set to false, the &#64;agent_group_schedule_scenario_sid will be ignored.
     * &#64;agent_group_schedule_scenario_sid does not effect which &#64;wfm_agents are returned.
     * WFM agents with no associated agent_groups will have an empty slice in agent_groups_by_agent at their correlated index.
     * Errors:
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    default void listAllWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListAllWFMAgentsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists all candidate wfm agents for the org sending the request and given &#64;agent_group_sid.
     * A WFM agent is considered a candidate when it's active and it doesn't already belong to the given agent group.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Invalid: &#64;agent_group_sid has an invalid value.
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    default void listCandidateWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListCandidateWFMAgentsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists all wfm agents who are not grouped with any agent group for the given org sending the request that were created at or after the given &#64;created_after_datetime.
     * If &#64;schedule_scenario_sid is positive, it will filter further to get only agents who are not grouped with any agent group for that scenario.
     * if &#64;include_skill_proficiencies is true then agents returned will include their skill proficiencies.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Invalid: &#64;created_after_datetime has an invalid value.
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    default void listUngroupedWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListUngroupedWFMAgentsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the wfm_agent_sids with the given &#64;tcn_agent_sids for the org sending the request.
     * Returns a map where Key: tcn_agent_sid - Value: wfm_agent_sid.
     * If the wfm_agent_sid is not found for any &#64;tcn_agent_sids, they will not have an entry in the returned &#64;sids.
     * Errors:
     *  - grpc.Invalid: the &#64;tcn_agent_sids are invalid.
     *  - grpc.Internal: error occours while listing the wfm_agent_sids.
     * </pre>
     */
    default void listWFMAgentSids(com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListWFMAgentSidsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists all wfm agents that don't have a TCN agent assigned to them for the given &#64;orgId.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    default void listUnassignedWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListUnassignedWFMAgentsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the IDs of wfm agents that belong to the org sending the request which are associated with the given &#64;agent_group_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_group_sid is invalid.
     *   - grpc.Internal: error occurs when listing the wfm agents.
     * </pre>
     */
    default void listWFMAgentsAssociatedWithAgentGroup(com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListWFMAgentsAssociatedWithAgentGroupMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a membership association for each of the given &#64;wfm_agent_sids with the given &#64;agent_group_sid.
     * The &#64;schedule_scenario_sid must match the scenario of the agent group and wfm agents.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sid are invalid.
     *   - grpc.NotFound: the &#64;wfm_agent_sids or &#64;agent_group_sid don't exist for the org or given &#64;schedule_scenario_sid.
     *   - grpc.Internal: error occurs when creating the association.
     * </pre>
     */
    default void createWFMAgentMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateWFMAgentMembershipsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Copies the membership association of &#64;originating_wfm_agent_sid to &#64;target_wfm_agent_sid.
     * The wfm agents must both belong to the org sending the request.
     * Any existing membership associations on &#64;target_wfm_agent_sid with be retained.
     * Any conflicting memberships for &#64;target_wfm_agent_sid will be set with the membership of &#64;originating_wfm_agent_sid.
     * Errors:
     *   - grpc.NotFound: the &#64;wfm_agent_sids or &#64;agent_group_sid don't exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the associations.
     * </pre>
     */
    default void copyWFMAgentMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCopyWFMAgentMembershipsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes a membership association for each of the given &#64;wfm_agent_sids with the given &#64;agent_group_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sid are invalid.
     *   - grpc.NotFound: any of the given memberships to delete do not exist.
     *   - grpc.Internal: error occurs when deleting the association.
     * </pre>
     */
    default void deleteWFMAgentMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteWFMAgentMembershipsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes all membership associations for the given &#64;wfm_agent_sids with the given &#64;agent_group_sids.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sids are invalid.
     *   - grpc.Internal: error occurs when deleting the associations.
     * </pre>
     */
    default void deleteWFMAgentsMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteWFMAgentsMembershipsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Removes the &#64;wfm_agent_sid_to_remove from all future shifts for the org.
     * If &#64;replace_with_new_unassigned_agent is set to true, a new unassigned agent will be created and it will be assigned to the shifts and agent groups from &#64;wfm_agent_sid_to_remove.
     * If &#64;replace_with_new_unassigned_agent is set to false, the future shifts will just be deleted.
     * If the &#64;wfm_agent_sid_to_remove is not currently inactive, it will be set as inactive.
     * Errors:
     *   - grpc.Internal: error occurs when deleting the shifts, creating the new unassigned agent, reassigning the shifts to that agent, or setting the agent to inactive.
     * </pre>
     */
    default void removeAgentFromFutureShifts(com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getRemoveAgentFromFutureShiftsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics for the wfm agent associated with the given &#64;wfm_agent_sid or &#64;agent_group_sid for the org sending the request.
     * Response will only contain:
     *    one element if build for a single &#64;wfm_agent_sid.
     *    one element for each WFM agent if build for an &#64;agent_group_sid.
     *   - grpc.Invalid: the &#64;wfm_agent_sid, or &#64;agent_group_sid is invalid.
     *   - grpc.NotFound: the given &#64;wfm_agent_sid doesn't exist or the &#64;agent_group_sid has no agents.
     *   - grpc.Internal: error occurs building the diagnostics.
     * </pre>
     */
    default void buildAgentDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildAgentDiagnosticsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a shift template for the org sending the request with the provided parameters
     * The &#64;shift_template_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent program node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, or &#64;program_node_sid are invalid.
     *   - grpc.AlreadyExists: a shift template with the given &#64;name already exists.
     *   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the shift template.
     * </pre>
     */
    default void createShiftTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateShiftTemplateMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a shift template for the given &#64;shift_template_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this shift template since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the &#64;shift_template_sid, &#64;name, &#64;program_node_sid are invalid.
     *   - grpc.AlreadyExists: a shift template with the given &#64;name already exists.
     *   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the shift template to update.
     *   - grpc.Internal: error occurs when updating the shift template.
     * </pre>
     */
    default void updateShiftTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateShiftTemplateMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the shift templates matching the specified &#64;shift_template_sids for the org sending the request.
     * If &#64;include_placement_rules is set to true, the &#64;shift_templates will be returned with their member placement rules.
     * Errors:
     *   - grpc.Invalid: the &#64;shift_template_sids are invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void listShiftTemplatesBySids(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListShiftTemplatesBySidsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics for the shift template associated with the given &#64;shift_template_sid for the org sending the request.
     *   - grpc.Invalid: the &#64;shift_template_sid is invalid.
     *   - grpc.NotFound: the given &#64;shift_template_sid doesn't exist for the org sending the request.
     *   - grpc.Internal: error occours building the diagnostics for the shift template.
     * </pre>
     */
    default void buildShiftTemplateDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildShiftTemplateDiagnosticsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a placement rule for org sending the request with the provided parameters.
     * The &#64;placement_rule_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent shift template.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;placement_rule are invalid.
     *   - grpc.NotFound: the parent shift template doesn't exist or belongs to a different scenario than the one given.
     *                    the scheduling activity to associate with the placement rule doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the placement rule.
     * </pre>
     */
    default void createPlacementRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreatePlacementRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a placement rule corresponding with the given &#64;placement_rule_sid for the org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this placement rule since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the one or more of the fields in the &#64;placement_rule are invalid.
     *   - grpc.Internal: error occurs when updating the placement rule.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     *                  : the parent shift template or related scheduling activity don't exist or belong to a different scenario than the placement rule to update.
     * </pre>
     */
    default void updatePlacementRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdatePlacementRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes a placement rule with the coresponding &#64;placement_rule_sid for the org sending the request.
     * It also deletes the scheduling activity referenced by the &#64;scheduling_activity_sid if said activity is not a member of any other entity.
     * Errors:
     *   - grpc.Invalid: the &#64;placement_rule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;placement_rule doesn't exist.
     *   - grpc.Internal: error occurs when removing the placement rule.
     * </pre>
     */
    default void deletePlacementRule(com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeletePlacementRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates an open times pattern for the org sending the request with the provided parameters.
     * The &#64;open_times_pattern_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;open_times_pattern are invalid.
     *   - grpc.NotFound: the parent entity doesn't exist.
     *   - grpc.Internal: error occurs when creating the open times pattern.
     * </pre>
     */
    default void createOpenTimesPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateOpenTimesPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates an open times pattern for the given &#64;open_times_pattern_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this open times pattern since it cannot be changed.
     * Required permission:
     *   NONE
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;open_times_pattern have invalid values.
     *   - grpc.NotFound: the given &#64;open_times_pattern or it's &#64;parent_entity doesn't exist.
     *   - grpc.Internal: error occurs when updating the open times pattern.
     * </pre>
     */
    default void updateOpenTimesPattern(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateOpenTimesPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes an open times pattern with the coresponding &#64;open_times_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;open_times_pattern_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;open_times_pattern doesn't exist.
     *   - grpc.Internal: error occurs when removing the open times pattern.
     * </pre>
     */
    default void deleteOpenTimesPattern(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteOpenTimesPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the inherited, own, and resulting bitmaps for the open times patterns of &#64;node_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;node_to_check.
     * If &#64;bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
     * If &#64;bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the open times patterns.
     * If &#64;bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the open times patterns.
     * The bitmaps will be generated for the span of &#64;datetime_range.
     * Errors:
     *   - grpc.Invalid: the &#64;node_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *                 : the &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;node_to_check doesn't exist.
     *   - grpc.Internal: error occurs when getting the open times pattern bitmaps.
     * </pre>
     */
    default void getOpenTimesBitmaps(com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetOpenTimesBitmapsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the datetime ranges over which the given &#64;node_selector open times patterns are open throughout the given &#64;datetime_range for the org sending the request.
     * If the &#64;node_selector is not open during that range, no ranges will be returned.
     * If the &#64;node_selector is opened before or after the given &#64;datetime_range, those times outside of &#64;datetime_range will not be included in the returned &#64;open_close_ranges.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector or &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;node_selector doesn't exist in &#64;schedule_scenario_sid for the org sending the request.
     *   - grpc.Internal: error occurs when getting the open time close times.
     * </pre>
     */
    default void listOpenDateRangesForNodeOpenTimesBitmaps(com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListOpenDateRangesForNodeOpenTimesBitmapsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates an agent availability pattern for the org sending the request with the provided parameters.
     * The &#64;agent_availability_pattern_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;agent_availability_pattern are invalid.
     *   - grpc.NotFound: the parent entity doesn't exist.
     *   - grpc.Internal: error occurs when creating the agent availability pattern.
     * </pre>
     */
    default void createAgentAvailabilityPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateAgentAvailabilityPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates an agent availability pattern for the given &#64;agent_availability_pattern_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this agent availability pattern since it cannot be changed.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;agent_availability_pattern have invalid values.
     *   - grpc.Internal: error occurs when updating the agent avilability pattern.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the agent availability pattern.
     * </pre>
     */
    default void updateAgentAvailabilityPattern(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateAgentAvailabilityPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes an agent availability pattern with the coresponding &#64;agent_availability_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_availability_pattern_sid has an invalid value.
     *   - grpc.NotFound: the &#64;agent_availability_pattern with the given sid doesn't exist.
     *   - grpc.Internal: error occurs when removing the agent availability pattern.
     * </pre>
     */
    default void deleteAgentAvailabilityPattern(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteAgentAvailabilityPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the inherited, own, and resulting bitmaps for the agent availability patterns of &#64;entities_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;entities_to_check.
     * &#64;entities_to_check must have the entity_type field set with a wfm agent, agent group or a type of node.
     * If an availability bitmap is requested for an agent group, the bitmaps for all of it's member agents will be returned instead.
     * The bitmaps will be generated for the span of &#64;datetime_range.
     * If &#64;bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
     * If &#64;bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the availability patterns.
     * If &#64;bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the availability patterns.
     * Errors:
     *   - grpc.Invalid: the &#64;entities_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *                 : the &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;entities_to_check don't exist.
     *   - grpc.Internal: error occurs when getting the agent availability pattern bitmaps.
     * </pre>
     */
    default void getAvailabilityBitmaps(com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetAvailabilityBitmapsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Upserts an association for the given &#64;non_skill_activity_sid to the given &#64;node.
     * All downstream members of the entity will have their inheritance state cleared, and inherit the given association.
     * If an association already exists between the non skill activity and the &#64;node then their &#64;relationship_type will be updated.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * If a NOT_ASSOCIATED_WITH relationship is being created, the tree will be checked for conflicting downstream effects.
     * If any member rules, are referencing the non skill activity and &#64;relationship_type is NOT_ASSOCIATED_WITH, then the upsert will not take effect, and the list of related entities to be updated/removed first will be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;non_skill_activity_sid, &#64;node or &#64;association_type are invalid.
     *                 : the non skill activity and &#64;node belong to different scenarios.
     *   - grpc.NotFound: the &#64;non_skill_activity_sid or &#64;node don't exist.
     *   - grpc.Internal: error occurs when upserting the association.
     * </pre>
     */
    default void upsertNonSkillActivityAssociation(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertNonSkillActivityAssociationMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates skill proficiencies for the org sending the request with the provided parameters.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entities.
     * Errors:
     *   - grpc.Invalid: the parameters in a &#64;proficiency, or the &#64;schedule_scenario_sid are invalid.
     *   - grpc.NotFound: for any of the given &#64;skill_proficiencies:
     *                    the &#64;parent_entity doesn't exist.
     *                    the &#64;skill_sid doesn't exist.
     *                    the skill profile with &#64;preferred_skill_profile_sid doesn't contain the given &#64;skill_sid.
     *   - grpc.AlreadyExists: a skill proficiency with the given &#64;skill_sid and &#64;parent_entity already exists.
     *   - grpc.Internal: error occurs when creating the skill proficiencies.
     * </pre>
     */
    default void createSkillProficiencies(com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateSkillProficienciesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates skill proficiencies corresponding to the given &#64;skill_proficiency_sids and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;skill_sid and &#64;parent_entity field of each proficiency will be ignored since it cannot be updated.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;skill_proficiencies have invalid values.
     *   - grpc.Internal: error occurs when updating the skill proficiencies.
     *   - grpc.NotFound: for any of the given &#64;skill_proficiencies:
     *                    the &#64;skill_sid doesn't exist.
     *                    the skill profile with &#64;preferred_skill_profile_sid doesn't contain the skill of the given skill proficiency.
     *   - grpc.AlreadyExists: a skill proficiency with the given &#64;skill_sid and &#64;parent_entity already exists.
     * </pre>
     */
    default void updateSkillProficiencies(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateSkillProficienciesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes a skill proficiency with the corresponding &#64;skill_proficiency_sid for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;skill_proficiency_sid is invalid for the org making the request.
     *   -grpc.NotFound: the skill proficiency with the given &#64;skill_proficiency_sid doesn't exist.
     *   -grpc.Internal: error occurs when removing the skill proficiency.
     * </pre>
     */
    default void deleteSkillProficiency(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteSkillProficiencyMethod(), responseObserver);
    }

    /**
     * <pre>
     * Copies the existing scenario with the &#64;scenario_sid_to_copy for the org sending the request using the provided parameters.
     * Scheduling targets of entities in the scenario to copy will also be copied.
     * The new &#64;schedule_scenario_sid of the new entity will be returned in the response.
     * Errors:gg
     *   - grpc.Invalid: the parameters &#64;scenario_sid_to_copy or any others are invalid.
     *   - grpc.NotFound: the scenario corresponding to the &#64;scenario_sid_to_copy doesn't exist.
     *   - grpc.Internal: error occurs when creating/coping the new scenario.
     * </pre>
     */
    default void copyScenario(com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCopyScenarioMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a new schedule scenario for the org sending the request with the provided parameters.
     * The new &#64;schedule_scenario_sid of the new entity will be returned in the response.
     * It also creates 1 of each of the following: call center, client, program, location node, and on call scheduling activity (if it doesn't exist already for the org).
     * The &#64;node_description fields may optionally be left blank.
     * The &#64;copied_from_scenario_sid field will be ignored, as it will be set to nil in the newly created scenario.
     * The &#64;creation_datetime and &#64;is_default fields will also be ignored and set as the current time and false respectively.
     * The &#64;skill_profile_category will be associated with the created program node.
     * Errors:
     *   - grpc.Invalid: parameters in the &#64;req are invalid for the org making the request.
     *   - grpc.NotFound: the &#64;skill_profile_category does not exist.
     *   - grpc.Internal: error occurs when creating the new scenario, or any of the node entities.
     * </pre>
     */
    default void createScheduleScenarioWithNodes(com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateScheduleScenarioWithNodesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a schedule scenario corresponding to the given &#64;schedule_scenario_sid and org sending the request with the provided parameters.
     * Only the &#64;name, &#64;description and &#64;datetime_set_to_inactive fields may be updated, and must be filled in with current value if updating the field is not desired.
     * The &#64;schedule_scenario_sid must be the original for the schedule scenario since it cannot be updated.
     * All other fields will be ignored since they cannot be updated.
     * Errors:
     *   -grpc.Invalid: one or more fields in the &#64;scenario have invalid values.
     *   -grpc.NotFound: the scenario with the given &#64;schedule_scenario_sid doesn't exist.
     *   -grpc.Internal: error occurs when updating the scenario.
     * </pre>
     */
    default void updateScheduleScenario(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateScheduleScenarioMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets config entities that match the org sending the request and given &#64;entity_type and that belong to the &#64;belongs_to_entity and &#64;schedule_scenario_sid parameters.
     * If &#64;include_member_lists is set to true the member lists of the entities retrieved will be included.
     * Any nodes in the returned set of entities will have inherited nonskill associations applied to the node's member_nonskill_activity fields.
     * Errors:
     *   - grpc.Invalid: the &#64;entity_type, or &#64;belongs_to_entity have invalid values.
     *   - grpc.Internal: error occurs when getting the config entities.
     * </pre>
     */
    default void listConfigEntities(com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListConfigEntitiesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes shift instances with the corresponding &#64;shift_instance_sids for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;shift_instance_sids are invalid for the org making the request.
     *   -grpc.NotFound: the shift instances with the given &#64;shift_instance_sids don't exist.
     *   -grpc.Internal: error occurs when removing the shift instances.
     * </pre>
     */
    default void deleteShiftInstances(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteShiftInstancesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics and &#64;nodes_checked for the &#64;node_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;node_to_check.
     * Errors:
     *   - grpc.Invalid: the &#64;node_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *   - grpc.NotFound: the given &#64;node_to_check doesn't exist.
     *   - grpc.Internal: error occurs when building the diagnostics.
     * </pre>
     */
    default void buildNodeDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildNodeDiagnosticsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds and returns the global diagnostics and &#64;nodes_checked for the &#64;schedule_scenario_sid and the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;schedule_scenario_sid has an invalid values.
     *   - grpc.NotFound: the given &#64;schedule_scenario_sid doesn't exist for the org making the request.
     *   - grpc.Internal: error occurs when building the diagnostics.
     * </pre>
     */
    default void buildGlobalDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildGlobalDiagnosticsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the published schedule for the corresponding &#64;datetime_range for the org sending the request.
     * Will create a published schedule if it does not exist already for the org sending the request.
     * Returns the published schedule without any shift instances.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range, &#64;metric_types are invalid.
     *   - grpc.NotFound: the &#64;node_selector doesn't exist.
     *   - grpc.Internal: error occurs when getting the published schedule.
     * </pre>
     */
    default void getPublishedSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetPublishedScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the required calls intervals for the published schedule for the corresponding &#64;viewing_range, for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the published schedule doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void getPublishedScheduleRequiredCalls(com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetPublishedScheduleRequiredCallsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the required calls intervals for the specified draft schedule for the corresponding &#64;viewing_range, for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the draft schedule doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void getDraftScheduleRequiredCalls(com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetDraftScheduleRequiredCallsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a draft schedule for the org sending the request with the provided parameters.
     * The &#64;draft_schedule_sid of the new entity will be returned in the response.
     * The &#64;created_at and &#64;last_updated_at fields will be set to the current time and null respectively.
     * The draft schedule will include the published schedule's shift instances and shift segments.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;description or &#64;scheduling_range are invalid.
     *   - grpc.Internal: error occurs when creating the draft schedule.
     * </pre>
     */
    default void createDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateDraftScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the &#64;name, &#64;description, and &#64;datetime_range of the given &#64;draft_schedule_sid for the org sending the request.
     * The &#64;name, &#64;description, and &#64;datetime_range fields must all be set with their desired values.
     * If &#64;delete_shifts_not_in_range if true, then any instances outside of the &#64;datetime_range will be permenantly deleted with no recovery option.
     * If &#64;delete_shifts_not_in_range is false, instances outside of the new &#64;datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
     * If &#64;copy_shifts_into_new_range time is true, then new the portion of an expanded &#64;datetime_range which has no instances will copy the instances from the published schedule. If false, no instances will be created for an expanded &#64;scheduling_range.
     * Returns the updated schedule without any shift instances.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;description or &#64;datetime_range are invalid.
     *   - grpc.Internal: error occurs when updating the schedule or its instances.
     * </pre>
     */
    default void updateDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateDraftScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Builds a draft schedule for the given &#64;node_selector in &#64;schedule_scenario_sid over &#64;schedule_scenario_scheduling_range for &#64;draft_schedule_sid and the org making the request.
     * The &#64;schedule_scenario_scheduling_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
     * Returns the draft schedule without any shift instances.
     * Will return diagnostics for the newly built schedule, or just diagnostics if the schedule cannot be built successfully due to diagnostic error.
     * If &#64;auto_generate_agents is set to true, unassigned agents will automatically be generated to meet the requirements of the shift templates min and max agents.
     * </pre>
     */
    default void buildDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getBuildDraftScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Polls the scheduler to check if there is currently a build in progress for the given &#64;draft_schedule_sid.
     * If there is a build in progress &#64;build_in_progress will be true.
     * As long as there has been a build started for the given &#64;draft_schedule_sid, &#64;build_start_datetime will be set with the time that the build process started.
     * If a build has been completed for the draft, &#64;build_end_datetime will be set with the time that the build ended, otherwise it will be None.
     * The &#64;build_status gives the status of the most recent build for the draft.
     * The &#64;diagnostics will be set with any diagnostics encountered during the most recent build.
     * Any errors encountered during the build process will be returned as INTERNAL_ERROR diagnostics.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid.
     *   - grpc.NotFound: the &#64;draft_schedule_sid does not exist for the org sending the request.
     *   - grpc.Internal: error chceking for the build in progress.
     * </pre>
     */
    default void pollBuildInProgress(com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getPollBuildInProgressMethod(), responseObserver);
    }

    /**
     * <pre>
     * Cancels the build in progress for the given &#64;draft_schedule_sid.
     * If there was a build to cancel, &#64;canceled_build will be returned as true, otherwise it will be false.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid.
     *   - grpc.Internal: error when cancelling the build or updating the build in progress table.
     * </pre>
     */
    default void cancelBuildInProgress(com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCancelBuildInProgressMethod(), responseObserver);
    }

    /**
     * <pre>
     * Publishes the shift instances of the given &#64;draft_schedule_sid to the published schedule of the org sending the request.
     * Overlapping shift instances that aren't locked will be replaced with the instances from the draft schedule.
     * If &#64;ignore_diagnostics_errors is set to true, it will publish the schedule regardless of any diagnostics errors,
     * otherwise it will return those diagnostic errors and not publish the schedule.
     * does not return any shift instances on the published schedule.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;req are invalid..
     *   - grpc.NotFound: &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when publishing the draft schedule.
     * </pre>
     */
    default void publishDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getPublishDraftScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Resets the shifts on the &#64;draft_schedule_sid for the org sending the request.
     * Shifts overlapping the &#64;datetime_range will be deleted, then that &#64;datetime_range will be populated with shifts from the published schedule.
     * If no &#64;datetime_range is provided, all shifts will be removed from the &#64;draft_schedule_sid, and published shifts will be copied across the draft's datetime range.
     * If &#64;unlocked_only is set to true, only unlocked shifts will be deleted, and the locked shift instances will remain.
     *   The published schedule will still be copied, so any newly overlapping shifts will result in an overlap warning.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range or &#64;draft_schedule_sid are invalid for the org sending the request.
     *   - grpc.NotFound: the &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when resetting the schedule.
     * </pre>
     */
    default void resetDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getResetDraftScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the draft schedule with &#64;draft_schedule_sid for the corresponding &#64;datetime_range for the org sending the request.
     * The &#64;datetime_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
     * Does not return any shift instances on the draft schedule.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range or &#64;draft_schedule_sid are invalid.
     *   - grpc.NotFound: the &#64;node_selector or &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when getting the draft schedule.
     * </pre>
     */
    default void getDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetDraftScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the draft schedules whose scheduling_range overlaps the given &#64;datetime_range for the org sending the request.
     * If &#64;datetime_range is not set, all draft schedules for the org will be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range is invalid.
     *   - grpc.Internal: error occurs when listing the draft schedules.
     * </pre>
     */
    default void listDraftSchedules(com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListDraftSchedulesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Clears shift instances from the &#64;schedule_selector for the org sending the request.
     * If &#64;node_selector is set, only shifts related to the given &#64;node_selector will be cleared.
     * If &#64;node_selector is not set, all shifts on the &#64;schedule_selector may be cleared, regardless of the shift template they are associated with.
     * If &#64;datetime_range is set, only the shifts overlapping the &#64;datetime_range will be cleared.
     * If &#64;datetime_range is not set, all shifts on the schedule will be considered in range to be deleted and &#64;invert_datetime_range and &#64;start_datetimes_only must be set to false.
     * If &#64;invert_datetime_range is set to true, the shifts overlapping the range before and after the provided &#64;datetime_range will be deleted.
     * If &#64;invert_datetime_range is set to false, the provided &#64;datetime_range will be used.
     * If &#64;start_datetimes_only is set to true, deletes the shifts that start within the &#64;datetime range, or start before or after &#64;datetime_range if &#64;invert_datetime_range is true.
     * If &#64;start_datetimes_only is set to false, deletes the shifts that overlap with the &#64;datetime range, or overlap the range before or after &#64;datetime_range if &#64;invert_datetime_range is true.
     * If &#64;delete_locked is set to true, both locked and unlocked shifts will be cleared.
     * If &#64;delete_locked is set to false, only shifts with &#64;is_locked set to false may be cleared.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector, &#64;schedule_selector, or &#64;datetime_range in the request are invalid.
     *   - grpc.NotFound: the draft schedule with the given &#64;schedule_selector doesn't exist.
     *   - grpc.Internal: error occurs when removing the shifts from the schedule.
     * </pre>
     */
    default void clearSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getClearScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes a draft schedule with the corresponding &#64;draft_schedule_sid for the org sending the request.
     * It also deletes all of its shift instances and segments.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the draft schedule with the given &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when removing the draft schedule.
     * </pre>
     */
    default void deleteDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteDraftScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the shift instances with the corresponding &#64;shift_instance_sids for the org sending the request.
     * If &#64;include_shift_template is set to true then the related shift template for the shift instances will be returned in the shift template field.
     * If &#64;include_shift_segments is set to true then the related shift segments for the shift instances will be returned in the shift segments field.
     * If &#64;include_shift_segment_call_stats is set to true then the related shift segment call stats for the shift segments will be returned in the call stats by skill collection field on the shift segments.
     * If &#64;include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
     * &#64;include_shift_segments must be true to take effect.
     * If &#64;include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling
     * activities member non skill activity field. &#64;include_scheduling_activity must be true to take effect.
     * Errors:
     *   - grpc.Invalid: &#64;shift_instance_sids in the request are invalid.
     *   - grpc.Internal: error occurs when listing the shift instances or their shift segments.
     * </pre>
     */
    default void listShiftInstancesBySid(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListShiftInstancesBySidMethod(), responseObserver);
    }

    /**
     * <pre>
     * Copies the shifts from &#64;source_schedule_selector to &#64;destination_schedule_selector, constrained by the given parameters for the org sending the request.
     * If &#64;datetime_range is set, all shifts within the datetime range will be copied.
     * If &#64;datetime_range is not set, all shifts in the &#64;source_schedule_selector within the schedule range of the &#64;destination_schedule_selector will be copied. However if one of them is a published schedule, it will use the schedule range of the draft schedule.
     * If &#64;start_datetimes_only is set to false, then shifts are considered to be within the &#64;datetime range if any portion of them is within the range.
     * If &#64;start_datetimes_only is set to true, then only shifts with start times within the &#64;datetime range will be copied.
     * If &#64;overlap_as_warning is set to false, any overlapping shifts for a given agent will return a diagnostic error, and prevent any shifts from being copied.
     * If &#64;overlap_as_warning is set to true, the shifts will be copied regardless of overlap conflicts, and any conflicts will cause a diagnostic warning to be returned after.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values.
     *   -grpc.NotFound: the &#64;source_schedule_selector or &#64;destination_schedule_selector don't exist for the org sending the request.
     *   -grpc.Internal: error occurs when creating the copied shift instances.
     * </pre>
     */
    default void copyScheduleToSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCopyScheduleToScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a shift instance for the org sending the request with the provided parameters.
     * This method is not implemented. Do not use.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when creating the shift instance.
     * </pre>
     */
    default void createShiftInstance(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateShiftInstanceMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a shift instance for the org sending the request with the provided parameters.
     * If &#64;wfm_agent_sids is empty, then the shift instance will be created for a newly created unassigned agent.
     * A shift instance will be created for each wfm agent sid provided.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when creating the shift instance.
     *   - grpc.NotFound: the &#64;draft_schedule_sid, &#64;shift_template_sid, or &#64;wfm_agent_sids do not exist for the org sending the request.
     * </pre>
     */
    default void createShiftInstanceV2(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateShiftInstanceV2Method(), responseObserver);
    }

    /**
     * <pre>
     * Creates the &#64;shift_instance with any member shift segments and shift segment call stats for the org sending the request.
     * If &#64;ignore_diagnostics_errors any diagnostics encountered will be returned as warnings, and the shift will still be created.
     *   Otherwise, any diagnostics triggered by the given &#64;shift_instance will be returned and the shift will not be created.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values.
     *   -grpc.NotFound: the fields referenced in &#64;shift_instance or its member shift segments don't exist for the org.
     *   -grpc.Internal: error occurs when creating the shift instance or its members.
     * </pre>
     */
    default void createShiftInstanceWithSegments(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateShiftInstanceWithSegmentsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Splits the &#64;shift_instance_sid into two, at the given &#64;time_to_split, returning the updated and new &#64;shift_instances.
     * Any shift segments will be split between the two shift instances at &#64;time_to_split.
     * If the &#64;time_to_split creates instances shorter then the minimum length specified by the shift template,
     *   warning diagnostics will be returned and the instance will still be split.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values, or &#64;time_to_split is not at least 5 minutes from the start or end of &#64;shift_instance_sid.
     *   -grpc.NotFound: the &#64;shift_instance_sid does't exist for the org sending the request.
     *   -grpc.Internal: error occurs when creating or updating the shift instances.
     * </pre>
     */
    default void splitShiftInstance(com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getSplitShiftInstanceMethod(), responseObserver);
    }

    /**
     * <pre>
     * Swaps shift instances with the given &#64;shift_instance_sids that belong to &#64;wfm_agent_sid1 to belong to &#64;wfm_agent_sid2 (and viceversa).
     * Returns the swapped &#64;shift_instances after they are succesfully updated.
     * If there are other shifts for the given &#64;wfm_agent_sids with an overlap conflict, diagnostics will be returned instead.
     * All &#64;shift_instance_sids must belong to the same schedule, and be from a draft schedule.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.NotFound: wfm_agent_sid_1, wfm_agent_sid_2, or shift_instance_sids do not exist for the org sending the request.
     *   - grpc.Internal: error occurs when swapping the shift instances.
     * </pre>
     */
    default void swapShiftInstances(com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getSwapShiftInstancesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a shift instance for the org sending the request with the provided parameters.
     * This method is not implemented. Do not use.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when updating the shift instance.
     * </pre>
     */
    default void updateShiftInstance(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateShiftInstanceMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates a shift instance for the org sending the request with the provided parameters.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when updating the shift instance.
     * </pre>
     */
    default void updateShiftInstanceV2(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateShiftInstanceV2Method(), responseObserver);
    }

    /**
     * <pre>
     * Runs diagnostics on the given &#64;shift_instance for the org sending the request.
     * If &#64;ignore_diagnostics_errors is True, the shift will be updated regardless of diagnostic errors and any diagnostics will be returned as warnings.
     * Otherwise, the shift will only be updated if there are no diagnostic errors.
     * Only the &#64;start_datetime, &#64;is_locked, &#64;width_in_minutes and &#64;wfm_agent_sid fields of the shift will be updated.
     * Any existing shift segments belonging to &#64;shift_instance will be deleted and replaced with the ones in the given &#64;shift_instance.
     * If no segments are provided, the existing segments will still be deleted and the instances will be left without any.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when updating the &#64;shift_instance or replacing their member shift segments.
     * </pre>
     */
    default void updateShiftInstanceWithSegments(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateShiftInstanceWithSegmentsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Copies the given &#64;shift_instance_sids to &#64;destination_schedule for the org sending the request.
     * If there are any overlap conflicts on &#64;destination_schedule and &#64;overlap_as_warning is set to false,
     *  then &#64;shift_instance_sids will not be copied, and a list of diagnostics detailing the overlaps will be returned.
     * If &#64;overlap_as_warning is set to true, overlap conflicts will not prevent the shifts from being copied, and the overlap diagnostics will be returned after as warning messages instead.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.NotFound: the &#64;shift_instance_sids or &#64;destination_schedule does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when copying the shift instances.
     * </pre>
     */
    default void copyShiftInstancesToSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCopyShiftInstancesToScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the shift_instance_sids for the Shift Instances associated with &#64;wfm_agent_sid over the given &#64;datetime_range and &#64;schedule_selector.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void listShiftInstanceSidsForAgent(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListShiftInstanceSidsForAgentMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the shift_instance_sids for the Shift Instances associated with the given &#64;datetime_range and &#64;schedule_selector.
     * If &#64;node_selector is set, only shifts sids related to the given &#64;node_selector will be listed.
     * If &#64;node_selector is not set, all shifts on the &#64;schedule_selector may be cleared, regardless of the node they are associated with.
     * If &#64;node_selector is set, the &#64;schedule_scenario_sid must be set to match &#64;node_selector.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void listShiftInstanceSidsForSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListShiftInstanceSidsForScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists shift segments for the specified shift instances for the org sending the request.
     * If &#64;include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
     * If &#64;include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling activities member non skill activity field.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: a shift instance doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void listShiftSegmentsByShiftInstanceSids(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListShiftSegmentsByShiftInstanceSidsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;scheduling_target for the org making the request.
     * The &#64;scheduling_target_sid of the new entity will be returned in the response.
     * Any preexisting scheduling target for &#64;node_entity will be removed upon creation of the new &#64;scheduling_target.
     * Errors:
     *   - grpc.Invalid: the &#64;scheduling_target is invalid.
     *   - grpc.NotFound: &#64;node_entity doesn't exist for &#64;schedule_scenario_sid and the org making the request.
     *   - grpc.Internal: error occours when setting the scheduling target.
     * </pre>
     */
    default void setSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getSetSchedulingTargetMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the &#64;own_scheduling_target, &#64;inherited_scheduling_target, and &#64;resulting_scheduling_target for the given &#64;node_selector and the org making the request.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector is invalid.
     *   - grpc.NotFound: the given &#64;node_selector doesn't exist for the org making the request.
     *   - grpc.Internal: error occours when getting the scheduling target.
     * </pre>
     */
    default void getSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetSchedulingTargetMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the scheduling target of the corresponding &#64;node_selector for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;node_selector is invalid.
     *   -grpc.NotFound: the scheduling target for the given &#64;node_selector doesn't exist for the org making the request.
     *   -grpc.Internal: error occurs when removing the scheduling target.
     * </pre>
     */
    default void deleteSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteSchedulingTargetMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the scheduling-target values for the org making the request.
     * Errors:
     *   - grpc.Internal: error occours when getting the scheduling-target values.
     * </pre>
     */
    default void getDefaultSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetDefaultSchedulingTargetMethod(), responseObserver);
    }

    /**
     * <pre>
     * Sets the scheduling-target values for the org making the request.
     * Errors:
     *   - grpc.Invalid: any of the given values are invalid.
     *   - grpc.Internal: error occours when setting the scheduling-target values.
     * </pre>
     */
    default void setDefaultSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getSetDefaultSchedulingTargetMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the performance metrics across &#64;datetime_range for shift instances in &#64;schedule_selector associated with &#64;node_selector for the org making the request.
     * Performance metrics will be generated for each of the given &#64;metric_params.
     * The &#64;interval_width_in_minutes must be a multiple of 5.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;node_selector, &#64;schedule_selector, or their shift instances doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void getPerformanceMetrics(com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetPerformanceMetricsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the required calls intervals for the given &#64;node_selector over the given &#64;datetime_range for the org making the request.
     * The &#64;interval_width_in_minutes must be a multiple of 5.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void listRequiredCallsIntervals(com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListRequiredCallsIntervalsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a Tour Pattern for &#64;shift_template_sid and the org sending the request, returning &#64;tour_pattern_sid.
     * If there is already a Tour Pattern for &#64;shift_template_sid then the method call will fail to create a new Tour Pattern.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: A Tour Pattern already exists for &#64;shift_template_sid.
     *   - grpc.Internal: error occurs when creating the Tour Pattern.
     * </pre>
     */
    default void createTourPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateTourPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Returns a list of diagnostics describing any issues with the given &#64;tour_pattern.
     * Checks the internal consistency between the pattern and all members, as well as making sure required fields are set with valid values.
     * Ignores sid fields, except for &#64;shift_template_sid and &#64;scheduling_activity_sid.
     * Does not query the database to check that foreign keys exist.
     * Returns a single diagnostic with an OK code if the given &#64;tour_pattern has no issues.
     * The &#64;member_tour_week_patterns and &#64;member_tour_agent_collections fields must be set on &#64;tour_pattern.
     * Errors:
     *   - grpc.Internal: error occurs when validating the tour pattern or members.
     * </pre>
     */
    default void getTourPatternDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetTourPatternDiagnosticsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Replaces the existing Tour Pattern and members with &#64;tour_pattern for the &#64;tour_pattern.shift_template_sid and the org sending the request.
     * Returns the newly created Tour Pattern and members with their updated SIDs and Week Pattern Numbers.
     * Any existing Tour Week Patterns, Tour Shift Instance and Segment Configs, Tour Agent Collections and their WFM Agent SIDs
     *   belonging to &#64;tour_pattern.shift_template_sid will be replaced with the members on the provided &#64;tour_pattern.
     * At least one Tour Agent Collection and one Tour Week Pattern must be provided in the member fields.
     * If the tour pattern data or members have issues that prevent them from being persisted, a list of diagnostics will be returned describing the issues that must be resolved.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;tour_pattern.shift_template_sid does not exist.
     *   - grpc.Internal: error occurs when upserting the tour pattern or members.
     * </pre>
     */
    default void upsertTourPatternWithMembers(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertTourPatternWithMembersMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the Tour Pattern belonging to &#64;shift_template_sid and the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the requested Tour Pattern does not exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void getTourPattern(com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetTourPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the Tour Pattern belonging to &#64;shift_template_sid and the org sending the request.
     * The &#64;tour_pattern will be returned with all member entities.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the requested Tour Pattern does not exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    default void getTourPatternWithMembers(com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGetTourPatternWithMembersMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Pattern belonging to &#64;tour_pattern_sid and the org sending the request.
     * Any member Tour Week Patterns or Agent Collections will be deleted as well.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the data or it's children.
     * </pre>
     */
    default void deleteTourPattern(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteTourPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates a Tour Week Pattern for &#64;tour_pattern_sid for the org sending the request, returning &#64;tour_week_pattern_sid.
     * The newly created Tour Week Pattern will be placed at the end of the existing sequence of tour week patterns for &#64;tour_pattern_sid.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the Tour Week Pattern.
     * </pre>
     */
    default void createTourWeekPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateTourWeekPatternMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the Tour Week Patterns with &#64;tour_pattern_sid for the org sending the request
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Week Patterns.
     * </pre>
     */
    default void listTourWeekPatterns(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListTourWeekPatternsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Week Patterns with the given &#64;tour_week_pattern_sids for the org sending the request.
     * Any Tour Week Instance or Segment Configs using &#64;tour_week_pattern_sids will be deleted.
     * Request will error if any &#64;tour_week_pattern_sids are in use by a Tour Agent Collection, as those must be removed first.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.FailedPrecondition: a &#64;tour_week_pattern_sid is in use by a Tour Agent Collection.
     *   - grpc.Internal: error occurs when deleting the tour week patterns or configs.
     * </pre>
     */
    default void deleteTourWeekPatterns(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteTourWeekPatternsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the &#64;tour_shift_instance_config for the org sending the request, returning &#64;tour_shift_instance_config_sid.
     * The given &#64;tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to &#64;tour_week_pattern_sid.
     * The &#64;member_tour_shift_segment_configs field will be ignored, and will not be created if passed through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or a preexisting tour shift instance config would overlap &#64;tour_shift_instance_config.
     *   - grpc.Internal: error occurs when creating the data.
     * </pre>
     */
    default void createTourShiftInstanceConfig(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateTourShiftInstanceConfigMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the &#64;tour_shift_instance_config for the org sending the request, returning &#64;tour_shift_instance_config_sid.
     * The given &#64;tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to &#64;tour_week_pattern_sid.
     * The &#64;member_tour_shift_segment_configs field will be ignored, and will not be updated if passed through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or a preexisting Tour Shift Instance Config would overlap &#64;tour_shift_instance_config.
     *   - grpc.Internal: error occurs when updating the data.
     * </pre>
     */
    default void updateTourShiftInstanceConfig(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateTourShiftInstanceConfigMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the Tour Shift Instance Configs belonging to &#64;tour_week_pattern_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
     * </pre>
     */
    default void listTourShiftInstanceConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListTourShiftInstanceConfigsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Shift Instance Configs matching &#64;tour_shift_instance_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
     * </pre>
     */
    default void deleteTourShiftInstanceConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteTourShiftInstanceConfigsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;tour_shift_segment_config for the org sending the request, returning &#64;tour_shift_segment_config_sid.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;tour_shift_instance_config_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the entity.
     * </pre>
     */
    default void createTourShiftSegmentConfig(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateTourShiftSegmentConfigMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given &#64;tour_shift_segment_config matching &#64;tour_shift_segment_config_sid for the org sending the request.
     * If the updated Tour Shift Segment Config overlaps another segment or does not fit within the parent Tour Shift Instance Config the update will fail.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or the resulting update would result in a conflict.
     *   - grpc.NotFound: the &#64;tour_shift_instance_config_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when updating the entity.
     * </pre>
     */
    default void updateTourShiftSegmentConfig(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateTourShiftSegmentConfigMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the Tour Shift Segment Configs belonging to &#64;tour_shift_instance_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Segment Configs.
     * </pre>
     */
    default void listTourShiftSegmentConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListTourShiftSegmentConfigsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Shift Segment Configs associated with the given &#64;tour_shift_segment_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the Tour Shift Segment Configs.
     * </pre>
     */
    default void deleteTourShiftSegmentConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteTourShiftSegmentConfigsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;tour_agent_collection for the org sending the request and return the &#64;tour_agent_collection_sid.
     * The &#64;wfm_agent_sids will be ignored and will not be created through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: the first_week_pattern_number for &#64;tour_pattern_sid is already in use by another tour agent collection.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the entity.
     * </pre>
     */
    default void createTourAgentCollection(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateTourAgentCollectionMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given &#64;tour_agent_collection matching the &#64;tour_agent_collection_sid for the org sending the request.
     * The &#64;wfm_agent_sids will be ignored and will not be updated through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: the first_week_pattern_number for &#64;tour_pattern_sid is already in use by another tour agent collection.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when updating the entity.
     * </pre>
     */
    default void updateTourAgentCollection(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateTourAgentCollectionMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the Tour Agent Collections belonging to &#64;tour_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    default void listTourAgentCollections(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListTourAgentCollectionsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Agent collections matching &#64;tour_agent_collection_sids for the org sending the request.
     * Any existing associations with WFM Agent Sids will be deleted as well.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the tour agent collections.
     * </pre>
     */
    default void deleteTourAgentCollections(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteTourAgentCollectionsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates an assocation between the &#64;tour_agent_collection_sid and the &#64;wfm_agent_sids for the org sending the request.
     * If there is already an association between any of the &#64;wfm_agent_sids and the Tour Pattern that &#64;tour_agent_collection_sid belongs to, the method will fail and no associations will be created.
     * Errors:
     *   - grpc.Invalid: the request data is invalid
     *   - grpc.AlreadyExists: an association already exists for at least one SID in &#64;wfm_agent_sids.
     *   - grpc.Internal: error occurs when creating the association.
     * </pre>
     */
    default void createTourAgentCollectionWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateTourAgentCollectionWFMAgentsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists the WFM Agent SIDs belonging to &#64;tour_agent_collection_sids for the org sending the request.
     * The resulting sids will be returned in &#64;wfm_agent_pairings each containing an &#64;agent_collection_sid and &#64;wfm_agent_sids.
     * If no agents are found for a sid in the given &#64;tour_agent_collection_sids, that &#64;agent_collection_sid will have an empty slice in &#64;wfm_agent_sids.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    default void listTourAgentCollectionWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListTourAgentCollectionWFMAgentsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes association between the &#64;wfm_agent_sids and &#64;tour_agent_collection_sid for the org sending the request.
     * If no &#64;wfm_agent_sids are provided, all existing &#64;wfm_agent_sids for the given &#64;tour_agent_collection_sid will be deleted.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: there are no WFM Agent associations to delete for &#64;tour_agent_collection_sid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    default void deleteTourAgentCollectionWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteTourAgentCollectionWFMAgentsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Generates a list of tour week patterns for &#64;target_shift_template_sid and the org sending the request.
     * Sets the member_tour_week_patterns with a tour week pattern for each of the &#64;num_weeks_in_tour.
     * Each of the tour week patterns will be set with tour shift instances and segment configs based on
     *   the forecasted call data over the next &#64;num_weeks_in_tour, starting on the next Monday.
     * The returned data will not be persisted. This method will not effect any existing tour week patterns in the database.
     * The &#64;tour_week_patterns returned by this method are intended to replace, not append, all currenly existing tour week patterns for &#64;target_shift_template_sid, once persisted.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: there is no call center node or &#64;shift_template_sid associated with &#64;schedule_scenario_sid.
     *   - grpc.Internal: error occurs when generating the tour week patterns.
     * </pre>
     */
    default void generateTourWeekPatterns(com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getGenerateTourWeekPatternsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Returns a list of &#64;wfm_agent_sids that are suitable for replacing &#64;wfm_agent_sid_to_replace for the given parameters and the org sending the request.
     * Only enforces that skill proficiencies are covered by the individual wfm agents, does not enforce constraint rules.
     * If &#64;skip_skill_proficiency_sort is False, the agents will be returned in order of cumulative skill proficiency towards the required skills.
     * If &#64;include_skill_mismatches is True, the agents will be included even if they do not include all of the required skills for the shifts being replaced.
     * If &#64;skip_force_same_agent_groups is False, the agents will only be returned if they belong to every agent group that &#64;wfm_agent_sid_to_replace is a member of. Otherwise, this check will be skipped.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when determinining which agents are valid.
     * </pre>
     */
    default void listValidAgentsForReplacement(com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListValidAgentsForReplacementMethod(), responseObserver);
    }

    /**
     * <pre>
     * Replaces &#64;wfm_agent_sid_to_remove with &#64;wfm_agent_sid_to_add for the given parameters and the org sending the request.
     * If &#64;skip_overlapping_shifts, shifts with an overlap conflict will be skipped, otherwise overlap conflicts will cause a diagnostic to be returned.
     * Does not enforce skill proficiencies. To check skill proficiencies for shift replacement use ListValidAgentsForReplacement.
     * DEPRECATED as of Jan/22/2024 - Use ReplaceAgentOnScheduleV1 instead.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when replacing the &#64;wfm_agent_sid_to_remove.
     * </pre>
     */
    @java.lang.Deprecated
    default void replaceAgentOnSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getReplaceAgentOnScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Replaces &#64;wfm_agent_sid_to_remove with &#64;wfm_agent_sid_to_add for the given parameters and the org sending the request.
     * If &#64;skip_overlapping_shifts, shifts with an overlap conflict will be skipped, otherwise overlap conflicts will cause a diagnostic to be returned.
     * Does not enforce skill proficiencies. To check skill proficiencies for shift replacement use ListValidAgentsForReplacement.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when replacing the &#64;wfm_agent_sid_to_remove.
     * </pre>
     */
    default void replaceAgentOnScheduleV1(com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getReplaceAgentOnScheduleV1Method(), responseObserver);
    }

    /**
     * <pre>
     * Removes the &#64;wfm_agent_sid from &#64;schedule_selector over &#64;datetime_range for the org sending the request.
     * Creates a new unassigned agent with the same active agent group associations as &#64;wfm_agent_sid for &#64;schedule_scenario_sid.
     * The unassigned agent will be assigned to shifts belonging to &#64;wfm_agent_sid, returning newly created unassigned agent's SID and the updated shifts.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the unassigned agent or updating the shifts.
     * </pre>
     */
    default void removeAgentFromSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getRemoveAgentFromScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates an agent leave petition to request time off for the &#64;wfm_agent_sid over the &#64;requested_datetime_ranges for the org sending the request.
     * The &#64;petition_comment must be set with a value.
     * The &#64;requested_datetime_ranges may not overlap each other.
     * The number of working hours requested off should be set in &#64;requested_hours_off.
     * The &#64;requested_hours_off does not need to relate directly to the datetime range being requested off,
     *   for example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
     * The usage of &#64;requested_hours_off hours will depend on org policy, but is not yet implemented.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the time off request.
     *   - grpc.NotFound: the &#64;wfm_agent_sid does not exist for the org sending the request.
     * </pre>
     */
    default void createAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateAgentLeavePetitionMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists agent leave petitions for the &#64;wfm_agent_sids over &#64;datetime_range for the org sending the request.
     * If no &#64;wfm_agent_sids are provided, all agent leave petitions overlapping &#64;datetime_range for the org sending the request will be returned.
     * If no &#64;datetime_range is provided, petitions will be returned across all datetimes.
     * If &#64;include_archived is true, archived agent leave petitions will be returned as well, otherwise archived requests will not be included.
     * If no agent leave petitions are found for the given parameters, an empty slice will be returned.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when listing the agent leave petitions.
     * </pre>
     */
    default void listAgentLeavePetitions(com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListAgentLeavePetitionsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Archives an agent leave petition with the given &#64;agent_leave_petition_id for the org sending the request.
     * If the leave petition has the status of PENDING_PETITION, the petition must be resolved first, or the request will error.
     * If the petition has a status of APPROVED_PETITION and a portion of the petitions &#64;requested_datetime_ranges lies in the future,
     *   the petition may not be archived without being cancelled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the agent leave petition is approved for a future datetime, still pending, or is already archived.
     *   - grpc.Internal: error occurs when archiving the agent leave petition.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    default void archiveAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getArchiveAgentLeavePetitionMethod(), responseObserver);
    }

    /**
     * <pre>
     * Resolves the given &#64;agent_leave_petition_id, setting the given parameters, for the org sending the request.
     * May only resolve leave petitions that currently have a PENDING_PETITION status.
     * May only set the &#64;petition_status to APPROVED_PETITION or DENIED_PETITION.
     * If a petition is approved, time off shifts will be added to the agent's schedule across the requested_datetime_ranges.
     * If &#64;retain_partial_shifts is true, partial shifts overlapping the requested_datetime_ranges will have the remaining portion of the shift retained,
     *    if the remaining portion of the shift is at least 30 minutes in length.
     * If &#64;retain_partial_shifts is false, the entirety of shifts overlapping the requested_datetime_ranges range will be deleted or transfered depending on &#64;replace_with_unassigned_agent.
     * If &#64;replace_with_unassigned_agent is true, an unassigned agent sid will be assigned to the covered shifts instead of deleting them.
     * When &#64;replace_with_unassigned_agent is true, if &#64;retain_partial_shifts is also true, only the portion of the shift in the requested datetime ranges will be transfered.
     * When &#64;replace_with_unassigned_agent is true, if &#64;retain_partial_shifts is false, the entirety of any overlapping shifts will be transfered.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is not pending approval.
     *   - grpc.Internal: error occurs when resolving the agent leave petition, or modifying the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    default void resolveAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getResolveAgentLeavePetitionMethod(), responseObserver);
    }

    /**
     * <pre>
     * Cancels the given &#64;agent_leave_petition_id for the organization sending the request.
     * If &#64;agent_leave_petition_id has a status of APPROVED_PETITION, the agent's schedule will have time off blocks removed,
     *   but any desired shifts must be added by the user after that leave is canceled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is already canceled.
     *   - grpc.Internal: error occurs when canceling the agent leave petition, or removing time off shifts from the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    default void cancelAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCancelAgentLeavePetitionMethod(), responseObserver);
    }

    /**
     * <pre>
     * A hello world endpoint to test the WFM Adherence App.
     * Returns a string with a hello world message.
     * </pre>
     */
    default void helloWorldWFMAdherence(com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getHelloWorldWFMAdherenceMethod(), responseObserver);
    }

    /**
     * <pre>
     * List the real time agent states for published schedule and the org sending the request, starting on the given &#64;start_datetime.
     * If the &#64;end_datetime is set, all agent state sequences will be returned for the range between &#64;start_datetime and &#64;end_datetime.
     * If &#64;end_datetime is not set, the agent state sequences will be returned over a 24 hour period or until the current time, whichever is shorter.
     * Errors:
     *   - grpc.Invalid: the &#64;start_datetime is invalid or beyond the current datetime.
     *   - grpc.Internal: error occurs when listing the agent states.
     * </pre>
     */
    default void listAgentStatesForDay(com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListAgentStatesForDayMethod(), responseObserver);
    }

    /**
     * <pre>
     * List org-level RealTimeManagementStates.
     * Errors:
     *   - grpc.Invalid: on invalid input.
     *   - grpc.Internal: on unexpected error.
     * </pre>
     */
    default void listRealTimeManagementStates(com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListRealTimeManagementStatesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the agent states for the given &#64;wfm_agent_sids from the given &#64;start_datetime to the &#64;end_datetime
     * or the current time if not set (start time not inclusive, end time inclusive).
     * Agent states will be grouped by wfm_agent_sid and ordered by date in ascending order.
     * If zero states are found for a given agent, it will not be included in the resulting map.
     * Errors:
     *   - grpc.Invalid: arguments in the request are invalid.
     *   - grpc.Internal: error occurs when getting the states.
     * </pre>
     */
    default void listAdherenceAgentStates(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListAdherenceAgentStatesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Sets the given &#64;state to be associated with the given &#64;rgba_color_id for the org sending the request.
     * Errors:
     *   - grpc.Internal: error upserting the real time management state color or returning the newly created state color.
     *   - grpc.NotFound: the given &#64;rgba_color_id does not exist.
     * </pre>
     */
    default void upsertRealTimeManagementStateColor(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpsertRealTimeManagementStateColorMethod(), responseObserver);
    }

    /**
     * <pre>
     * List org assigned colors for real-time management states.
     * Any states that do not have an assigned state color will have their system default state color returned instead.
     * Errors:
     *  - grpc.Internal: error occurs when listing the real-time management state colors.
     * </pre>
     */
    default void listRealTimeManagementStateColors(com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListRealTimeManagementStateColorsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the state color for the given &#64;state for the org sending the request.
     * The state will be associated with the system default color.
     * Errors:
     *  - grpc.Invalid: the &#64;state is invalid or is not associated with an &#64;rbg_color_id.
     *  - grpc.Internal: error occurs when deleting the state color fails.
     * </pre>
     */
    default void deleteRealTimeManagementStateColor(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteRealTimeManagementStateColorMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;color for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;color are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;color or an rgba with &#64;color.name already exists.
     * </pre>
     */
    default void createRgbaColor(com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateRgbaColorMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists all rbga colors for the org sending the request.
     * Errors:
     *   - grpc.Internal: error occurs when listing the &#64;colors.
     * </pre>
     */
    default void listRgbaColors(com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListRgbaColorsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given &#64;color for the org sending the request.
     * Returns the updated rgba color after it has been updated.
     * Errors:
     *   - grpc.Internal: error occurs when updating the rgba color, or getting the updated color.
     *   - grpc.NotFound: the color with &#64;color.rgba_color_id does not exist.
     * </pre>
     */
    default void updateRgbaColor(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateRgbaColorMethod(), responseObserver);
    }

    /**
     * <pre>
     * Delete the rgba color with the &#64;rgba_color_id for the org sending the request.
     * Deletes any real time management state colors that are using &#64;rgba_color_id, leaving them with their default colors.option
     * Errors:
     *  - grpc.Invalid: the &#64;rgba_color_id is invalid or does not exist.
     *  - grpc.Internal: error occurs when deleting the rgba color or real time management state colors.
     * </pre>
     */
    default void deleteRgbaColor(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteRgbaColorMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence &#64;notification_config for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;notification_config.
     * </pre>
     */
    default void createAdherenceRuleNotificationConfig(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateAdherenceRuleNotificationConfigMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence &#64;notification_config for the org sending the request.
     * Fields that can be updated are: name.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config are invalid.
     *   - grpc.NotFound: the given notification config is not found.
     *   - grpc.Internal: error occurs when updating the given &#64;notification_config.
     * </pre>
     */
    default void updateAdherenceRuleNotificationConfig(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateAdherenceRuleNotificationConfigMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence &#64;notification_config_entry for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config_entry are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;notification_config_entry.
     *   - grpc.NotFound: notification config with the &#64;notification_config_sid does not exist.
     * </pre>
     */
    default void createAdherenceRuleNotificationConfigEntry(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateAdherenceRuleNotificationConfigEntryMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence &#64;notification_config_entry for the org sending the request.
     * Fields that can be updated are: recipient_user_id, notification_medium, seconds_to_wait_for_no_response.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config_entry are invalid.
     *   - grpc.NotFound: the given notification config entry is not found.
     *   - grpc.Internal: error occurs when updating the given &#64;notification_config_entry.
     * </pre>
     */
    default void updateAdherenceRuleNotificationConfigEntry(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateAdherenceRuleNotificationConfigEntryMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the notification config entry that has the given &#64;adherence_rule_notification_config_entry_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the given &#64;adherence_rule_notification_config_entry_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_rule_notification_config_entry_id.
     *   - grpc.NotFound: notification config with the &#64;adherence_rule_notification_config_entry_id does not exist.
     * </pre>
     */
    default void deleteAdherenceRuleNotificationConfigEntry(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteAdherenceRuleNotificationConfigEntryMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets all adherence rule &#64;notification_configs for the org sending the request.
     * Configs will include their respective entries.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the notification configs.
     * </pre>
     */
    default void listAdherenceRuleNotificationConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListAdherenceRuleNotificationConfigsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence departmental &#64;rule for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;rule.
     * </pre>
     */
    default void createAdherenceDepartmentalRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateAdherenceDepartmentalRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence departmental &#64;rule for the org sending the request.
     * Fields that can be updated are: name, selected_entity_id, selected_entity_type, rule_requirement_type,
     * rule_range, custom_range, adherence_rule_notification_config_id.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.NotFound: departmental rule clause with &#64;adherence_departmental_rule_clause_id does not exist.
     *   - grpc.Internal: error occurs when updating the given &#64;rule.
     * </pre>
     */
    default void updateAdherenceDepartmentalRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateAdherenceDepartmentalRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence departmental rule &#64;clause for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;clause.
     *   - grpc.NotFound: departmental rule with the &#64;departmetal_rule_sid does not exist.
     * </pre>
     */
    default void createAdherenceDepartmentalRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateAdherenceDepartmentalRuleClauseMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence departmental rule &#64;clause for the org sending the request.
     * Fields that can be updated are: action_type, condition, amount, unit, per_amount, per_unit.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when updating the given &#64;clause.
     *   - grpc.NotFound: departmental rule with the with &#64;adherence_departmental_rule_clause_id does not exist to update.
     * </pre>
     */
    default void updateAdherenceDepartmentalRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateAdherenceDepartmentalRuleClauseMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the departmental rule clause that has the given &#64;adherence_departmental_rule_clause_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the value of the given &#64;adherence_departmental_rule_clause_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_departmental_rule_clause_id.
     *   - grpc.NotFound: departmental rule with the &#64;adherence_departmental_rule_clause_id does not exist.
     * </pre>
     */
    default void deleteAdherenceDepartmentalRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteAdherenceDepartmentalRuleClauseMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets all adherence departmental &#64;rules for the org sending the request.
     * Rules will include their respective clauses.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the rules.
     * </pre>
     */
    default void listAdherenceDepartmentalRules(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListAdherenceDepartmentalRulesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence agent &#64;rule for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;rule.
     * </pre>
     */
    default void createAdherenceAgentRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateAdherenceAgentRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence agent &#64;rule for the org sending the request.
     * Fields that can be updated are: name, selected_entity_id, selected_entity_type, rule_requirement_type, adherence_rule_notification_config_id.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.NotFound: agent rule clause with &#64;adherence_agent_rule_clause_id does not exist.
     *   - grpc.Internal: error occurs when updating the given &#64;rule.
     * </pre>
     */
    default void updateAdherenceAgentRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateAdherenceAgentRuleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence agent rule &#64;clause for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;clause.
     *   - grpc.NotFound: agent rule with the &#64;agent_rule_sid does not exist.
     * </pre>
     */
    default void createAdherenceAgentRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getCreateAdherenceAgentRuleClauseMethod(), responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence agent rule &#64;clause for the org sending the request.
     * Fields that can be updated are: action_type, condition, amount, unit.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when updating the given &#64;clause.
     *   - grpc.NotFound: agent rule with the with &#64;adherence_agent_rule_clause_id does not exist to update.
     * </pre>
     */
    default void updateAdherenceAgentRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getUpdateAdherenceAgentRuleClauseMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets all adherence agent &#64;rules for the org sending the request.
     * Rules will include their respective clauses.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the rules.
     * </pre>
     */
    default void listAdherenceAgentRules(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getListAdherenceAgentRulesMethod(), responseObserver);
    }

    /**
     * <pre>
     * Deletes the agent rule clause that has the given &#64;adherence_agent_rule_clause_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the value of the given &#64;adherence_agent_rule_clause_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_agent_rule_clause_id.
     *   - grpc.NotFound: departmental rule with the &#64;adherence_agent_rule_clause_id does not exist.
     * </pre>
     */
    default void deleteAdherenceAgentRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getDeleteAdherenceAgentRuleClauseMethod(), responseObserver);
    }

    /**
     * <pre>
     * Gets the published schedule for the corresponding &#64;datetime_range for the agent and org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range, &#64;metric_types are invalid.
     *   - grpc.Internal: error occurs when getting the published schedule.
     * </pre>
     */
    default void agentGetSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getAgentGetScheduleMethod(), responseObserver);
    }

    /**
     * <pre>
     * Lists agent leave petitions over the &#64;datetime_range for the agent and org sending the request.
     * If no &#64;datetime_range is provided, petitions will be returned across all datetimes.
     * If &#64;include_archived is true, archived agent leave petitions will be returned as well, otherwise archived requests will not be included.
     * If no agent leave petitions are found for the given parameters, an empty list will be returned.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when listing the agent leave petitions.
     * </pre>
     */
    default void agentListLeavePetitions(com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getAgentListLeavePetitionsMethod(), responseObserver);
    }

    /**
     * <pre>
     * Creates an agent leave petition to request time off over the &#64;requested_datetime_ranges for the agent and org sending the request.
     * The &#64;petition_comment must be set with a value.
     * The &#64;requested_datetime_ranges may not overlap each other.
     * The number of working hours requested off should be set in &#64;requested_hours_off.
     * The &#64;requested_hours_off does not need to relate directly to the datetime range being requested off,
     *   for example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
     * The usage of &#64;requested_hours_off hours will depend on org policy, but is not yet implemented.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the time off request.
     * </pre>
     */
    default void agentCreateLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getAgentCreateLeavePetitionMethod(), responseObserver);
    }

    /**
     * <pre>
     * Cancels the given &#64;agent_leave_petition_id for the agent and organization sending the request.
     * If &#64;agent_leave_petition_id has a status of APPROVED_PETITION, the agent's schedule will have time off blocks removed,
     *   but any desired shifts must be added by the user after that leave is canceled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is already canceled.
     *   - grpc.Internal: error occurs when canceling the agent leave petition, or removing time off shifts from the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    default void agentCancelLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall(getAgentCancelLeavePetitionMethod(), responseObserver);
    }
  }

  /**
   * Base class for the server implementation of the service WFM.
   * <pre>
   * WFM is responsible for call prediction and call volume calculations based on call skills and other parameters.
   * </pre>
   */
  public static abstract class WFMImplBase
      implements io.grpc.BindableService, AsyncService {

    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return WFMGrpc.bindService(this);
    }
  }

  /**
   * A stub to allow clients to do asynchronous rpc calls to service WFM.
   * <pre>
   * WFM is responsible for call prediction and call volume calculations based on call skills and other parameters.
   * </pre>
   */
  public static final class WFMStub
      extends io.grpc.stub.AbstractAsyncStub<WFMStub> {
    private WFMStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected WFMStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new WFMStub(channel, callOptions);
    }

    /**
     * <pre>
     * Starts the tasks to perform the initial setup on wfm services for the org sending the request.
     * It will then report the state of their setup task.
     * A new setup task will only be started if the client hasn't done one before, or their setup failed previously.
     * Errors:
     *  - grpc.Internal: error occurs when performing the initial setup.
     * </pre>
     */
    public void performInitialClientSetup(com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getPerformInitialClientSetupMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Create an initial set of demo activities for the org sending the requests.
     * If any non skill activities already exist matching the names of the demo non skill activities, a second copy will not be created.
     * Required permissions:
     *   NONE
     * Errors:
     *   - grpc.Internal: error occurs when creating the activities or checking if they already exist.
     * </pre>
     */
    public void createInitialDemoActivities(com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateInitialDemoActivitiesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Retrieves all the skill profiles of the org sending the request.
     * Also it can return the skills of each of the returned profiles.
     * Errors:
     * </pre>
     */
    public void listSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListSkillProfilesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the &#64;name, and averages of a skill profile that has the given &#64;skill_profile_sid.
     * It also updates it to no longer be unnamed.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid, &#64;name or averages in the request are invalid.
     *   - grpc.Internal: error occurs when updating the skill profile.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     * </pre>
     */
    public void updateSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateSkillProfileMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the &#64;proficiencies for the given skill profile's skills that belong the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;proficiencies in the request are invalid.
     *   - grpc.Internal: error occurs when updating the skill profiles proficiencies.
     * </pre>
     */
    public void updateSkillProfileProficiencies(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateSkillProfileProficienciesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Get a skill profile that has the given &#64;skill_profile_sid.
     * It also gets all the skills and the mappings associated with that profile.
     * If the &#64;inactive_as_of_date of the skill profile is nil then the mapping is of inactive profiles to this one,
     * otherwise the mapping is of this profile to an active one.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.Internal: error occurs when getting the skill profile.
     *   - grpc.NotFound: skill profile doesn't exist.
     * </pre>
     */
    public void getSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetSkillProfileMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Resyncs the skill profiles of the org sending the request.
     * It will add skills and skill profiles based on that client's historical call data.
     * Errors:
     *   - grpc.Internal: error occurs when creating the new skills and skill profiles.
     * </pre>
     */
    public void resyncSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getResyncSkillProfilesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the last date of a skill profile resync for the org seding the request.
     * If the org has never done a skill profile resync &#64;resync_date will not be set.
     * Errors:
     *   - grpc.Internal: error occurs when getting the resync date.
     * </pre>
     */
    public void getLastSkillProfileResyncDate(com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetLastSkillProfileResyncDateMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Tries to create an entry for the given forecasting parameters for the org sending the request.
     * If the org already has an entry for them, it will update the already existing entry.
     * Errors:
     *   - grpc.Invalid: the &#64;forecasting_parameters in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the parameters.
     * </pre>
     */
    public void upsertForecastingParameters(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertForecastingParametersMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the forecasting parameters for the org sending the request.
     * If the org hasn't created any parameters, it will return the default parameters.
     * Errors:
     *   - grpc.Internal: error occurs when getting the parameters.
     * </pre>
     */
    public void getForecastingParameters(com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetForecastingParametersMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the state of the cache for the org sending the request, and if the cache's state is not_loaded, or loading_failed,
     * it will start the loading task before returning the current state.
     * DEPRECATED as of Dec/13/2023 - Use PerformInitialClientSetup instead.
     * Errors:
     *  -grpc.Internal: error occurs when getting the cache info.
     * </pre>
     */
    @java.lang.Deprecated
    public void getClientHistoryCacheInfo(com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetClientHistoryCacheInfoMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the historical data for the org sending the request and the given &#64;skill_profile_category.
     * It will look through the client's call history and generate the historical data by using their configured forecasting parameters (historical data period and interval width).
     * The duration of each interval will be the interval width of the org's forecasting parameters.
     * It also applies any deltas that the client has stored for the given &#64;skill_profile_category, if the category is a group it will use the deltas of the skill profiles part of that group.
     * If the client has no historical data, only the deltas will be applied to the returned intervals, all other intervals will have nil averages.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_category given is not found for the org.
     *   - grpc.Internal: error occurs when getting the historical data.
     * </pre>
     */
    public void listHistoricalData(com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListHistoricalDataMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Tries to create an entry for the given &#64;delta for the org sending the request.
     * If the org already has an entry for it, it will update the already exisiting entry.
     * Errors:
     *   - grpc.Invalid: the &#64;delta in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the historical data interval.
     * </pre>
     */
    public void upsertHistoricalDataDelta(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertHistoricalDataDeltaMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Tries to create entries for the given &#64;deltas.
     * If the given org already has an entry for any of the deltas, it will replace the already existing entries.
     * This is made into a unary due to the UI's lack of support for client streams.
     * Errors:
     *   - grpc.Invalid: the &#64;deltas in the request are invalid.
     *   - grpc.Internal: error occurs when upserting the historical data deltas.
     * </pre>
     */
    public void upsertHistoricalDataDeltas(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertHistoricalDataDeltasMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets all the skills that the org sending the request has.
     * Skills returned will be sorted by &#64;skill_sid in ascending order.
     * Errors:
     *   - grpc.Internal: error occurs when getting the skills.
     * </pre>
     */
    public void listSkills(com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListSkillsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds and returns a call profile template for the org sending the request and the given &#64;skill_profile_sid.
     * The template will be generated using the training data for said skill profile using the &#64;training_data_range and &#64;averages_calculation_range_in_months
     * from the client's saved forecasting parameters.
     * The &#64;total_calls in the returned template be summed from the (&#64;training_data_start_datetime - &#64;averages_calculation_range_in_months) to &#64;training_data_end_datetime,
     * or from &#64;training_data_start_datetime to &#64;training_data_end_datetime if &#64;averages_calculation_range_in_months is 0.
     * The fixed averages fields in the call profile template, will be set to the averages that the skill profile has.
     * DEPRECATED as of Sep/7/2023 - Use BuildCallProfileTemplate instead.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid given is not found for the org.
     *   - grpc.Internal: error occurs when building the call profile template.
     * </pre>
     */
    @java.lang.Deprecated
    public void buildCallProfileTemplateForSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getBuildCallProfileTemplateForSkillProfileMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds and returns a call profile template for the org sending the request and the given &#64;skill_profile_category.
     * The template will be generated using the training data for said skill profile category using the &#64;training_data_range and &#64;averages_calculation_range_in_months
     * from the client's saved forecasting parameters.
     * The &#64;total_calls in the returned template be summed from the (&#64;training_data_start_datetime - &#64;averages_calculation_range_in_months) to &#64;training_data_end_datetime,
     * or from &#64;training_data_start_datetime to &#64;training_data_end_datetime if &#64;averages_calculation_range_in_months is 0.
     * The fixed averages fields in the call profile template, will be set to the averages that the skill profile category has.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_category given is not found for the org.
     *   - grpc.Internal: error occurs when building the call profile template.
     * </pre>
     */
    public void buildCallProfileTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getBuildCallProfileTemplateMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a mapping entry for the &#64;inactive_skill_profile_sid to the &#64;active_skill_profile_sid for the org sending the request.
     * DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
     * Errors:
     *   - grpc.Invalid: the &#64;inactive_skill_profile_sid, or &#64;active_skill_profile_sid in the request are invalid.
     *                   the &#64;inactive_skill_profile_sid given is of an active skill profile.
     *                   the &#64;active_skill_profile_sid given is of an inactive skill profile.
     *   - grpc.Internal: error occurs when creating the inactive skill profile mapping.
     * </pre>
     */
    @java.lang.Deprecated
    public void createInactiveSkillProfileMapping(com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateInactiveSkillProfileMappingMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets a list of enums that represent all of the forecaster types that are currently available for use
     * Errors:
     *  -grpc.Internal: error occurs when contacting the forecaster to get the available forecaster types.
     * </pre>
     */
    public void getAvailableRegressionForecasterModelTypes(com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetAvailableRegressionForecasterModelTypesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Changes the current mapping for the given &#64;inactive_skill_profile_sid to be disconnected.
     * DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
     * Errors:
     *   - grpc.Invalid: the &#64;inactive_skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the skill profile is not found for the org.
     *   - grpc.Internal: the current mapping for the given &#64;inactive_skill_profile_sid is already disconnected,
     *				            the given &#64;inactive_skill_profile_sid is of an active skill profile.
     * </pre>
     */
    @java.lang.Deprecated
    public void disconnectInactiveSkillProfileMapping(com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDisconnectInactiveSkillProfileMappingMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;skill_profile_group.
     * &#64;skill_profile_group_sids will be ignored since associations cannot be created by this method.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group in the request is invalid.
     *   - grpc.Internal: error occurs creating the skill profile group.
     * </pre>
     */
    public void createSkillProfileGroup(com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateSkillProfileGroupMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given &#64;skill_profile_group that has the &#64;skill_profile_group_sid for the org sending the request.
     * &#64;skill_profile_group_sids will be ignored since associations cannot be updated by this method.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group in the request is invalid.
     *   - grpc.NotFound: the skill profile group to update doesn't exist.
     *   - grpc.Internal: error occurs updating the skill profile group.
     * </pre>
     */
    public void updateSkillProfileGroup(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateSkillProfileGroupMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the skill profile groups that have the &#64;skill_profile_group_sids for the org sending the request.
     * if &#64;include_inactive is true then inactive groups will also be included, otherwise only active groups will be returned.
     * If &#64;skill_profile_group_sids is empty it will get all the skill profile groups for the org.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group_sids in the request is invalid.
     *   - grpc.Internal: error occurs getting the skill profile groups.
     * </pre>
     */
    public void listSkillProfileGroups(com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListSkillProfileGroupsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates associations of the given &#64;skill_profile_group_sid for the org sending the request.
     * It will create the associations with the &#64;skill_profile_sids_to_associate, and remove the associations with the &#64;skill_profile_sids_to_disassociate.
     * Only one of the skill_profile_sids fields needs to be set, but both can be set on the same request.
     * Errors:
     *   - grpc.Invalid: the values in the request are invalid.
     *   - grpc.Internal: error occurs updating the skill profile group associations.
     * </pre>
     */
    public void updateSkillProfileGroupAssociations(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateSkillProfileGroupAssociationsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes deltas whose dates match the given &#64;start_datetimes for the given &#64;skill_profile_sid.
     * If no &#64;start_datetimes are given, it will delete all the deltas that the given &#64;skill_profile_sid has.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid, or &#64;start_datetimes in the request are invalid.
     *   - grpc.NotFound: no matching deltas are found for deletion.
     *   - grpc.Internal: error occurs during the deletion of the historical data interval.
     * </pre>
     */
    public void deleteHistoricalDataDeltas(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteHistoricalDataDeltasMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the top N skill profiles with the highest calls_count for org sending the request where N is &#64;max_number_of_profiles.
     * It will also return the number of skills found for that profile.
     * Individual skills that each profile has will not be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;max_number_of_profiles in the request is invalid.
     *   - grpc.Internal: error occurs when getting the skill profiles.
     * </pre>
     */
    public void listTopSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListTopSkillProfilesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the total number of skill profiles associated with the org sending the request.
     * Errors:
     *   - grpc.Internal: error occurs when getting the skill profiles count.
     * </pre>
     */
    public void getSkillProfilesCount(com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetSkillProfilesCountMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds a profile forecast using the provided &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * (&#64;training_data_range_end_datetime - &#64;forecast_test_range_in_weeks) to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category or &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the building of the profile forecast.
     * </pre>
     */
    public void buildProfileForecastByInterval(com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> responseObserver) {
      io.grpc.stub.ClientCalls.asyncServerStreamingCall(
          getChannel().newCall(getBuildProfileForecastByIntervalMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds a profile forecast using the provided &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * (&#64;training_data_range_end_datetime - &#64;forecast_test_range_in_weeks) to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * It also returns the statistics of the produced forecast by using the test data of the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category or &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the building of the profile forecast.
     * </pre>
     */
    public void buildProfileForecastByIntervalWithStats(com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncServerStreamingCall(
          getChannel().newCall(getBuildProfileForecastByIntervalWithStatsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds a profile forecast for the given &#64;skill_profile_sid and org sending the request using the given &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * &#64;forecast_range_start_datetime to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
     * The intervals produced will be saved in the database.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid or &#64;call_profile_template in the request are invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid doesn't exist.
     *   - grpc.Internal: error occurs when upserting the profile forecast.
     * </pre>
     */
    public void upsertProfileForecast(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertProfileForecastMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;call_profile_template for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the creation of the call profile.
     * </pre>
     */
    public void createCallProfileTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateCallProfileTemplateMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes a call profile template for the requesting org that has the given &#64;call_profile_template_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;call_profile_template_sid in the request is invalid.
     *   - grpc.Internal: error occurs during the deletion of the call profile.
     * </pre>
     */
    public void deleteCallProfileTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteCallProfileTemplateMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates an entry for the &#64;regression_template for the requesting org.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs when creating the regression template.
     * </pre>
     */
    public void createRegressionTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateRegressionTemplateMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes a regression template for the requesting org that has the given &#64;regression_template_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template_sid in the request is invalid.
     *   - grpc.Internal: error occurs during the deletion of the regression template.
     * </pre>
     */
    public void deleteRegressionTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteRegressionTemplateMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets all the regression templates that the org sending the request has.
     * Errors:
     *   - grpc.Internal: error occurs when getting the regression templates.
     * </pre>
     */
    public void listRegressionTemplates(com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListRegressionTemplatesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_sid.
     * DEPRECATED as of Sep/13/2023 - Use ListForecastIntervals instead.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    @java.lang.Deprecated
    public void listForecastIntervalsForSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> responseObserver) {
      io.grpc.stub.ClientCalls.asyncServerStreamingCall(
          getChannel().newCall(getListForecastIntervalsForSkillProfileMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    public void listForecastIntervals(com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> responseObserver) {
      io.grpc.stub.ClientCalls.asyncServerStreamingCall(
          getChannel().newCall(getListForecastIntervalsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    public void listForecastIntervalsV2(com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListForecastIntervalsV2Method(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Generates a regression forecast using the provided &#64;regression_template.
     * It will generate forecast intervals for the skill profiles sids in &#64;skill_profile_sids_to_forecast.
     * It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
     * It will use the client's saved interval width to divide the resulting forecast intervals.
     * Errors:
     *   - grpc.Invalid: no &#64;skill_profile_sids_to_forecast are given or the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs during the building of the regression forecast.
     * </pre>
     */
    public void buildRegressionForecastByInterval(com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> responseObserver) {
      io.grpc.stub.ClientCalls.asyncServerStreamingCall(
          getChannel().newCall(getBuildRegressionForecastByIntervalMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Generates a regression forecast and calculates forecast statistics using the provided &#64;regression_template.
     * It will generate forecast intervals for the skill profiles sids in &#64;skill_profile_sids_to_forecast.
     * It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
     * It will use the client's saved interval width to divide the resulting forecast intervals.
     * The first message received will be the forecast statistics while all subsequent ones will be the forecast intervals.
     * Errors:
     *   - grpc.Invalid: no &#64;skill_profile_sids_to_forecast are given or the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs either during the when building the forecast or calculating the stats.
     * </pre>
     */
    public void buildRegressionForecastByIntervalWithStats(com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncServerStreamingCall(
          getChannel().newCall(getBuildRegressionForecastByIntervalWithStatsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the call profile templates that the org sending the request has.
     * Errors:
     *   - grpc.Internal: error occurs when getting the templates.
     * </pre>
     */
    public void listCallProfileTemplates(com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListCallProfileTemplatesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds a regression forecast for the org using the given &#64;regression_template and saves the resulting intervals in the db.
     * It will generate forecast intervals for the skill profiles sids in &#64;save_forecasts_for_skill_profile_sids,
     * if the list is empty or has no valid skill profile sids, it will generate and save forecasts for all active skill profiles.
     * If any intervals produced already exist in the db, they will be replaced with the ones produced.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the regression forecast.
     * </pre>
     */
    public void upsertRegressionForecast(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertRegressionForecastMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Tries to create an entry for the given &#64;delta for the org sending the request.
     * If the org already has an entry for it, it will update the already exisiting entry.
     * Errors:
     *   - grpc.Invalid: the &#64;delta in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the forecast data delta.
     * </pre>
     */
    public void upsertForecastDataDelta(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertForecastDataDeltaMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Tries to create entries for the given &#64;deltas.
     * If the org already has entries for any of them, it will update the already existing entry.
     * Errors:
     *   - grpc.Invalid: the &#64;deltas in the request are invalid.
     *   - grpc.Internal: error occurs when upserting the forecast data deltas.
     * </pre>
     */
    public void upsertForecastDataDeltas(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertForecastDataDeltasMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes forecast data intervals/deltas based on the parameters provided.
     * If &#64;delete_param is type skill_profile_category, then the intervals/deltas to be deleted will be
     * associated with that id. If &#64;delete_param is type interval_sids, then the intervals/deltas to be
     * deleted will be contained in the list &#64;interval_sids. The &#64;delete_type field determines which
     * table(s) in the database the intervals/deltas will be deleted from.
     * Errors:
     *   - grpc.Invalid: one of the &#64;delete_params is invalid
     *   - grpc.NotFound: no matching intervals/deltas are found for deletion.
     *   - grpc.Internal: error occurs during the deletion of the forecast data intervals/deltas.
     * </pre>
     */
    public void deleteForecastIntervals(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteForecastIntervalsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Retrieves the history for all the skill profiles of the requesting org.
     * Each value in every interval that has the same &#64;start_datetime of each skill profile will be summed then averaged and made into a single one.
     * When calculating the averages, each interval's values will be weighted by the number of &#64;total_calls it has.
     * History will be sorted by &#64;start_datetime in ascending order, and the range is determined by the client's historical range.
     * Errors:
     *   - grpc.Internal: error occurs when retriving the history.
     * </pre>
     */
    public void listHistoricalDataForAllSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListHistoricalDataForAllSkillProfilesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Converts the given &#64;profile_tod and &#64;profile_woms to a ProfileDOW and ProfileMOY.
     * Errors:
     *   - grpc.Invalid: the &#64;profile_tod or &#64;profile_woms in the request are invalid.
     *   - grpc.Internal: error occurs when building the ProfileDOW or ProfileMOY.
     * </pre>
     */
    public void buildDOWAndMOYProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getBuildDOWAndMOYProfilesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Calculates and returns the averages in the training data for the given &#64;skill_profile_sid.
     * Averages to be returned will be weighted by the number of calls that each training data interval has.
     * The start time that the training data will be averaged can be modified based on the forecasting parameter &#64;averages_calculation_range_in_months,
     * which will subtract that many months from the training data range end datetime and set it as the start time.
     * If &#64;averages_calculation_range_in_months is 0, it will use the training data range start datetime.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid given is not found.
     *   - grpc.Internal: error occurs when calculating the averages from the training data.
     * </pre>
     */
    public void calculateTrainingDataAveragesForSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCalculateTrainingDataAveragesForSkillProfileMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Calculates the averages for call characteristics using the historical data of the given &#64;skill_profile_sids, &#64;skill_profile_group_sids and org sending the request.
     * If no &#64;skill_profile_sids are given, it will calculate the averages for all skill profiles for the org sending the request.
     * If no &#64;skill_profile_group_sids are given, it will calculate the averages for all skill profile groups for the org sending the request.
     * Averages will be weighted by the number of calls that each historical data interval has.
     * Once the averages are calculated, they will be updated in the db for those skill profiles.
     * If a nil &#64;datetime_range is given then the range used will be &#64;training_data_range_end_datetime - &#64;averages_calculation_range_in_months to the &#64;training_data_range_end_datetime from the forecasting parameters.
     * If &#64;averages_calculation_range_in_months is 0, it will use the &#64;training_data_range_start_datetime as the start datetime of the range.
     * If &#64;exclude_skill_profiles_with_manual_averages is true, it will exclude skill profiles and groups that have manual averages from the calculation
     * even if those skill profiles and groups are in &#64;skill_profile_sids or &#64;skill_profile_group_sids respectively.
     * Errors:
     *   - grpc.Internal: error occurs when calculating the averages from the historical data.
     * </pre>
     */
    public void updateSkillProfileAveragesUsingHistoricalData(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateSkillProfileAveragesUsingHistoricalDataMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the call center &#64;node that has the given &#64;call_center_node_sid.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this call center node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the one or more of the fields in the request are invalid.
     *   - grpc.Internal: error occurs when updating the call center node.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     * </pre>
     */
    public void updateCallCenterNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateCallCenterNodeMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given client &#64;node for the org sending the request and &#64;parent_sid in the node.
     * The &#64;client_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent call center node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;parent_sid, or &#64;time_zone_val is invalid.
     *   - grpc.NotFound: parent call center node doesn't exist, or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the client node.
     * </pre>
     */
    public void createClientNode(com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateClientNodeMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a client node for the org sending the request that has the given &#64;client_node_sid and &#64;schedule_scenario_sid.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this client node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.Internal: error occurs when updating the client &#64;node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given &#64;parent_sid (call_center_node_sid) belongs to a different scenario than this &#64;node.
     * </pre>
     */
    public void updateClientNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateClientNodeMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given location &#64;node for the org sending the request and parent &#64;client_node_sid.
     * The &#64;location_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent client node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.NotFound: parent client node doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the location node.
     * </pre>
     */
    public void createLocationNode(com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateLocationNodeMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a location node corresponding to the given &#64;location_node_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this location node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;location_node have invalid values.
     *   - grpc.Internal: error occurs when updating the location node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given parent &#64;client_node_sid belongs to a different scenario than the node to update.
     * </pre>
     */
    public void updateLocationNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateLocationNodeMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given program &#64;node for the org sending the request and parent &#64;location_node_sid.
     * The &#64;program_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent location node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.NotFound: parent location node doesn't exist or belongs to a different scenario than the one given.
     *                    the &#64;skill_profile_category does not exist.
     *   - grpc.Internal: error occurs when creating the program node.
     * </pre>
     */
    public void createProgramNode(com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateProgramNodeMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a program node for the given &#64;program_node_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this program node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;program_node have invalid values.
     *   - grpc.Internal: error occurs when updating the program node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given parent &#64;location_node_sid belongs to a different scenario than the program node to update.
     *                    the &#64;skill_profile_category does not exist.
     * </pre>
     */
    public void updateProgramNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateProgramNodeMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the program nodes with the given &#64;program_node_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the given &#64;program_node_sids are invalid.
     *   - grpc.Internal: error occurs when listing the program nodes.
     * </pre>
     */
    public void listProgramNodesBySid(com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListProgramNodesBySidMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;constraint_rule for the org sending the request.
     * The &#64;constraint_rule_sid and &#64;skill_proficiency_sid (if one was created) of the new entities will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * If &#64;rule_type is set to MIN_SKILL_LEVEL, the &#64;member_target_entity field must be set with a skill proficiency and the &#64;constraint_rule.target_sid will be ignored.
     * If the &#64;member_target_entity is for a skill proficiency, that skill proficiency will be created with the given &#64;constraint_rule as parent.
     * If &#64;rule_type is NOT MIN_SKILL_LEVEL then the &#64;target_sid must be that of a scheduling activity.
     * The all other &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;constraint_rule have invalid values.
     *   - grpc.NotFound: the given &#64;target_sid for the given &#64;rule_type, or &#64;parent_entity don't exist.
     *   - grpc.Internal: error occurs when creating the constraint rule.
     * </pre>
     */
    public void createConstraintRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateConstraintRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the constraint rule corresponding for given &#64;contraint_rule_sid for the org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this constraint rule since it cannot be changed.
     * If &#64;rule_type is set to MIN_SKILL_LEVEL, the &#64;member_target_entity field must be set with a skill proficiency, otherwise it should not be set and field will be ignored.
     * If the &#64;target_sid is for a different skill proficiency than the current one the constraint rule has as a target,
     * the old one will be deleted and a new one will be created for the given &#64;member_target_entity.
     * If &#64;rule_type is NOT MIN_SKILL_LEVEL then the &#64;target_sid must be that of a scheduling activity.
     * The all other &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;constraint_rule have invalid values.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the constraint rule.
     *                  : the given &#64;target_sid for the given &#64;rule_type, or &#64;parent_entity don't exist.
     *   - grpc.Internal: error occurs when updating the constraint rule.
     * </pre>
     */
    public void updateConstraintRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateConstraintRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes a constraint rule with the coresponding &#64;constraint_rule_sid for the org sending the request.
     * It also deletes the entity referenced by the &#64;target_sid and &#64;rule_type if said entity is not a member of any other entity or the on call scheduling activity.
     * Errors:
     *   - grpc.Invalid: the &#64;constraint_rule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;constraint_rule doesn't exist.
     *   - grpc.Internal: error occurs when removing the constraint rule.
     * </pre>
     */
    public void deleteConstraintRule(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteConstraintRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;non_skill_activity for the org sending the request.
     * Will also create a scheduling activity wrapper for the non skill activity.
     * The &#64;non_skill_activity_sid and &#64;scheduling_activity_sid of the new entities will be returned in the response.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;non_skill_activity have invalid values.
     *   - grpc.NotFound: the &#64;schedule_scenario_sid doesn't exist.
     *   - grpc.Internal: error occurs when creating the non skill activity or scheduling activity.
     * </pre>
     */
    public void createNonSkillActivity(com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateNonSkillActivityMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a non skill activity that has the given &#64;non_skill_activity_sid with the given values.
     * Errors:
     *   - grpc.Invalid: &#64;non_skill_activity fields have invalid values.
     *   - grpc.NotFound: non skill activity for the given &#64;non_skill_activity_sid doesn't exist.
     *   - grpc.Internal: error occurs when updating the non skill activity.
     * </pre>
     */
    public void updateNonSkillActivity(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateNonSkillActivityMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the non skill activities that belong to the org sending the request.
     * Errors:.
     *   - grpc.Internal: error occurs when listing the activites.
     * </pre>
     */
    public void listNonSkillActivities(com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListNonSkillActivitiesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the IDs of non skill activities that belong to the org sending the request which have the given &#64;relationship_type with the &#64;associated_entity.
     * Errors:
     *   - grpc.Invalid: the &#64;associated_entity or &#64;relationship_type are invalid.
     *   - grpc.Internal: error occurs when listing the associations.
     * </pre>
     */
    public void listNonSkillActivityAssociations(com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListNonSkillActivityAssociationsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the candidate scheduling activities for a constraint or placement rule, inherited through given &#64;parent_of_rule for &#64;schedule_scenario_sid for the org making the request.
     * &#64;parent_of_rule may be any type of node, agent group, or shift template which the rule will belong to.
     * If the rule will belong to a wfm agent, the agent group must be supplied instead to get a relevant set of candidate scheduling activities.
     * Member non skill activity of each scheduling activity will be included in the response.
     * The on call scheduling activity will always be included.
     * Errors:
     *   - grpc.Invalid: the &#64;parent_of_rule is invalid.
     *   - grpc.NotFound: &#64;parent_of_rule doesn't exist
     *   - grpc.Internal: error occurs when applying inheritance or getting the nodes from &#64;parent_of_rule.
     * </pre>
     */
    public void listCandidateSchedulingActivities(com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListCandidateSchedulingActivitiesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists all the scheduling activities for the org making the request.
     * Their member non skill activities and pause codes will always be included.
     * Errors:
     *   - grpc.Internal: error occurs when getting the activities or its members.
     * </pre>
     */
    public void listSchedulingActivities(com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListSchedulingActivitiesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the on call scheduling activity for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   -grpc.NotFound: the on call scheduling activity for the org is not found.
     *   -grpc.Internal: error occurs when getting on call scheduling activity.
     * </pre>
     */
    public void getOnCallSchedulingActivity(com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetOnCallSchedulingActivityMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the Open Time and Agent Availability patterns for the given &#64;parent_entity and &#64;scheduling_activity_classifications for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   - grpc.Invalid: the arguments in the request are invalid.
     *   - grpc.Internal: error occurs getting the patterns or their scheduling activity sids.
     * </pre>
     */
    public void listPatternsForSchedulingActivityClassifications(com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListPatternsForSchedulingActivityClassificationsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the time off scheduling activity for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   -grpc.NotFound: the time off scheduling activity for the org is not found.
     *   -grpc.Internal: error occurs when getting time off scheduling activity.
     * </pre>
     */
    public void getTimeOffSchedulingActivity(com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetTimeOffSchedulingActivityMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates an agent group with the provided parameters.
     * A successful response should contain the &#64;agent_group_sid of the newly created entity.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, or &#64;parent_entity are invalid.
     *   - grpc.NotFound: &#64;parent_entity doesn't exist
     *   - grpc.Internal: error occurs when creating the agent group.
     * </pre>
     */
    public void createAgentGroup(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateAgentGroupMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * ListAgentScheduleGroups lists all schedulable agent groups for the given &#64;entity filled with &#64;member_wfm_agents for the org sending the request.
     * The given &#64;entity must be either a Node or a ShiftTemplate.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the agent groups.
     * </pre>
     */
    public void listAgentScheduleGroups(com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListAgentScheduleGroupsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the agent group corresponding to the &#64;agent_group_sid, &#64;name, and &#64;parent_entity.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this agent group since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_group_sid, &#64;parent_entity, or &#64;name in the request are invalid.
     *   - grpc.Internal: error occurs when updating the agent group.
     *   - grpc.AlreadyExists: an agent group with the given &#64;name already exists.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the agent group.
     * </pre>
     */
    public void updateAgentGroup(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateAgentGroupMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates an agent that is not assigned a tcn agent for the org sending the request.
     * If &#64;wfm_agent_sid_to_copy_agent_group_associations is set, it will also copy that agent's agent group associations to the new agent.
     * Otherwise only the new agent will be created.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sid_to_copy_agent_group_associations in the request is invalid.
     *   - grpc.Internal: error occurs creating the agent or the memberships.
     *   - grpc.NotFound: the given &#64;wfm_agent_sid_to_copy_agent_group_associations doesn't exist for the org.
     * </pre>
     */
    public void createUnassignedWFMAgent(com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateUnassignedWFMAgentMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a wfm agent for the given &#64;wfm_agent_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * The &#64;tcn_agent_sid cannot be updated.
     * Required permission:
     *   NONE
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;wfm_agent have invalid values.
     *   - grpc.NotFound: WFM agent with the given &#64;wfm_agent_sid doesn't exist.
     *   - grpc.Internal: error occurs when updating the wfm agent.
     * </pre>
     */
    public void updateWFMAgent(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateWFMAgentMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists all wfm agents for the org sending the request.
     * if &#64;include_inactive is true then inactive agents will also be included, otherwise only active agents will be returned.
     * if &#64;include_skill_proficiencies is true then agents returned will include their skill proficiencies.
     * if &#64;include_agent_groups is true then the &#64;agent_groups_by_agent response field will be set with a list of agent groups correlating to each agents index in the &#64;wfm_agents field.
     * if &#64;include_agent_groups is set to true, the &#64;agent_group_schedule_scenario_sid field must be set, so that the agent groups for the correct scenario are returned.
     * if &#64;include_agent_groups is set to true, and &#64;agent_group_schedule_scenario_sid is not set, the agent groups will not be filtered by schedule scenario.
     * if &#64;include_agent_groups is set to false, the &#64;agent_group_schedule_scenario_sid will be ignored.
     * &#64;agent_group_schedule_scenario_sid does not effect which &#64;wfm_agents are returned.
     * WFM agents with no associated agent_groups will have an empty slice in agent_groups_by_agent at their correlated index.
     * Errors:
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public void listAllWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListAllWFMAgentsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists all candidate wfm agents for the org sending the request and given &#64;agent_group_sid.
     * A WFM agent is considered a candidate when it's active and it doesn't already belong to the given agent group.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Invalid: &#64;agent_group_sid has an invalid value.
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public void listCandidateWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListCandidateWFMAgentsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists all wfm agents who are not grouped with any agent group for the given org sending the request that were created at or after the given &#64;created_after_datetime.
     * If &#64;schedule_scenario_sid is positive, it will filter further to get only agents who are not grouped with any agent group for that scenario.
     * if &#64;include_skill_proficiencies is true then agents returned will include their skill proficiencies.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Invalid: &#64;created_after_datetime has an invalid value.
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public void listUngroupedWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListUngroupedWFMAgentsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the wfm_agent_sids with the given &#64;tcn_agent_sids for the org sending the request.
     * Returns a map where Key: tcn_agent_sid - Value: wfm_agent_sid.
     * If the wfm_agent_sid is not found for any &#64;tcn_agent_sids, they will not have an entry in the returned &#64;sids.
     * Errors:
     *  - grpc.Invalid: the &#64;tcn_agent_sids are invalid.
     *  - grpc.Internal: error occours while listing the wfm_agent_sids.
     * </pre>
     */
    public void listWFMAgentSids(com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListWFMAgentSidsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists all wfm agents that don't have a TCN agent assigned to them for the given &#64;orgId.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public void listUnassignedWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListUnassignedWFMAgentsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the IDs of wfm agents that belong to the org sending the request which are associated with the given &#64;agent_group_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_group_sid is invalid.
     *   - grpc.Internal: error occurs when listing the wfm agents.
     * </pre>
     */
    public void listWFMAgentsAssociatedWithAgentGroup(com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListWFMAgentsAssociatedWithAgentGroupMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a membership association for each of the given &#64;wfm_agent_sids with the given &#64;agent_group_sid.
     * The &#64;schedule_scenario_sid must match the scenario of the agent group and wfm agents.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sid are invalid.
     *   - grpc.NotFound: the &#64;wfm_agent_sids or &#64;agent_group_sid don't exist for the org or given &#64;schedule_scenario_sid.
     *   - grpc.Internal: error occurs when creating the association.
     * </pre>
     */
    public void createWFMAgentMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateWFMAgentMembershipsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Copies the membership association of &#64;originating_wfm_agent_sid to &#64;target_wfm_agent_sid.
     * The wfm agents must both belong to the org sending the request.
     * Any existing membership associations on &#64;target_wfm_agent_sid with be retained.
     * Any conflicting memberships for &#64;target_wfm_agent_sid will be set with the membership of &#64;originating_wfm_agent_sid.
     * Errors:
     *   - grpc.NotFound: the &#64;wfm_agent_sids or &#64;agent_group_sid don't exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the associations.
     * </pre>
     */
    public void copyWFMAgentMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCopyWFMAgentMembershipsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes a membership association for each of the given &#64;wfm_agent_sids with the given &#64;agent_group_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sid are invalid.
     *   - grpc.NotFound: any of the given memberships to delete do not exist.
     *   - grpc.Internal: error occurs when deleting the association.
     * </pre>
     */
    public void deleteWFMAgentMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteWFMAgentMembershipsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes all membership associations for the given &#64;wfm_agent_sids with the given &#64;agent_group_sids.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sids are invalid.
     *   - grpc.Internal: error occurs when deleting the associations.
     * </pre>
     */
    public void deleteWFMAgentsMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteWFMAgentsMembershipsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Removes the &#64;wfm_agent_sid_to_remove from all future shifts for the org.
     * If &#64;replace_with_new_unassigned_agent is set to true, a new unassigned agent will be created and it will be assigned to the shifts and agent groups from &#64;wfm_agent_sid_to_remove.
     * If &#64;replace_with_new_unassigned_agent is set to false, the future shifts will just be deleted.
     * If the &#64;wfm_agent_sid_to_remove is not currently inactive, it will be set as inactive.
     * Errors:
     *   - grpc.Internal: error occurs when deleting the shifts, creating the new unassigned agent, reassigning the shifts to that agent, or setting the agent to inactive.
     * </pre>
     */
    public void removeAgentFromFutureShifts(com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getRemoveAgentFromFutureShiftsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics for the wfm agent associated with the given &#64;wfm_agent_sid or &#64;agent_group_sid for the org sending the request.
     * Response will only contain:
     *    one element if build for a single &#64;wfm_agent_sid.
     *    one element for each WFM agent if build for an &#64;agent_group_sid.
     *   - grpc.Invalid: the &#64;wfm_agent_sid, or &#64;agent_group_sid is invalid.
     *   - grpc.NotFound: the given &#64;wfm_agent_sid doesn't exist or the &#64;agent_group_sid has no agents.
     *   - grpc.Internal: error occurs building the diagnostics.
     * </pre>
     */
    public void buildAgentDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getBuildAgentDiagnosticsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a shift template for the org sending the request with the provided parameters
     * The &#64;shift_template_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent program node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, or &#64;program_node_sid are invalid.
     *   - grpc.AlreadyExists: a shift template with the given &#64;name already exists.
     *   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the shift template.
     * </pre>
     */
    public void createShiftTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateShiftTemplateMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a shift template for the given &#64;shift_template_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this shift template since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the &#64;shift_template_sid, &#64;name, &#64;program_node_sid are invalid.
     *   - grpc.AlreadyExists: a shift template with the given &#64;name already exists.
     *   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the shift template to update.
     *   - grpc.Internal: error occurs when updating the shift template.
     * </pre>
     */
    public void updateShiftTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateShiftTemplateMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the shift templates matching the specified &#64;shift_template_sids for the org sending the request.
     * If &#64;include_placement_rules is set to true, the &#64;shift_templates will be returned with their member placement rules.
     * Errors:
     *   - grpc.Invalid: the &#64;shift_template_sids are invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void listShiftTemplatesBySids(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListShiftTemplatesBySidsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics for the shift template associated with the given &#64;shift_template_sid for the org sending the request.
     *   - grpc.Invalid: the &#64;shift_template_sid is invalid.
     *   - grpc.NotFound: the given &#64;shift_template_sid doesn't exist for the org sending the request.
     *   - grpc.Internal: error occours building the diagnostics for the shift template.
     * </pre>
     */
    public void buildShiftTemplateDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getBuildShiftTemplateDiagnosticsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a placement rule for org sending the request with the provided parameters.
     * The &#64;placement_rule_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent shift template.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;placement_rule are invalid.
     *   - grpc.NotFound: the parent shift template doesn't exist or belongs to a different scenario than the one given.
     *                    the scheduling activity to associate with the placement rule doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the placement rule.
     * </pre>
     */
    public void createPlacementRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreatePlacementRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a placement rule corresponding with the given &#64;placement_rule_sid for the org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this placement rule since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the one or more of the fields in the &#64;placement_rule are invalid.
     *   - grpc.Internal: error occurs when updating the placement rule.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     *                  : the parent shift template or related scheduling activity don't exist or belong to a different scenario than the placement rule to update.
     * </pre>
     */
    public void updatePlacementRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdatePlacementRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes a placement rule with the coresponding &#64;placement_rule_sid for the org sending the request.
     * It also deletes the scheduling activity referenced by the &#64;scheduling_activity_sid if said activity is not a member of any other entity.
     * Errors:
     *   - grpc.Invalid: the &#64;placement_rule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;placement_rule doesn't exist.
     *   - grpc.Internal: error occurs when removing the placement rule.
     * </pre>
     */
    public void deletePlacementRule(com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeletePlacementRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates an open times pattern for the org sending the request with the provided parameters.
     * The &#64;open_times_pattern_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;open_times_pattern are invalid.
     *   - grpc.NotFound: the parent entity doesn't exist.
     *   - grpc.Internal: error occurs when creating the open times pattern.
     * </pre>
     */
    public void createOpenTimesPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateOpenTimesPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates an open times pattern for the given &#64;open_times_pattern_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this open times pattern since it cannot be changed.
     * Required permission:
     *   NONE
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;open_times_pattern have invalid values.
     *   - grpc.NotFound: the given &#64;open_times_pattern or it's &#64;parent_entity doesn't exist.
     *   - grpc.Internal: error occurs when updating the open times pattern.
     * </pre>
     */
    public void updateOpenTimesPattern(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateOpenTimesPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes an open times pattern with the coresponding &#64;open_times_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;open_times_pattern_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;open_times_pattern doesn't exist.
     *   - grpc.Internal: error occurs when removing the open times pattern.
     * </pre>
     */
    public void deleteOpenTimesPattern(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteOpenTimesPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the inherited, own, and resulting bitmaps for the open times patterns of &#64;node_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;node_to_check.
     * If &#64;bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
     * If &#64;bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the open times patterns.
     * If &#64;bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the open times patterns.
     * The bitmaps will be generated for the span of &#64;datetime_range.
     * Errors:
     *   - grpc.Invalid: the &#64;node_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *                 : the &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;node_to_check doesn't exist.
     *   - grpc.Internal: error occurs when getting the open times pattern bitmaps.
     * </pre>
     */
    public void getOpenTimesBitmaps(com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetOpenTimesBitmapsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the datetime ranges over which the given &#64;node_selector open times patterns are open throughout the given &#64;datetime_range for the org sending the request.
     * If the &#64;node_selector is not open during that range, no ranges will be returned.
     * If the &#64;node_selector is opened before or after the given &#64;datetime_range, those times outside of &#64;datetime_range will not be included in the returned &#64;open_close_ranges.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector or &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;node_selector doesn't exist in &#64;schedule_scenario_sid for the org sending the request.
     *   - grpc.Internal: error occurs when getting the open time close times.
     * </pre>
     */
    public void listOpenDateRangesForNodeOpenTimesBitmaps(com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListOpenDateRangesForNodeOpenTimesBitmapsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates an agent availability pattern for the org sending the request with the provided parameters.
     * The &#64;agent_availability_pattern_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;agent_availability_pattern are invalid.
     *   - grpc.NotFound: the parent entity doesn't exist.
     *   - grpc.Internal: error occurs when creating the agent availability pattern.
     * </pre>
     */
    public void createAgentAvailabilityPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateAgentAvailabilityPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates an agent availability pattern for the given &#64;agent_availability_pattern_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this agent availability pattern since it cannot be changed.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;agent_availability_pattern have invalid values.
     *   - grpc.Internal: error occurs when updating the agent avilability pattern.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the agent availability pattern.
     * </pre>
     */
    public void updateAgentAvailabilityPattern(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateAgentAvailabilityPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes an agent availability pattern with the coresponding &#64;agent_availability_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_availability_pattern_sid has an invalid value.
     *   - grpc.NotFound: the &#64;agent_availability_pattern with the given sid doesn't exist.
     *   - grpc.Internal: error occurs when removing the agent availability pattern.
     * </pre>
     */
    public void deleteAgentAvailabilityPattern(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteAgentAvailabilityPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the inherited, own, and resulting bitmaps for the agent availability patterns of &#64;entities_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;entities_to_check.
     * &#64;entities_to_check must have the entity_type field set with a wfm agent, agent group or a type of node.
     * If an availability bitmap is requested for an agent group, the bitmaps for all of it's member agents will be returned instead.
     * The bitmaps will be generated for the span of &#64;datetime_range.
     * If &#64;bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
     * If &#64;bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the availability patterns.
     * If &#64;bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the availability patterns.
     * Errors:
     *   - grpc.Invalid: the &#64;entities_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *                 : the &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;entities_to_check don't exist.
     *   - grpc.Internal: error occurs when getting the agent availability pattern bitmaps.
     * </pre>
     */
    public void getAvailabilityBitmaps(com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetAvailabilityBitmapsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Upserts an association for the given &#64;non_skill_activity_sid to the given &#64;node.
     * All downstream members of the entity will have their inheritance state cleared, and inherit the given association.
     * If an association already exists between the non skill activity and the &#64;node then their &#64;relationship_type will be updated.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * If a NOT_ASSOCIATED_WITH relationship is being created, the tree will be checked for conflicting downstream effects.
     * If any member rules, are referencing the non skill activity and &#64;relationship_type is NOT_ASSOCIATED_WITH, then the upsert will not take effect, and the list of related entities to be updated/removed first will be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;non_skill_activity_sid, &#64;node or &#64;association_type are invalid.
     *                 : the non skill activity and &#64;node belong to different scenarios.
     *   - grpc.NotFound: the &#64;non_skill_activity_sid or &#64;node don't exist.
     *   - grpc.Internal: error occurs when upserting the association.
     * </pre>
     */
    public void upsertNonSkillActivityAssociation(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertNonSkillActivityAssociationMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates skill proficiencies for the org sending the request with the provided parameters.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entities.
     * Errors:
     *   - grpc.Invalid: the parameters in a &#64;proficiency, or the &#64;schedule_scenario_sid are invalid.
     *   - grpc.NotFound: for any of the given &#64;skill_proficiencies:
     *                    the &#64;parent_entity doesn't exist.
     *                    the &#64;skill_sid doesn't exist.
     *                    the skill profile with &#64;preferred_skill_profile_sid doesn't contain the given &#64;skill_sid.
     *   - grpc.AlreadyExists: a skill proficiency with the given &#64;skill_sid and &#64;parent_entity already exists.
     *   - grpc.Internal: error occurs when creating the skill proficiencies.
     * </pre>
     */
    public void createSkillProficiencies(com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateSkillProficienciesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates skill proficiencies corresponding to the given &#64;skill_proficiency_sids and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;skill_sid and &#64;parent_entity field of each proficiency will be ignored since it cannot be updated.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;skill_proficiencies have invalid values.
     *   - grpc.Internal: error occurs when updating the skill proficiencies.
     *   - grpc.NotFound: for any of the given &#64;skill_proficiencies:
     *                    the &#64;skill_sid doesn't exist.
     *                    the skill profile with &#64;preferred_skill_profile_sid doesn't contain the skill of the given skill proficiency.
     *   - grpc.AlreadyExists: a skill proficiency with the given &#64;skill_sid and &#64;parent_entity already exists.
     * </pre>
     */
    public void updateSkillProficiencies(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateSkillProficienciesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes a skill proficiency with the corresponding &#64;skill_proficiency_sid for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;skill_proficiency_sid is invalid for the org making the request.
     *   -grpc.NotFound: the skill proficiency with the given &#64;skill_proficiency_sid doesn't exist.
     *   -grpc.Internal: error occurs when removing the skill proficiency.
     * </pre>
     */
    public void deleteSkillProficiency(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteSkillProficiencyMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Copies the existing scenario with the &#64;scenario_sid_to_copy for the org sending the request using the provided parameters.
     * Scheduling targets of entities in the scenario to copy will also be copied.
     * The new &#64;schedule_scenario_sid of the new entity will be returned in the response.
     * Errors:gg
     *   - grpc.Invalid: the parameters &#64;scenario_sid_to_copy or any others are invalid.
     *   - grpc.NotFound: the scenario corresponding to the &#64;scenario_sid_to_copy doesn't exist.
     *   - grpc.Internal: error occurs when creating/coping the new scenario.
     * </pre>
     */
    public void copyScenario(com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCopyScenarioMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a new schedule scenario for the org sending the request with the provided parameters.
     * The new &#64;schedule_scenario_sid of the new entity will be returned in the response.
     * It also creates 1 of each of the following: call center, client, program, location node, and on call scheduling activity (if it doesn't exist already for the org).
     * The &#64;node_description fields may optionally be left blank.
     * The &#64;copied_from_scenario_sid field will be ignored, as it will be set to nil in the newly created scenario.
     * The &#64;creation_datetime and &#64;is_default fields will also be ignored and set as the current time and false respectively.
     * The &#64;skill_profile_category will be associated with the created program node.
     * Errors:
     *   - grpc.Invalid: parameters in the &#64;req are invalid for the org making the request.
     *   - grpc.NotFound: the &#64;skill_profile_category does not exist.
     *   - grpc.Internal: error occurs when creating the new scenario, or any of the node entities.
     * </pre>
     */
    public void createScheduleScenarioWithNodes(com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateScheduleScenarioWithNodesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a schedule scenario corresponding to the given &#64;schedule_scenario_sid and org sending the request with the provided parameters.
     * Only the &#64;name, &#64;description and &#64;datetime_set_to_inactive fields may be updated, and must be filled in with current value if updating the field is not desired.
     * The &#64;schedule_scenario_sid must be the original for the schedule scenario since it cannot be updated.
     * All other fields will be ignored since they cannot be updated.
     * Errors:
     *   -grpc.Invalid: one or more fields in the &#64;scenario have invalid values.
     *   -grpc.NotFound: the scenario with the given &#64;schedule_scenario_sid doesn't exist.
     *   -grpc.Internal: error occurs when updating the scenario.
     * </pre>
     */
    public void updateScheduleScenario(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateScheduleScenarioMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets config entities that match the org sending the request and given &#64;entity_type and that belong to the &#64;belongs_to_entity and &#64;schedule_scenario_sid parameters.
     * If &#64;include_member_lists is set to true the member lists of the entities retrieved will be included.
     * Any nodes in the returned set of entities will have inherited nonskill associations applied to the node's member_nonskill_activity fields.
     * Errors:
     *   - grpc.Invalid: the &#64;entity_type, or &#64;belongs_to_entity have invalid values.
     *   - grpc.Internal: error occurs when getting the config entities.
     * </pre>
     */
    public void listConfigEntities(com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListConfigEntitiesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes shift instances with the corresponding &#64;shift_instance_sids for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;shift_instance_sids are invalid for the org making the request.
     *   -grpc.NotFound: the shift instances with the given &#64;shift_instance_sids don't exist.
     *   -grpc.Internal: error occurs when removing the shift instances.
     * </pre>
     */
    public void deleteShiftInstances(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteShiftInstancesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics and &#64;nodes_checked for the &#64;node_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;node_to_check.
     * Errors:
     *   - grpc.Invalid: the &#64;node_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *   - grpc.NotFound: the given &#64;node_to_check doesn't exist.
     *   - grpc.Internal: error occurs when building the diagnostics.
     * </pre>
     */
    public void buildNodeDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getBuildNodeDiagnosticsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds and returns the global diagnostics and &#64;nodes_checked for the &#64;schedule_scenario_sid and the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;schedule_scenario_sid has an invalid values.
     *   - grpc.NotFound: the given &#64;schedule_scenario_sid doesn't exist for the org making the request.
     *   - grpc.Internal: error occurs when building the diagnostics.
     * </pre>
     */
    public void buildGlobalDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getBuildGlobalDiagnosticsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the published schedule for the corresponding &#64;datetime_range for the org sending the request.
     * Will create a published schedule if it does not exist already for the org sending the request.
     * Returns the published schedule without any shift instances.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range, &#64;metric_types are invalid.
     *   - grpc.NotFound: the &#64;node_selector doesn't exist.
     *   - grpc.Internal: error occurs when getting the published schedule.
     * </pre>
     */
    public void getPublishedSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetPublishedScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the required calls intervals for the published schedule for the corresponding &#64;viewing_range, for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the published schedule doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void getPublishedScheduleRequiredCalls(com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetPublishedScheduleRequiredCallsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the required calls intervals for the specified draft schedule for the corresponding &#64;viewing_range, for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the draft schedule doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void getDraftScheduleRequiredCalls(com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetDraftScheduleRequiredCallsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a draft schedule for the org sending the request with the provided parameters.
     * The &#64;draft_schedule_sid of the new entity will be returned in the response.
     * The &#64;created_at and &#64;last_updated_at fields will be set to the current time and null respectively.
     * The draft schedule will include the published schedule's shift instances and shift segments.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;description or &#64;scheduling_range are invalid.
     *   - grpc.Internal: error occurs when creating the draft schedule.
     * </pre>
     */
    public void createDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateDraftScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the &#64;name, &#64;description, and &#64;datetime_range of the given &#64;draft_schedule_sid for the org sending the request.
     * The &#64;name, &#64;description, and &#64;datetime_range fields must all be set with their desired values.
     * If &#64;delete_shifts_not_in_range if true, then any instances outside of the &#64;datetime_range will be permenantly deleted with no recovery option.
     * If &#64;delete_shifts_not_in_range is false, instances outside of the new &#64;datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
     * If &#64;copy_shifts_into_new_range time is true, then new the portion of an expanded &#64;datetime_range which has no instances will copy the instances from the published schedule. If false, no instances will be created for an expanded &#64;scheduling_range.
     * Returns the updated schedule without any shift instances.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;description or &#64;datetime_range are invalid.
     *   - grpc.Internal: error occurs when updating the schedule or its instances.
     * </pre>
     */
    public void updateDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateDraftScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Builds a draft schedule for the given &#64;node_selector in &#64;schedule_scenario_sid over &#64;schedule_scenario_scheduling_range for &#64;draft_schedule_sid and the org making the request.
     * The &#64;schedule_scenario_scheduling_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
     * Returns the draft schedule without any shift instances.
     * Will return diagnostics for the newly built schedule, or just diagnostics if the schedule cannot be built successfully due to diagnostic error.
     * If &#64;auto_generate_agents is set to true, unassigned agents will automatically be generated to meet the requirements of the shift templates min and max agents.
     * </pre>
     */
    public void buildDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getBuildDraftScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Polls the scheduler to check if there is currently a build in progress for the given &#64;draft_schedule_sid.
     * If there is a build in progress &#64;build_in_progress will be true.
     * As long as there has been a build started for the given &#64;draft_schedule_sid, &#64;build_start_datetime will be set with the time that the build process started.
     * If a build has been completed for the draft, &#64;build_end_datetime will be set with the time that the build ended, otherwise it will be None.
     * The &#64;build_status gives the status of the most recent build for the draft.
     * The &#64;diagnostics will be set with any diagnostics encountered during the most recent build.
     * Any errors encountered during the build process will be returned as INTERNAL_ERROR diagnostics.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid.
     *   - grpc.NotFound: the &#64;draft_schedule_sid does not exist for the org sending the request.
     *   - grpc.Internal: error chceking for the build in progress.
     * </pre>
     */
    public void pollBuildInProgress(com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getPollBuildInProgressMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Cancels the build in progress for the given &#64;draft_schedule_sid.
     * If there was a build to cancel, &#64;canceled_build will be returned as true, otherwise it will be false.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid.
     *   - grpc.Internal: error when cancelling the build or updating the build in progress table.
     * </pre>
     */
    public void cancelBuildInProgress(com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCancelBuildInProgressMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Publishes the shift instances of the given &#64;draft_schedule_sid to the published schedule of the org sending the request.
     * Overlapping shift instances that aren't locked will be replaced with the instances from the draft schedule.
     * If &#64;ignore_diagnostics_errors is set to true, it will publish the schedule regardless of any diagnostics errors,
     * otherwise it will return those diagnostic errors and not publish the schedule.
     * does not return any shift instances on the published schedule.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;req are invalid..
     *   - grpc.NotFound: &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when publishing the draft schedule.
     * </pre>
     */
    public void publishDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getPublishDraftScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Resets the shifts on the &#64;draft_schedule_sid for the org sending the request.
     * Shifts overlapping the &#64;datetime_range will be deleted, then that &#64;datetime_range will be populated with shifts from the published schedule.
     * If no &#64;datetime_range is provided, all shifts will be removed from the &#64;draft_schedule_sid, and published shifts will be copied across the draft's datetime range.
     * If &#64;unlocked_only is set to true, only unlocked shifts will be deleted, and the locked shift instances will remain.
     *   The published schedule will still be copied, so any newly overlapping shifts will result in an overlap warning.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range or &#64;draft_schedule_sid are invalid for the org sending the request.
     *   - grpc.NotFound: the &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when resetting the schedule.
     * </pre>
     */
    public void resetDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getResetDraftScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the draft schedule with &#64;draft_schedule_sid for the corresponding &#64;datetime_range for the org sending the request.
     * The &#64;datetime_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
     * Does not return any shift instances on the draft schedule.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range or &#64;draft_schedule_sid are invalid.
     *   - grpc.NotFound: the &#64;node_selector or &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when getting the draft schedule.
     * </pre>
     */
    public void getDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetDraftScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the draft schedules whose scheduling_range overlaps the given &#64;datetime_range for the org sending the request.
     * If &#64;datetime_range is not set, all draft schedules for the org will be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range is invalid.
     *   - grpc.Internal: error occurs when listing the draft schedules.
     * </pre>
     */
    public void listDraftSchedules(com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListDraftSchedulesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Clears shift instances from the &#64;schedule_selector for the org sending the request.
     * If &#64;node_selector is set, only shifts related to the given &#64;node_selector will be cleared.
     * If &#64;node_selector is not set, all shifts on the &#64;schedule_selector may be cleared, regardless of the shift template they are associated with.
     * If &#64;datetime_range is set, only the shifts overlapping the &#64;datetime_range will be cleared.
     * If &#64;datetime_range is not set, all shifts on the schedule will be considered in range to be deleted and &#64;invert_datetime_range and &#64;start_datetimes_only must be set to false.
     * If &#64;invert_datetime_range is set to true, the shifts overlapping the range before and after the provided &#64;datetime_range will be deleted.
     * If &#64;invert_datetime_range is set to false, the provided &#64;datetime_range will be used.
     * If &#64;start_datetimes_only is set to true, deletes the shifts that start within the &#64;datetime range, or start before or after &#64;datetime_range if &#64;invert_datetime_range is true.
     * If &#64;start_datetimes_only is set to false, deletes the shifts that overlap with the &#64;datetime range, or overlap the range before or after &#64;datetime_range if &#64;invert_datetime_range is true.
     * If &#64;delete_locked is set to true, both locked and unlocked shifts will be cleared.
     * If &#64;delete_locked is set to false, only shifts with &#64;is_locked set to false may be cleared.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector, &#64;schedule_selector, or &#64;datetime_range in the request are invalid.
     *   - grpc.NotFound: the draft schedule with the given &#64;schedule_selector doesn't exist.
     *   - grpc.Internal: error occurs when removing the shifts from the schedule.
     * </pre>
     */
    public void clearSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getClearScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes a draft schedule with the corresponding &#64;draft_schedule_sid for the org sending the request.
     * It also deletes all of its shift instances and segments.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the draft schedule with the given &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when removing the draft schedule.
     * </pre>
     */
    public void deleteDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteDraftScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the shift instances with the corresponding &#64;shift_instance_sids for the org sending the request.
     * If &#64;include_shift_template is set to true then the related shift template for the shift instances will be returned in the shift template field.
     * If &#64;include_shift_segments is set to true then the related shift segments for the shift instances will be returned in the shift segments field.
     * If &#64;include_shift_segment_call_stats is set to true then the related shift segment call stats for the shift segments will be returned in the call stats by skill collection field on the shift segments.
     * If &#64;include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
     * &#64;include_shift_segments must be true to take effect.
     * If &#64;include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling
     * activities member non skill activity field. &#64;include_scheduling_activity must be true to take effect.
     * Errors:
     *   - grpc.Invalid: &#64;shift_instance_sids in the request are invalid.
     *   - grpc.Internal: error occurs when listing the shift instances or their shift segments.
     * </pre>
     */
    public void listShiftInstancesBySid(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListShiftInstancesBySidMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Copies the shifts from &#64;source_schedule_selector to &#64;destination_schedule_selector, constrained by the given parameters for the org sending the request.
     * If &#64;datetime_range is set, all shifts within the datetime range will be copied.
     * If &#64;datetime_range is not set, all shifts in the &#64;source_schedule_selector within the schedule range of the &#64;destination_schedule_selector will be copied. However if one of them is a published schedule, it will use the schedule range of the draft schedule.
     * If &#64;start_datetimes_only is set to false, then shifts are considered to be within the &#64;datetime range if any portion of them is within the range.
     * If &#64;start_datetimes_only is set to true, then only shifts with start times within the &#64;datetime range will be copied.
     * If &#64;overlap_as_warning is set to false, any overlapping shifts for a given agent will return a diagnostic error, and prevent any shifts from being copied.
     * If &#64;overlap_as_warning is set to true, the shifts will be copied regardless of overlap conflicts, and any conflicts will cause a diagnostic warning to be returned after.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values.
     *   -grpc.NotFound: the &#64;source_schedule_selector or &#64;destination_schedule_selector don't exist for the org sending the request.
     *   -grpc.Internal: error occurs when creating the copied shift instances.
     * </pre>
     */
    public void copyScheduleToSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCopyScheduleToScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a shift instance for the org sending the request with the provided parameters.
     * This method is not implemented. Do not use.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when creating the shift instance.
     * </pre>
     */
    public void createShiftInstance(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateShiftInstanceMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a shift instance for the org sending the request with the provided parameters.
     * If &#64;wfm_agent_sids is empty, then the shift instance will be created for a newly created unassigned agent.
     * A shift instance will be created for each wfm agent sid provided.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when creating the shift instance.
     *   - grpc.NotFound: the &#64;draft_schedule_sid, &#64;shift_template_sid, or &#64;wfm_agent_sids do not exist for the org sending the request.
     * </pre>
     */
    public void createShiftInstanceV2(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateShiftInstanceV2Method(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the &#64;shift_instance with any member shift segments and shift segment call stats for the org sending the request.
     * If &#64;ignore_diagnostics_errors any diagnostics encountered will be returned as warnings, and the shift will still be created.
     *   Otherwise, any diagnostics triggered by the given &#64;shift_instance will be returned and the shift will not be created.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values.
     *   -grpc.NotFound: the fields referenced in &#64;shift_instance or its member shift segments don't exist for the org.
     *   -grpc.Internal: error occurs when creating the shift instance or its members.
     * </pre>
     */
    public void createShiftInstanceWithSegments(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateShiftInstanceWithSegmentsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Splits the &#64;shift_instance_sid into two, at the given &#64;time_to_split, returning the updated and new &#64;shift_instances.
     * Any shift segments will be split between the two shift instances at &#64;time_to_split.
     * If the &#64;time_to_split creates instances shorter then the minimum length specified by the shift template,
     *   warning diagnostics will be returned and the instance will still be split.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values, or &#64;time_to_split is not at least 5 minutes from the start or end of &#64;shift_instance_sid.
     *   -grpc.NotFound: the &#64;shift_instance_sid does't exist for the org sending the request.
     *   -grpc.Internal: error occurs when creating or updating the shift instances.
     * </pre>
     */
    public void splitShiftInstance(com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getSplitShiftInstanceMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Swaps shift instances with the given &#64;shift_instance_sids that belong to &#64;wfm_agent_sid1 to belong to &#64;wfm_agent_sid2 (and viceversa).
     * Returns the swapped &#64;shift_instances after they are succesfully updated.
     * If there are other shifts for the given &#64;wfm_agent_sids with an overlap conflict, diagnostics will be returned instead.
     * All &#64;shift_instance_sids must belong to the same schedule, and be from a draft schedule.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.NotFound: wfm_agent_sid_1, wfm_agent_sid_2, or shift_instance_sids do not exist for the org sending the request.
     *   - grpc.Internal: error occurs when swapping the shift instances.
     * </pre>
     */
    public void swapShiftInstances(com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getSwapShiftInstancesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a shift instance for the org sending the request with the provided parameters.
     * This method is not implemented. Do not use.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when updating the shift instance.
     * </pre>
     */
    public void updateShiftInstance(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateShiftInstanceMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates a shift instance for the org sending the request with the provided parameters.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when updating the shift instance.
     * </pre>
     */
    public void updateShiftInstanceV2(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateShiftInstanceV2Method(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Runs diagnostics on the given &#64;shift_instance for the org sending the request.
     * If &#64;ignore_diagnostics_errors is True, the shift will be updated regardless of diagnostic errors and any diagnostics will be returned as warnings.
     * Otherwise, the shift will only be updated if there are no diagnostic errors.
     * Only the &#64;start_datetime, &#64;is_locked, &#64;width_in_minutes and &#64;wfm_agent_sid fields of the shift will be updated.
     * Any existing shift segments belonging to &#64;shift_instance will be deleted and replaced with the ones in the given &#64;shift_instance.
     * If no segments are provided, the existing segments will still be deleted and the instances will be left without any.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when updating the &#64;shift_instance or replacing their member shift segments.
     * </pre>
     */
    public void updateShiftInstanceWithSegments(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateShiftInstanceWithSegmentsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Copies the given &#64;shift_instance_sids to &#64;destination_schedule for the org sending the request.
     * If there are any overlap conflicts on &#64;destination_schedule and &#64;overlap_as_warning is set to false,
     *  then &#64;shift_instance_sids will not be copied, and a list of diagnostics detailing the overlaps will be returned.
     * If &#64;overlap_as_warning is set to true, overlap conflicts will not prevent the shifts from being copied, and the overlap diagnostics will be returned after as warning messages instead.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.NotFound: the &#64;shift_instance_sids or &#64;destination_schedule does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when copying the shift instances.
     * </pre>
     */
    public void copyShiftInstancesToSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCopyShiftInstancesToScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the shift_instance_sids for the Shift Instances associated with &#64;wfm_agent_sid over the given &#64;datetime_range and &#64;schedule_selector.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void listShiftInstanceSidsForAgent(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListShiftInstanceSidsForAgentMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the shift_instance_sids for the Shift Instances associated with the given &#64;datetime_range and &#64;schedule_selector.
     * If &#64;node_selector is set, only shifts sids related to the given &#64;node_selector will be listed.
     * If &#64;node_selector is not set, all shifts on the &#64;schedule_selector may be cleared, regardless of the node they are associated with.
     * If &#64;node_selector is set, the &#64;schedule_scenario_sid must be set to match &#64;node_selector.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void listShiftInstanceSidsForSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListShiftInstanceSidsForScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists shift segments for the specified shift instances for the org sending the request.
     * If &#64;include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
     * If &#64;include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling activities member non skill activity field.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: a shift instance doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void listShiftSegmentsByShiftInstanceSids(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListShiftSegmentsByShiftInstanceSidsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;scheduling_target for the org making the request.
     * The &#64;scheduling_target_sid of the new entity will be returned in the response.
     * Any preexisting scheduling target for &#64;node_entity will be removed upon creation of the new &#64;scheduling_target.
     * Errors:
     *   - grpc.Invalid: the &#64;scheduling_target is invalid.
     *   - grpc.NotFound: &#64;node_entity doesn't exist for &#64;schedule_scenario_sid and the org making the request.
     *   - grpc.Internal: error occours when setting the scheduling target.
     * </pre>
     */
    public void setSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getSetSchedulingTargetMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the &#64;own_scheduling_target, &#64;inherited_scheduling_target, and &#64;resulting_scheduling_target for the given &#64;node_selector and the org making the request.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector is invalid.
     *   - grpc.NotFound: the given &#64;node_selector doesn't exist for the org making the request.
     *   - grpc.Internal: error occours when getting the scheduling target.
     * </pre>
     */
    public void getSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetSchedulingTargetMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the scheduling target of the corresponding &#64;node_selector for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;node_selector is invalid.
     *   -grpc.NotFound: the scheduling target for the given &#64;node_selector doesn't exist for the org making the request.
     *   -grpc.Internal: error occurs when removing the scheduling target.
     * </pre>
     */
    public void deleteSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteSchedulingTargetMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the scheduling-target values for the org making the request.
     * Errors:
     *   - grpc.Internal: error occours when getting the scheduling-target values.
     * </pre>
     */
    public void getDefaultSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetDefaultSchedulingTargetMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Sets the scheduling-target values for the org making the request.
     * Errors:
     *   - grpc.Invalid: any of the given values are invalid.
     *   - grpc.Internal: error occours when setting the scheduling-target values.
     * </pre>
     */
    public void setDefaultSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getSetDefaultSchedulingTargetMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the performance metrics across &#64;datetime_range for shift instances in &#64;schedule_selector associated with &#64;node_selector for the org making the request.
     * Performance metrics will be generated for each of the given &#64;metric_params.
     * The &#64;interval_width_in_minutes must be a multiple of 5.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;node_selector, &#64;schedule_selector, or their shift instances doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void getPerformanceMetrics(com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetPerformanceMetricsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the required calls intervals for the given &#64;node_selector over the given &#64;datetime_range for the org making the request.
     * The &#64;interval_width_in_minutes must be a multiple of 5.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void listRequiredCallsIntervals(com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListRequiredCallsIntervalsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a Tour Pattern for &#64;shift_template_sid and the org sending the request, returning &#64;tour_pattern_sid.
     * If there is already a Tour Pattern for &#64;shift_template_sid then the method call will fail to create a new Tour Pattern.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: A Tour Pattern already exists for &#64;shift_template_sid.
     *   - grpc.Internal: error occurs when creating the Tour Pattern.
     * </pre>
     */
    public void createTourPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateTourPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Returns a list of diagnostics describing any issues with the given &#64;tour_pattern.
     * Checks the internal consistency between the pattern and all members, as well as making sure required fields are set with valid values.
     * Ignores sid fields, except for &#64;shift_template_sid and &#64;scheduling_activity_sid.
     * Does not query the database to check that foreign keys exist.
     * Returns a single diagnostic with an OK code if the given &#64;tour_pattern has no issues.
     * The &#64;member_tour_week_patterns and &#64;member_tour_agent_collections fields must be set on &#64;tour_pattern.
     * Errors:
     *   - grpc.Internal: error occurs when validating the tour pattern or members.
     * </pre>
     */
    public void getTourPatternDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetTourPatternDiagnosticsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Replaces the existing Tour Pattern and members with &#64;tour_pattern for the &#64;tour_pattern.shift_template_sid and the org sending the request.
     * Returns the newly created Tour Pattern and members with their updated SIDs and Week Pattern Numbers.
     * Any existing Tour Week Patterns, Tour Shift Instance and Segment Configs, Tour Agent Collections and their WFM Agent SIDs
     *   belonging to &#64;tour_pattern.shift_template_sid will be replaced with the members on the provided &#64;tour_pattern.
     * At least one Tour Agent Collection and one Tour Week Pattern must be provided in the member fields.
     * If the tour pattern data or members have issues that prevent them from being persisted, a list of diagnostics will be returned describing the issues that must be resolved.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;tour_pattern.shift_template_sid does not exist.
     *   - grpc.Internal: error occurs when upserting the tour pattern or members.
     * </pre>
     */
    public void upsertTourPatternWithMembers(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertTourPatternWithMembersMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the Tour Pattern belonging to &#64;shift_template_sid and the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the requested Tour Pattern does not exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void getTourPattern(com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetTourPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the Tour Pattern belonging to &#64;shift_template_sid and the org sending the request.
     * The &#64;tour_pattern will be returned with all member entities.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the requested Tour Pattern does not exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public void getTourPatternWithMembers(com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGetTourPatternWithMembersMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Pattern belonging to &#64;tour_pattern_sid and the org sending the request.
     * Any member Tour Week Patterns or Agent Collections will be deleted as well.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the data or it's children.
     * </pre>
     */
    public void deleteTourPattern(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteTourPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates a Tour Week Pattern for &#64;tour_pattern_sid for the org sending the request, returning &#64;tour_week_pattern_sid.
     * The newly created Tour Week Pattern will be placed at the end of the existing sequence of tour week patterns for &#64;tour_pattern_sid.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the Tour Week Pattern.
     * </pre>
     */
    public void createTourWeekPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateTourWeekPatternMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the Tour Week Patterns with &#64;tour_pattern_sid for the org sending the request
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Week Patterns.
     * </pre>
     */
    public void listTourWeekPatterns(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListTourWeekPatternsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Week Patterns with the given &#64;tour_week_pattern_sids for the org sending the request.
     * Any Tour Week Instance or Segment Configs using &#64;tour_week_pattern_sids will be deleted.
     * Request will error if any &#64;tour_week_pattern_sids are in use by a Tour Agent Collection, as those must be removed first.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.FailedPrecondition: a &#64;tour_week_pattern_sid is in use by a Tour Agent Collection.
     *   - grpc.Internal: error occurs when deleting the tour week patterns or configs.
     * </pre>
     */
    public void deleteTourWeekPatterns(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteTourWeekPatternsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the &#64;tour_shift_instance_config for the org sending the request, returning &#64;tour_shift_instance_config_sid.
     * The given &#64;tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to &#64;tour_week_pattern_sid.
     * The &#64;member_tour_shift_segment_configs field will be ignored, and will not be created if passed through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or a preexisting tour shift instance config would overlap &#64;tour_shift_instance_config.
     *   - grpc.Internal: error occurs when creating the data.
     * </pre>
     */
    public void createTourShiftInstanceConfig(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateTourShiftInstanceConfigMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the &#64;tour_shift_instance_config for the org sending the request, returning &#64;tour_shift_instance_config_sid.
     * The given &#64;tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to &#64;tour_week_pattern_sid.
     * The &#64;member_tour_shift_segment_configs field will be ignored, and will not be updated if passed through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or a preexisting Tour Shift Instance Config would overlap &#64;tour_shift_instance_config.
     *   - grpc.Internal: error occurs when updating the data.
     * </pre>
     */
    public void updateTourShiftInstanceConfig(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateTourShiftInstanceConfigMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the Tour Shift Instance Configs belonging to &#64;tour_week_pattern_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
     * </pre>
     */
    public void listTourShiftInstanceConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListTourShiftInstanceConfigsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Shift Instance Configs matching &#64;tour_shift_instance_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
     * </pre>
     */
    public void deleteTourShiftInstanceConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteTourShiftInstanceConfigsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;tour_shift_segment_config for the org sending the request, returning &#64;tour_shift_segment_config_sid.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;tour_shift_instance_config_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the entity.
     * </pre>
     */
    public void createTourShiftSegmentConfig(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateTourShiftSegmentConfigMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given &#64;tour_shift_segment_config matching &#64;tour_shift_segment_config_sid for the org sending the request.
     * If the updated Tour Shift Segment Config overlaps another segment or does not fit within the parent Tour Shift Instance Config the update will fail.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or the resulting update would result in a conflict.
     *   - grpc.NotFound: the &#64;tour_shift_instance_config_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when updating the entity.
     * </pre>
     */
    public void updateTourShiftSegmentConfig(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateTourShiftSegmentConfigMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the Tour Shift Segment Configs belonging to &#64;tour_shift_instance_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Segment Configs.
     * </pre>
     */
    public void listTourShiftSegmentConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListTourShiftSegmentConfigsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Shift Segment Configs associated with the given &#64;tour_shift_segment_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the Tour Shift Segment Configs.
     * </pre>
     */
    public void deleteTourShiftSegmentConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteTourShiftSegmentConfigsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;tour_agent_collection for the org sending the request and return the &#64;tour_agent_collection_sid.
     * The &#64;wfm_agent_sids will be ignored and will not be created through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: the first_week_pattern_number for &#64;tour_pattern_sid is already in use by another tour agent collection.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the entity.
     * </pre>
     */
    public void createTourAgentCollection(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateTourAgentCollectionMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given &#64;tour_agent_collection matching the &#64;tour_agent_collection_sid for the org sending the request.
     * The &#64;wfm_agent_sids will be ignored and will not be updated through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: the first_week_pattern_number for &#64;tour_pattern_sid is already in use by another tour agent collection.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when updating the entity.
     * </pre>
     */
    public void updateTourAgentCollection(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateTourAgentCollectionMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the Tour Agent Collections belonging to &#64;tour_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    public void listTourAgentCollections(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListTourAgentCollectionsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the Tour Agent collections matching &#64;tour_agent_collection_sids for the org sending the request.
     * Any existing associations with WFM Agent Sids will be deleted as well.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the tour agent collections.
     * </pre>
     */
    public void deleteTourAgentCollections(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteTourAgentCollectionsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates an assocation between the &#64;tour_agent_collection_sid and the &#64;wfm_agent_sids for the org sending the request.
     * If there is already an association between any of the &#64;wfm_agent_sids and the Tour Pattern that &#64;tour_agent_collection_sid belongs to, the method will fail and no associations will be created.
     * Errors:
     *   - grpc.Invalid: the request data is invalid
     *   - grpc.AlreadyExists: an association already exists for at least one SID in &#64;wfm_agent_sids.
     *   - grpc.Internal: error occurs when creating the association.
     * </pre>
     */
    public void createTourAgentCollectionWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateTourAgentCollectionWFMAgentsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists the WFM Agent SIDs belonging to &#64;tour_agent_collection_sids for the org sending the request.
     * The resulting sids will be returned in &#64;wfm_agent_pairings each containing an &#64;agent_collection_sid and &#64;wfm_agent_sids.
     * If no agents are found for a sid in the given &#64;tour_agent_collection_sids, that &#64;agent_collection_sid will have an empty slice in &#64;wfm_agent_sids.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    public void listTourAgentCollectionWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListTourAgentCollectionWFMAgentsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes association between the &#64;wfm_agent_sids and &#64;tour_agent_collection_sid for the org sending the request.
     * If no &#64;wfm_agent_sids are provided, all existing &#64;wfm_agent_sids for the given &#64;tour_agent_collection_sid will be deleted.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: there are no WFM Agent associations to delete for &#64;tour_agent_collection_sid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    public void deleteTourAgentCollectionWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteTourAgentCollectionWFMAgentsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Generates a list of tour week patterns for &#64;target_shift_template_sid and the org sending the request.
     * Sets the member_tour_week_patterns with a tour week pattern for each of the &#64;num_weeks_in_tour.
     * Each of the tour week patterns will be set with tour shift instances and segment configs based on
     *   the forecasted call data over the next &#64;num_weeks_in_tour, starting on the next Monday.
     * The returned data will not be persisted. This method will not effect any existing tour week patterns in the database.
     * The &#64;tour_week_patterns returned by this method are intended to replace, not append, all currenly existing tour week patterns for &#64;target_shift_template_sid, once persisted.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: there is no call center node or &#64;shift_template_sid associated with &#64;schedule_scenario_sid.
     *   - grpc.Internal: error occurs when generating the tour week patterns.
     * </pre>
     */
    public void generateTourWeekPatterns(com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getGenerateTourWeekPatternsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Returns a list of &#64;wfm_agent_sids that are suitable for replacing &#64;wfm_agent_sid_to_replace for the given parameters and the org sending the request.
     * Only enforces that skill proficiencies are covered by the individual wfm agents, does not enforce constraint rules.
     * If &#64;skip_skill_proficiency_sort is False, the agents will be returned in order of cumulative skill proficiency towards the required skills.
     * If &#64;include_skill_mismatches is True, the agents will be included even if they do not include all of the required skills for the shifts being replaced.
     * If &#64;skip_force_same_agent_groups is False, the agents will only be returned if they belong to every agent group that &#64;wfm_agent_sid_to_replace is a member of. Otherwise, this check will be skipped.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when determinining which agents are valid.
     * </pre>
     */
    public void listValidAgentsForReplacement(com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListValidAgentsForReplacementMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Replaces &#64;wfm_agent_sid_to_remove with &#64;wfm_agent_sid_to_add for the given parameters and the org sending the request.
     * If &#64;skip_overlapping_shifts, shifts with an overlap conflict will be skipped, otherwise overlap conflicts will cause a diagnostic to be returned.
     * Does not enforce skill proficiencies. To check skill proficiencies for shift replacement use ListValidAgentsForReplacement.
     * DEPRECATED as of Jan/22/2024 - Use ReplaceAgentOnScheduleV1 instead.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when replacing the &#64;wfm_agent_sid_to_remove.
     * </pre>
     */
    @java.lang.Deprecated
    public void replaceAgentOnSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getReplaceAgentOnScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Replaces &#64;wfm_agent_sid_to_remove with &#64;wfm_agent_sid_to_add for the given parameters and the org sending the request.
     * If &#64;skip_overlapping_shifts, shifts with an overlap conflict will be skipped, otherwise overlap conflicts will cause a diagnostic to be returned.
     * Does not enforce skill proficiencies. To check skill proficiencies for shift replacement use ListValidAgentsForReplacement.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when replacing the &#64;wfm_agent_sid_to_remove.
     * </pre>
     */
    public void replaceAgentOnScheduleV1(com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getReplaceAgentOnScheduleV1Method(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Removes the &#64;wfm_agent_sid from &#64;schedule_selector over &#64;datetime_range for the org sending the request.
     * Creates a new unassigned agent with the same active agent group associations as &#64;wfm_agent_sid for &#64;schedule_scenario_sid.
     * The unassigned agent will be assigned to shifts belonging to &#64;wfm_agent_sid, returning newly created unassigned agent's SID and the updated shifts.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the unassigned agent or updating the shifts.
     * </pre>
     */
    public void removeAgentFromSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getRemoveAgentFromScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates an agent leave petition to request time off for the &#64;wfm_agent_sid over the &#64;requested_datetime_ranges for the org sending the request.
     * The &#64;petition_comment must be set with a value.
     * The &#64;requested_datetime_ranges may not overlap each other.
     * The number of working hours requested off should be set in &#64;requested_hours_off.
     * The &#64;requested_hours_off does not need to relate directly to the datetime range being requested off,
     *   for example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
     * The usage of &#64;requested_hours_off hours will depend on org policy, but is not yet implemented.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the time off request.
     *   - grpc.NotFound: the &#64;wfm_agent_sid does not exist for the org sending the request.
     * </pre>
     */
    public void createAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateAgentLeavePetitionMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists agent leave petitions for the &#64;wfm_agent_sids over &#64;datetime_range for the org sending the request.
     * If no &#64;wfm_agent_sids are provided, all agent leave petitions overlapping &#64;datetime_range for the org sending the request will be returned.
     * If no &#64;datetime_range is provided, petitions will be returned across all datetimes.
     * If &#64;include_archived is true, archived agent leave petitions will be returned as well, otherwise archived requests will not be included.
     * If no agent leave petitions are found for the given parameters, an empty slice will be returned.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when listing the agent leave petitions.
     * </pre>
     */
    public void listAgentLeavePetitions(com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListAgentLeavePetitionsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Archives an agent leave petition with the given &#64;agent_leave_petition_id for the org sending the request.
     * If the leave petition has the status of PENDING_PETITION, the petition must be resolved first, or the request will error.
     * If the petition has a status of APPROVED_PETITION and a portion of the petitions &#64;requested_datetime_ranges lies in the future,
     *   the petition may not be archived without being cancelled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the agent leave petition is approved for a future datetime, still pending, or is already archived.
     *   - grpc.Internal: error occurs when archiving the agent leave petition.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public void archiveAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getArchiveAgentLeavePetitionMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Resolves the given &#64;agent_leave_petition_id, setting the given parameters, for the org sending the request.
     * May only resolve leave petitions that currently have a PENDING_PETITION status.
     * May only set the &#64;petition_status to APPROVED_PETITION or DENIED_PETITION.
     * If a petition is approved, time off shifts will be added to the agent's schedule across the requested_datetime_ranges.
     * If &#64;retain_partial_shifts is true, partial shifts overlapping the requested_datetime_ranges will have the remaining portion of the shift retained,
     *    if the remaining portion of the shift is at least 30 minutes in length.
     * If &#64;retain_partial_shifts is false, the entirety of shifts overlapping the requested_datetime_ranges range will be deleted or transfered depending on &#64;replace_with_unassigned_agent.
     * If &#64;replace_with_unassigned_agent is true, an unassigned agent sid will be assigned to the covered shifts instead of deleting them.
     * When &#64;replace_with_unassigned_agent is true, if &#64;retain_partial_shifts is also true, only the portion of the shift in the requested datetime ranges will be transfered.
     * When &#64;replace_with_unassigned_agent is true, if &#64;retain_partial_shifts is false, the entirety of any overlapping shifts will be transfered.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is not pending approval.
     *   - grpc.Internal: error occurs when resolving the agent leave petition, or modifying the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public void resolveAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getResolveAgentLeavePetitionMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Cancels the given &#64;agent_leave_petition_id for the organization sending the request.
     * If &#64;agent_leave_petition_id has a status of APPROVED_PETITION, the agent's schedule will have time off blocks removed,
     *   but any desired shifts must be added by the user after that leave is canceled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is already canceled.
     *   - grpc.Internal: error occurs when canceling the agent leave petition, or removing time off shifts from the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public void cancelAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCancelAgentLeavePetitionMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * A hello world endpoint to test the WFM Adherence App.
     * Returns a string with a hello world message.
     * </pre>
     */
    public void helloWorldWFMAdherence(com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getHelloWorldWFMAdherenceMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * List the real time agent states for published schedule and the org sending the request, starting on the given &#64;start_datetime.
     * If the &#64;end_datetime is set, all agent state sequences will be returned for the range between &#64;start_datetime and &#64;end_datetime.
     * If &#64;end_datetime is not set, the agent state sequences will be returned over a 24 hour period or until the current time, whichever is shorter.
     * Errors:
     *   - grpc.Invalid: the &#64;start_datetime is invalid or beyond the current datetime.
     *   - grpc.Internal: error occurs when listing the agent states.
     * </pre>
     */
    public void listAgentStatesForDay(com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListAgentStatesForDayMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * List org-level RealTimeManagementStates.
     * Errors:
     *   - grpc.Invalid: on invalid input.
     *   - grpc.Internal: on unexpected error.
     * </pre>
     */
    public void listRealTimeManagementStates(com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListRealTimeManagementStatesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the agent states for the given &#64;wfm_agent_sids from the given &#64;start_datetime to the &#64;end_datetime
     * or the current time if not set (start time not inclusive, end time inclusive).
     * Agent states will be grouped by wfm_agent_sid and ordered by date in ascending order.
     * If zero states are found for a given agent, it will not be included in the resulting map.
     * Errors:
     *   - grpc.Invalid: arguments in the request are invalid.
     *   - grpc.Internal: error occurs when getting the states.
     * </pre>
     */
    public void listAdherenceAgentStates(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListAdherenceAgentStatesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Sets the given &#64;state to be associated with the given &#64;rgba_color_id for the org sending the request.
     * Errors:
     *   - grpc.Internal: error upserting the real time management state color or returning the newly created state color.
     *   - grpc.NotFound: the given &#64;rgba_color_id does not exist.
     * </pre>
     */
    public void upsertRealTimeManagementStateColor(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpsertRealTimeManagementStateColorMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * List org assigned colors for real-time management states.
     * Any states that do not have an assigned state color will have their system default state color returned instead.
     * Errors:
     *  - grpc.Internal: error occurs when listing the real-time management state colors.
     * </pre>
     */
    public void listRealTimeManagementStateColors(com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListRealTimeManagementStateColorsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the state color for the given &#64;state for the org sending the request.
     * The state will be associated with the system default color.
     * Errors:
     *  - grpc.Invalid: the &#64;state is invalid or is not associated with an &#64;rbg_color_id.
     *  - grpc.Internal: error occurs when deleting the state color fails.
     * </pre>
     */
    public void deleteRealTimeManagementStateColor(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteRealTimeManagementStateColorMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given &#64;color for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;color are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;color or an rgba with &#64;color.name already exists.
     * </pre>
     */
    public void createRgbaColor(com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateRgbaColorMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists all rbga colors for the org sending the request.
     * Errors:
     *   - grpc.Internal: error occurs when listing the &#64;colors.
     * </pre>
     */
    public void listRgbaColors(com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListRgbaColorsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given &#64;color for the org sending the request.
     * Returns the updated rgba color after it has been updated.
     * Errors:
     *   - grpc.Internal: error occurs when updating the rgba color, or getting the updated color.
     *   - grpc.NotFound: the color with &#64;color.rgba_color_id does not exist.
     * </pre>
     */
    public void updateRgbaColor(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateRgbaColorMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Delete the rgba color with the &#64;rgba_color_id for the org sending the request.
     * Deletes any real time management state colors that are using &#64;rgba_color_id, leaving them with their default colors.option
     * Errors:
     *  - grpc.Invalid: the &#64;rgba_color_id is invalid or does not exist.
     *  - grpc.Internal: error occurs when deleting the rgba color or real time management state colors.
     * </pre>
     */
    public void deleteRgbaColor(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteRgbaColorMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence &#64;notification_config for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;notification_config.
     * </pre>
     */
    public void createAdherenceRuleNotificationConfig(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateAdherenceRuleNotificationConfigMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence &#64;notification_config for the org sending the request.
     * Fields that can be updated are: name.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config are invalid.
     *   - grpc.NotFound: the given notification config is not found.
     *   - grpc.Internal: error occurs when updating the given &#64;notification_config.
     * </pre>
     */
    public void updateAdherenceRuleNotificationConfig(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateAdherenceRuleNotificationConfigMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence &#64;notification_config_entry for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config_entry are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;notification_config_entry.
     *   - grpc.NotFound: notification config with the &#64;notification_config_sid does not exist.
     * </pre>
     */
    public void createAdherenceRuleNotificationConfigEntry(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateAdherenceRuleNotificationConfigEntryMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence &#64;notification_config_entry for the org sending the request.
     * Fields that can be updated are: recipient_user_id, notification_medium, seconds_to_wait_for_no_response.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config_entry are invalid.
     *   - grpc.NotFound: the given notification config entry is not found.
     *   - grpc.Internal: error occurs when updating the given &#64;notification_config_entry.
     * </pre>
     */
    public void updateAdherenceRuleNotificationConfigEntry(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateAdherenceRuleNotificationConfigEntryMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the notification config entry that has the given &#64;adherence_rule_notification_config_entry_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the given &#64;adherence_rule_notification_config_entry_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_rule_notification_config_entry_id.
     *   - grpc.NotFound: notification config with the &#64;adherence_rule_notification_config_entry_id does not exist.
     * </pre>
     */
    public void deleteAdherenceRuleNotificationConfigEntry(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteAdherenceRuleNotificationConfigEntryMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets all adherence rule &#64;notification_configs for the org sending the request.
     * Configs will include their respective entries.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the notification configs.
     * </pre>
     */
    public void listAdherenceRuleNotificationConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListAdherenceRuleNotificationConfigsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence departmental &#64;rule for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;rule.
     * </pre>
     */
    public void createAdherenceDepartmentalRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateAdherenceDepartmentalRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence departmental &#64;rule for the org sending the request.
     * Fields that can be updated are: name, selected_entity_id, selected_entity_type, rule_requirement_type,
     * rule_range, custom_range, adherence_rule_notification_config_id.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.NotFound: departmental rule clause with &#64;adherence_departmental_rule_clause_id does not exist.
     *   - grpc.Internal: error occurs when updating the given &#64;rule.
     * </pre>
     */
    public void updateAdherenceDepartmentalRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateAdherenceDepartmentalRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence departmental rule &#64;clause for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;clause.
     *   - grpc.NotFound: departmental rule with the &#64;departmetal_rule_sid does not exist.
     * </pre>
     */
    public void createAdherenceDepartmentalRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateAdherenceDepartmentalRuleClauseMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence departmental rule &#64;clause for the org sending the request.
     * Fields that can be updated are: action_type, condition, amount, unit, per_amount, per_unit.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when updating the given &#64;clause.
     *   - grpc.NotFound: departmental rule with the with &#64;adherence_departmental_rule_clause_id does not exist to update.
     * </pre>
     */
    public void updateAdherenceDepartmentalRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateAdherenceDepartmentalRuleClauseMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the departmental rule clause that has the given &#64;adherence_departmental_rule_clause_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the value of the given &#64;adherence_departmental_rule_clause_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_departmental_rule_clause_id.
     *   - grpc.NotFound: departmental rule with the &#64;adherence_departmental_rule_clause_id does not exist.
     * </pre>
     */
    public void deleteAdherenceDepartmentalRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteAdherenceDepartmentalRuleClauseMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets all adherence departmental &#64;rules for the org sending the request.
     * Rules will include their respective clauses.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the rules.
     * </pre>
     */
    public void listAdherenceDepartmentalRules(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListAdherenceDepartmentalRulesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence agent &#64;rule for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;rule.
     * </pre>
     */
    public void createAdherenceAgentRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateAdherenceAgentRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence agent &#64;rule for the org sending the request.
     * Fields that can be updated are: name, selected_entity_id, selected_entity_type, rule_requirement_type, adherence_rule_notification_config_id.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.NotFound: agent rule clause with &#64;adherence_agent_rule_clause_id does not exist.
     *   - grpc.Internal: error occurs when updating the given &#64;rule.
     * </pre>
     */
    public void updateAdherenceAgentRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateAdherenceAgentRuleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates the given adherence agent rule &#64;clause for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;clause.
     *   - grpc.NotFound: agent rule with the &#64;agent_rule_sid does not exist.
     * </pre>
     */
    public void createAdherenceAgentRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getCreateAdherenceAgentRuleClauseMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Updates the given adherence agent rule &#64;clause for the org sending the request.
     * Fields that can be updated are: action_type, condition, amount, unit.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when updating the given &#64;clause.
     *   - grpc.NotFound: agent rule with the with &#64;adherence_agent_rule_clause_id does not exist to update.
     * </pre>
     */
    public void updateAdherenceAgentRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getUpdateAdherenceAgentRuleClauseMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets all adherence agent &#64;rules for the org sending the request.
     * Rules will include their respective clauses.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the rules.
     * </pre>
     */
    public void listAdherenceAgentRules(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getListAdherenceAgentRulesMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Deletes the agent rule clause that has the given &#64;adherence_agent_rule_clause_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the value of the given &#64;adherence_agent_rule_clause_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_agent_rule_clause_id.
     *   - grpc.NotFound: departmental rule with the &#64;adherence_agent_rule_clause_id does not exist.
     * </pre>
     */
    public void deleteAdherenceAgentRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getDeleteAdherenceAgentRuleClauseMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Gets the published schedule for the corresponding &#64;datetime_range for the agent and org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range, &#64;metric_types are invalid.
     *   - grpc.Internal: error occurs when getting the published schedule.
     * </pre>
     */
    public void agentGetSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getAgentGetScheduleMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Lists agent leave petitions over the &#64;datetime_range for the agent and org sending the request.
     * If no &#64;datetime_range is provided, petitions will be returned across all datetimes.
     * If &#64;include_archived is true, archived agent leave petitions will be returned as well, otherwise archived requests will not be included.
     * If no agent leave petitions are found for the given parameters, an empty list will be returned.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when listing the agent leave petitions.
     * </pre>
     */
    public void agentListLeavePetitions(com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getAgentListLeavePetitionsMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Creates an agent leave petition to request time off over the &#64;requested_datetime_ranges for the agent and org sending the request.
     * The &#64;petition_comment must be set with a value.
     * The &#64;requested_datetime_ranges may not overlap each other.
     * The number of working hours requested off should be set in &#64;requested_hours_off.
     * The &#64;requested_hours_off does not need to relate directly to the datetime range being requested off,
     *   for example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
     * The usage of &#64;requested_hours_off hours will depend on org policy, but is not yet implemented.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the time off request.
     * </pre>
     */
    public void agentCreateLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getAgentCreateLeavePetitionMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     * <pre>
     * Cancels the given &#64;agent_leave_petition_id for the agent and organization sending the request.
     * If &#64;agent_leave_petition_id has a status of APPROVED_PETITION, the agent's schedule will have time off blocks removed,
     *   but any desired shifts must be added by the user after that leave is canceled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is already canceled.
     *   - grpc.Internal: error occurs when canceling the agent leave petition, or removing time off shifts from the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public void agentCancelLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest request,
        io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse> responseObserver) {
      io.grpc.stub.ClientCalls.asyncUnaryCall(
          getChannel().newCall(getAgentCancelLeavePetitionMethod(), getCallOptions()), request, responseObserver);
    }
  }

  /**
   * A stub to allow clients to do synchronous rpc calls to service WFM.
   * <pre>
   * WFM is responsible for call prediction and call volume calculations based on call skills and other parameters.
   * </pre>
   */
  public static final class WFMBlockingStub
      extends io.grpc.stub.AbstractBlockingStub<WFMBlockingStub> {
    private WFMBlockingStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected WFMBlockingStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new WFMBlockingStub(channel, callOptions);
    }

    /**
     * <pre>
     * Starts the tasks to perform the initial setup on wfm services for the org sending the request.
     * It will then report the state of their setup task.
     * A new setup task will only be started if the client hasn't done one before, or their setup failed previously.
     * Errors:
     *  - grpc.Internal: error occurs when performing the initial setup.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse performInitialClientSetup(com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getPerformInitialClientSetupMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Create an initial set of demo activities for the org sending the requests.
     * If any non skill activities already exist matching the names of the demo non skill activities, a second copy will not be created.
     * Required permissions:
     *   NONE
     * Errors:
     *   - grpc.Internal: error occurs when creating the activities or checking if they already exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse createInitialDemoActivities(com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateInitialDemoActivitiesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Retrieves all the skill profiles of the org sending the request.
     * Also it can return the skills of each of the returned profiles.
     * Errors:
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes listSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListSkillProfilesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the &#64;name, and averages of a skill profile that has the given &#64;skill_profile_sid.
     * It also updates it to no longer be unnamed.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid, &#64;name or averages in the request are invalid.
     *   - grpc.Internal: error occurs when updating the skill profile.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes updateSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateSkillProfileMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the &#64;proficiencies for the given skill profile's skills that belong the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;proficiencies in the request are invalid.
     *   - grpc.Internal: error occurs when updating the skill profiles proficiencies.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes updateSkillProfileProficiencies(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateSkillProfileProficienciesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Get a skill profile that has the given &#64;skill_profile_sid.
     * It also gets all the skills and the mappings associated with that profile.
     * If the &#64;inactive_as_of_date of the skill profile is nil then the mapping is of inactive profiles to this one,
     * otherwise the mapping is of this profile to an active one.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.Internal: error occurs when getting the skill profile.
     *   - grpc.NotFound: skill profile doesn't exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes getSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetSkillProfileMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Resyncs the skill profiles of the org sending the request.
     * It will add skills and skill profiles based on that client's historical call data.
     * Errors:
     *   - grpc.Internal: error occurs when creating the new skills and skill profiles.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes resyncSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getResyncSkillProfilesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the last date of a skill profile resync for the org seding the request.
     * If the org has never done a skill profile resync &#64;resync_date will not be set.
     * Errors:
     *   - grpc.Internal: error occurs when getting the resync date.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes getLastSkillProfileResyncDate(com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetLastSkillProfileResyncDateMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Tries to create an entry for the given forecasting parameters for the org sending the request.
     * If the org already has an entry for them, it will update the already existing entry.
     * Errors:
     *   - grpc.Invalid: the &#64;forecasting_parameters in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the parameters.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes upsertForecastingParameters(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertForecastingParametersMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the forecasting parameters for the org sending the request.
     * If the org hasn't created any parameters, it will return the default parameters.
     * Errors:
     *   - grpc.Internal: error occurs when getting the parameters.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes getForecastingParameters(com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetForecastingParametersMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the state of the cache for the org sending the request, and if the cache's state is not_loaded, or loading_failed,
     * it will start the loading task before returning the current state.
     * DEPRECATED as of Dec/13/2023 - Use PerformInitialClientSetup instead.
     * Errors:
     *  -grpc.Internal: error occurs when getting the cache info.
     * </pre>
     */
    @java.lang.Deprecated
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes getClientHistoryCacheInfo(com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetClientHistoryCacheInfoMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the historical data for the org sending the request and the given &#64;skill_profile_category.
     * It will look through the client's call history and generate the historical data by using their configured forecasting parameters (historical data period and interval width).
     * The duration of each interval will be the interval width of the org's forecasting parameters.
     * It also applies any deltas that the client has stored for the given &#64;skill_profile_category, if the category is a group it will use the deltas of the skill profiles part of that group.
     * If the client has no historical data, only the deltas will be applied to the returned intervals, all other intervals will have nil averages.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_category given is not found for the org.
     *   - grpc.Internal: error occurs when getting the historical data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes listHistoricalData(com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListHistoricalDataMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Tries to create an entry for the given &#64;delta for the org sending the request.
     * If the org already has an entry for it, it will update the already exisiting entry.
     * Errors:
     *   - grpc.Invalid: the &#64;delta in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the historical data interval.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes upsertHistoricalDataDelta(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertHistoricalDataDeltaMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Tries to create entries for the given &#64;deltas.
     * If the given org already has an entry for any of the deltas, it will replace the already existing entries.
     * This is made into a unary due to the UI's lack of support for client streams.
     * Errors:
     *   - grpc.Invalid: the &#64;deltas in the request are invalid.
     *   - grpc.Internal: error occurs when upserting the historical data deltas.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes upsertHistoricalDataDeltas(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertHistoricalDataDeltasMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets all the skills that the org sending the request has.
     * Skills returned will be sorted by &#64;skill_sid in ascending order.
     * Errors:
     *   - grpc.Internal: error occurs when getting the skills.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes listSkills(com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListSkillsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds and returns a call profile template for the org sending the request and the given &#64;skill_profile_sid.
     * The template will be generated using the training data for said skill profile using the &#64;training_data_range and &#64;averages_calculation_range_in_months
     * from the client's saved forecasting parameters.
     * The &#64;total_calls in the returned template be summed from the (&#64;training_data_start_datetime - &#64;averages_calculation_range_in_months) to &#64;training_data_end_datetime,
     * or from &#64;training_data_start_datetime to &#64;training_data_end_datetime if &#64;averages_calculation_range_in_months is 0.
     * The fixed averages fields in the call profile template, will be set to the averages that the skill profile has.
     * DEPRECATED as of Sep/7/2023 - Use BuildCallProfileTemplate instead.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid given is not found for the org.
     *   - grpc.Internal: error occurs when building the call profile template.
     * </pre>
     */
    @java.lang.Deprecated
    public com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes buildCallProfileTemplateForSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getBuildCallProfileTemplateForSkillProfileMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds and returns a call profile template for the org sending the request and the given &#64;skill_profile_category.
     * The template will be generated using the training data for said skill profile category using the &#64;training_data_range and &#64;averages_calculation_range_in_months
     * from the client's saved forecasting parameters.
     * The &#64;total_calls in the returned template be summed from the (&#64;training_data_start_datetime - &#64;averages_calculation_range_in_months) to &#64;training_data_end_datetime,
     * or from &#64;training_data_start_datetime to &#64;training_data_end_datetime if &#64;averages_calculation_range_in_months is 0.
     * The fixed averages fields in the call profile template, will be set to the averages that the skill profile category has.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_category given is not found for the org.
     *   - grpc.Internal: error occurs when building the call profile template.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes buildCallProfileTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getBuildCallProfileTemplateMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a mapping entry for the &#64;inactive_skill_profile_sid to the &#64;active_skill_profile_sid for the org sending the request.
     * DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
     * Errors:
     *   - grpc.Invalid: the &#64;inactive_skill_profile_sid, or &#64;active_skill_profile_sid in the request are invalid.
     *                   the &#64;inactive_skill_profile_sid given is of an active skill profile.
     *                   the &#64;active_skill_profile_sid given is of an inactive skill profile.
     *   - grpc.Internal: error occurs when creating the inactive skill profile mapping.
     * </pre>
     */
    @java.lang.Deprecated
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes createInactiveSkillProfileMapping(com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateInactiveSkillProfileMappingMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets a list of enums that represent all of the forecaster types that are currently available for use
     * Errors:
     *  -grpc.Internal: error occurs when contacting the forecaster to get the available forecaster types.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes getAvailableRegressionForecasterModelTypes(com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetAvailableRegressionForecasterModelTypesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Changes the current mapping for the given &#64;inactive_skill_profile_sid to be disconnected.
     * DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
     * Errors:
     *   - grpc.Invalid: the &#64;inactive_skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the skill profile is not found for the org.
     *   - grpc.Internal: the current mapping for the given &#64;inactive_skill_profile_sid is already disconnected,
     *				            the given &#64;inactive_skill_profile_sid is of an active skill profile.
     * </pre>
     */
    @java.lang.Deprecated
    public com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes disconnectInactiveSkillProfileMapping(com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDisconnectInactiveSkillProfileMappingMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given &#64;skill_profile_group.
     * &#64;skill_profile_group_sids will be ignored since associations cannot be created by this method.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group in the request is invalid.
     *   - grpc.Internal: error occurs creating the skill profile group.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes createSkillProfileGroup(com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateSkillProfileGroupMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given &#64;skill_profile_group that has the &#64;skill_profile_group_sid for the org sending the request.
     * &#64;skill_profile_group_sids will be ignored since associations cannot be updated by this method.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group in the request is invalid.
     *   - grpc.NotFound: the skill profile group to update doesn't exist.
     *   - grpc.Internal: error occurs updating the skill profile group.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes updateSkillProfileGroup(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateSkillProfileGroupMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the skill profile groups that have the &#64;skill_profile_group_sids for the org sending the request.
     * if &#64;include_inactive is true then inactive groups will also be included, otherwise only active groups will be returned.
     * If &#64;skill_profile_group_sids is empty it will get all the skill profile groups for the org.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group_sids in the request is invalid.
     *   - grpc.Internal: error occurs getting the skill profile groups.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes listSkillProfileGroups(com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListSkillProfileGroupsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates associations of the given &#64;skill_profile_group_sid for the org sending the request.
     * It will create the associations with the &#64;skill_profile_sids_to_associate, and remove the associations with the &#64;skill_profile_sids_to_disassociate.
     * Only one of the skill_profile_sids fields needs to be set, but both can be set on the same request.
     * Errors:
     *   - grpc.Invalid: the values in the request are invalid.
     *   - grpc.Internal: error occurs updating the skill profile group associations.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes updateSkillProfileGroupAssociations(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateSkillProfileGroupAssociationsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes deltas whose dates match the given &#64;start_datetimes for the given &#64;skill_profile_sid.
     * If no &#64;start_datetimes are given, it will delete all the deltas that the given &#64;skill_profile_sid has.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid, or &#64;start_datetimes in the request are invalid.
     *   - grpc.NotFound: no matching deltas are found for deletion.
     *   - grpc.Internal: error occurs during the deletion of the historical data interval.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes deleteHistoricalDataDeltas(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteHistoricalDataDeltasMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the top N skill profiles with the highest calls_count for org sending the request where N is &#64;max_number_of_profiles.
     * It will also return the number of skills found for that profile.
     * Individual skills that each profile has will not be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;max_number_of_profiles in the request is invalid.
     *   - grpc.Internal: error occurs when getting the skill profiles.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes listTopSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListTopSkillProfilesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the total number of skill profiles associated with the org sending the request.
     * Errors:
     *   - grpc.Internal: error occurs when getting the skill profiles count.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes getSkillProfilesCount(com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetSkillProfilesCountMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds a profile forecast using the provided &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * (&#64;training_data_range_end_datetime - &#64;forecast_test_range_in_weeks) to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category or &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the building of the profile forecast.
     * </pre>
     */
    public java.util.Iterator<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> buildProfileForecastByInterval(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq request) {
      return io.grpc.stub.ClientCalls.blockingServerStreamingCall(
          getChannel(), getBuildProfileForecastByIntervalMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds a profile forecast using the provided &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * (&#64;training_data_range_end_datetime - &#64;forecast_test_range_in_weeks) to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplate.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * It also returns the statistics of the produced forecast by using the test data of the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category or &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the building of the profile forecast.
     * </pre>
     */
    public java.util.Iterator<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes> buildProfileForecastByIntervalWithStats(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq request) {
      return io.grpc.stub.ClientCalls.blockingServerStreamingCall(
          getChannel(), getBuildProfileForecastByIntervalWithStatsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds a profile forecast for the given &#64;skill_profile_sid and org sending the request using the given &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * &#64;forecast_range_start_datetime to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
     * The intervals produced will be saved in the database.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid or &#64;call_profile_template in the request are invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid doesn't exist.
     *   - grpc.Internal: error occurs when upserting the profile forecast.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes upsertProfileForecast(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertProfileForecastMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given &#64;call_profile_template for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the creation of the call profile.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes createCallProfileTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateCallProfileTemplateMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes a call profile template for the requesting org that has the given &#64;call_profile_template_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;call_profile_template_sid in the request is invalid.
     *   - grpc.Internal: error occurs during the deletion of the call profile.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes deleteCallProfileTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteCallProfileTemplateMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates an entry for the &#64;regression_template for the requesting org.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs when creating the regression template.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes createRegressionTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateRegressionTemplateMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes a regression template for the requesting org that has the given &#64;regression_template_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template_sid in the request is invalid.
     *   - grpc.Internal: error occurs during the deletion of the regression template.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes deleteRegressionTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteRegressionTemplateMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets all the regression templates that the org sending the request has.
     * Errors:
     *   - grpc.Internal: error occurs when getting the regression templates.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes listRegressionTemplates(com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListRegressionTemplatesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_sid.
     * DEPRECATED as of Sep/13/2023 - Use ListForecastIntervals instead.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    @java.lang.Deprecated
    public java.util.Iterator<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> listForecastIntervalsForSkillProfile(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq request) {
      return io.grpc.stub.ClientCalls.blockingServerStreamingCall(
          getChannel(), getListForecastIntervalsForSkillProfileMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    public java.util.Iterator<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> listForecastIntervals(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq request) {
      return io.grpc.stub.ClientCalls.blockingServerStreamingCall(
          getChannel(), getListForecastIntervalsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response listForecastIntervalsV2(com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListForecastIntervalsV2Method(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Generates a regression forecast using the provided &#64;regression_template.
     * It will generate forecast intervals for the skill profiles sids in &#64;skill_profile_sids_to_forecast.
     * It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
     * It will use the client's saved interval width to divide the resulting forecast intervals.
     * Errors:
     *   - grpc.Invalid: no &#64;skill_profile_sids_to_forecast are given or the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs during the building of the regression forecast.
     * </pre>
     */
    public java.util.Iterator<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval> buildRegressionForecastByInterval(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq request) {
      return io.grpc.stub.ClientCalls.blockingServerStreamingCall(
          getChannel(), getBuildRegressionForecastByIntervalMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Generates a regression forecast and calculates forecast statistics using the provided &#64;regression_template.
     * It will generate forecast intervals for the skill profiles sids in &#64;skill_profile_sids_to_forecast.
     * It will use the client's saved forecasting test range as the start datetime and the forecast range as the end datetime of the forecasted data.
     * It will use the client's saved interval width to divide the resulting forecast intervals.
     * The first message received will be the forecast statistics while all subsequent ones will be the forecast intervals.
     * Errors:
     *   - grpc.Invalid: no &#64;skill_profile_sids_to_forecast are given or the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs either during the when building the forecast or calculating the stats.
     * </pre>
     */
    public java.util.Iterator<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes> buildRegressionForecastByIntervalWithStats(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq request) {
      return io.grpc.stub.ClientCalls.blockingServerStreamingCall(
          getChannel(), getBuildRegressionForecastByIntervalWithStatsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the call profile templates that the org sending the request has.
     * Errors:
     *   - grpc.Internal: error occurs when getting the templates.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes listCallProfileTemplates(com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListCallProfileTemplatesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds a regression forecast for the org using the given &#64;regression_template and saves the resulting intervals in the db.
     * It will generate forecast intervals for the skill profiles sids in &#64;save_forecasts_for_skill_profile_sids,
     * if the list is empty or has no valid skill profile sids, it will generate and save forecasts for all active skill profiles.
     * If any intervals produced already exist in the db, they will be replaced with the ones produced.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the regression forecast.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes upsertRegressionForecast(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertRegressionForecastMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Tries to create an entry for the given &#64;delta for the org sending the request.
     * If the org already has an entry for it, it will update the already exisiting entry.
     * Errors:
     *   - grpc.Invalid: the &#64;delta in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the forecast data delta.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes upsertForecastDataDelta(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertForecastDataDeltaMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Tries to create entries for the given &#64;deltas.
     * If the org already has entries for any of them, it will update the already existing entry.
     * Errors:
     *   - grpc.Invalid: the &#64;deltas in the request are invalid.
     *   - grpc.Internal: error occurs when upserting the forecast data deltas.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes upsertForecastDataDeltas(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertForecastDataDeltasMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes forecast data intervals/deltas based on the parameters provided.
     * If &#64;delete_param is type skill_profile_category, then the intervals/deltas to be deleted will be
     * associated with that id. If &#64;delete_param is type interval_sids, then the intervals/deltas to be
     * deleted will be contained in the list &#64;interval_sids. The &#64;delete_type field determines which
     * table(s) in the database the intervals/deltas will be deleted from.
     * Errors:
     *   - grpc.Invalid: one of the &#64;delete_params is invalid
     *   - grpc.NotFound: no matching intervals/deltas are found for deletion.
     *   - grpc.Internal: error occurs during the deletion of the forecast data intervals/deltas.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes deleteForecastIntervals(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteForecastIntervalsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Retrieves the history for all the skill profiles of the requesting org.
     * Each value in every interval that has the same &#64;start_datetime of each skill profile will be summed then averaged and made into a single one.
     * When calculating the averages, each interval's values will be weighted by the number of &#64;total_calls it has.
     * History will be sorted by &#64;start_datetime in ascending order, and the range is determined by the client's historical range.
     * Errors:
     *   - grpc.Internal: error occurs when retriving the history.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes listHistoricalDataForAllSkillProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListHistoricalDataForAllSkillProfilesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Converts the given &#64;profile_tod and &#64;profile_woms to a ProfileDOW and ProfileMOY.
     * Errors:
     *   - grpc.Invalid: the &#64;profile_tod or &#64;profile_woms in the request are invalid.
     *   - grpc.Internal: error occurs when building the ProfileDOW or ProfileMOY.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes buildDOWAndMOYProfiles(com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getBuildDOWAndMOYProfilesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Calculates and returns the averages in the training data for the given &#64;skill_profile_sid.
     * Averages to be returned will be weighted by the number of calls that each training data interval has.
     * The start time that the training data will be averaged can be modified based on the forecasting parameter &#64;averages_calculation_range_in_months,
     * which will subtract that many months from the training data range end datetime and set it as the start time.
     * If &#64;averages_calculation_range_in_months is 0, it will use the training data range start datetime.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid given is not found.
     *   - grpc.Internal: error occurs when calculating the averages from the training data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes calculateTrainingDataAveragesForSkillProfile(com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCalculateTrainingDataAveragesForSkillProfileMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Calculates the averages for call characteristics using the historical data of the given &#64;skill_profile_sids, &#64;skill_profile_group_sids and org sending the request.
     * If no &#64;skill_profile_sids are given, it will calculate the averages for all skill profiles for the org sending the request.
     * If no &#64;skill_profile_group_sids are given, it will calculate the averages for all skill profile groups for the org sending the request.
     * Averages will be weighted by the number of calls that each historical data interval has.
     * Once the averages are calculated, they will be updated in the db for those skill profiles.
     * If a nil &#64;datetime_range is given then the range used will be &#64;training_data_range_end_datetime - &#64;averages_calculation_range_in_months to the &#64;training_data_range_end_datetime from the forecasting parameters.
     * If &#64;averages_calculation_range_in_months is 0, it will use the &#64;training_data_range_start_datetime as the start datetime of the range.
     * If &#64;exclude_skill_profiles_with_manual_averages is true, it will exclude skill profiles and groups that have manual averages from the calculation
     * even if those skill profiles and groups are in &#64;skill_profile_sids or &#64;skill_profile_group_sids respectively.
     * Errors:
     *   - grpc.Internal: error occurs when calculating the averages from the historical data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes updateSkillProfileAveragesUsingHistoricalData(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateSkillProfileAveragesUsingHistoricalDataMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the call center &#64;node that has the given &#64;call_center_node_sid.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this call center node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the one or more of the fields in the request are invalid.
     *   - grpc.Internal: error occurs when updating the call center node.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes updateCallCenterNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateCallCenterNodeMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given client &#64;node for the org sending the request and &#64;parent_sid in the node.
     * The &#64;client_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent call center node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;parent_sid, or &#64;time_zone_val is invalid.
     *   - grpc.NotFound: parent call center node doesn't exist, or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the client node.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes createClientNode(com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateClientNodeMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a client node for the org sending the request that has the given &#64;client_node_sid and &#64;schedule_scenario_sid.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this client node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.Internal: error occurs when updating the client &#64;node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given &#64;parent_sid (call_center_node_sid) belongs to a different scenario than this &#64;node.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes updateClientNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateClientNodeMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given location &#64;node for the org sending the request and parent &#64;client_node_sid.
     * The &#64;location_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent client node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.NotFound: parent client node doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the location node.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes createLocationNode(com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateLocationNodeMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a location node corresponding to the given &#64;location_node_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this location node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;location_node have invalid values.
     *   - grpc.Internal: error occurs when updating the location node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given parent &#64;client_node_sid belongs to a different scenario than the node to update.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes updateLocationNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateLocationNodeMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given program &#64;node for the org sending the request and parent &#64;location_node_sid.
     * The &#64;program_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent location node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.NotFound: parent location node doesn't exist or belongs to a different scenario than the one given.
     *                    the &#64;skill_profile_category does not exist.
     *   - grpc.Internal: error occurs when creating the program node.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes createProgramNode(com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateProgramNodeMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a program node for the given &#64;program_node_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this program node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;program_node have invalid values.
     *   - grpc.Internal: error occurs when updating the program node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given parent &#64;location_node_sid belongs to a different scenario than the program node to update.
     *                    the &#64;skill_profile_category does not exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes updateProgramNode(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateProgramNodeMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the program nodes with the given &#64;program_node_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the given &#64;program_node_sids are invalid.
     *   - grpc.Internal: error occurs when listing the program nodes.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes listProgramNodesBySid(com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListProgramNodesBySidMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given &#64;constraint_rule for the org sending the request.
     * The &#64;constraint_rule_sid and &#64;skill_proficiency_sid (if one was created) of the new entities will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * If &#64;rule_type is set to MIN_SKILL_LEVEL, the &#64;member_target_entity field must be set with a skill proficiency and the &#64;constraint_rule.target_sid will be ignored.
     * If the &#64;member_target_entity is for a skill proficiency, that skill proficiency will be created with the given &#64;constraint_rule as parent.
     * If &#64;rule_type is NOT MIN_SKILL_LEVEL then the &#64;target_sid must be that of a scheduling activity.
     * The all other &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;constraint_rule have invalid values.
     *   - grpc.NotFound: the given &#64;target_sid for the given &#64;rule_type, or &#64;parent_entity don't exist.
     *   - grpc.Internal: error occurs when creating the constraint rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes createConstraintRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateConstraintRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the constraint rule corresponding for given &#64;contraint_rule_sid for the org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this constraint rule since it cannot be changed.
     * If &#64;rule_type is set to MIN_SKILL_LEVEL, the &#64;member_target_entity field must be set with a skill proficiency, otherwise it should not be set and field will be ignored.
     * If the &#64;target_sid is for a different skill proficiency than the current one the constraint rule has as a target,
     * the old one will be deleted and a new one will be created for the given &#64;member_target_entity.
     * If &#64;rule_type is NOT MIN_SKILL_LEVEL then the &#64;target_sid must be that of a scheduling activity.
     * The all other &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;constraint_rule have invalid values.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the constraint rule.
     *                  : the given &#64;target_sid for the given &#64;rule_type, or &#64;parent_entity don't exist.
     *   - grpc.Internal: error occurs when updating the constraint rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes updateConstraintRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateConstraintRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes a constraint rule with the coresponding &#64;constraint_rule_sid for the org sending the request.
     * It also deletes the entity referenced by the &#64;target_sid and &#64;rule_type if said entity is not a member of any other entity or the on call scheduling activity.
     * Errors:
     *   - grpc.Invalid: the &#64;constraint_rule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;constraint_rule doesn't exist.
     *   - grpc.Internal: error occurs when removing the constraint rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes deleteConstraintRule(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteConstraintRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given &#64;non_skill_activity for the org sending the request.
     * Will also create a scheduling activity wrapper for the non skill activity.
     * The &#64;non_skill_activity_sid and &#64;scheduling_activity_sid of the new entities will be returned in the response.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;non_skill_activity have invalid values.
     *   - grpc.NotFound: the &#64;schedule_scenario_sid doesn't exist.
     *   - grpc.Internal: error occurs when creating the non skill activity or scheduling activity.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes createNonSkillActivity(com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateNonSkillActivityMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a non skill activity that has the given &#64;non_skill_activity_sid with the given values.
     * Errors:
     *   - grpc.Invalid: &#64;non_skill_activity fields have invalid values.
     *   - grpc.NotFound: non skill activity for the given &#64;non_skill_activity_sid doesn't exist.
     *   - grpc.Internal: error occurs when updating the non skill activity.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes updateNonSkillActivity(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateNonSkillActivityMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the non skill activities that belong to the org sending the request.
     * Errors:.
     *   - grpc.Internal: error occurs when listing the activites.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes listNonSkillActivities(com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListNonSkillActivitiesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the IDs of non skill activities that belong to the org sending the request which have the given &#64;relationship_type with the &#64;associated_entity.
     * Errors:
     *   - grpc.Invalid: the &#64;associated_entity or &#64;relationship_type are invalid.
     *   - grpc.Internal: error occurs when listing the associations.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes listNonSkillActivityAssociations(com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListNonSkillActivityAssociationsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the candidate scheduling activities for a constraint or placement rule, inherited through given &#64;parent_of_rule for &#64;schedule_scenario_sid for the org making the request.
     * &#64;parent_of_rule may be any type of node, agent group, or shift template which the rule will belong to.
     * If the rule will belong to a wfm agent, the agent group must be supplied instead to get a relevant set of candidate scheduling activities.
     * Member non skill activity of each scheduling activity will be included in the response.
     * The on call scheduling activity will always be included.
     * Errors:
     *   - grpc.Invalid: the &#64;parent_of_rule is invalid.
     *   - grpc.NotFound: &#64;parent_of_rule doesn't exist
     *   - grpc.Internal: error occurs when applying inheritance or getting the nodes from &#64;parent_of_rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes listCandidateSchedulingActivities(com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListCandidateSchedulingActivitiesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists all the scheduling activities for the org making the request.
     * Their member non skill activities and pause codes will always be included.
     * Errors:
     *   - grpc.Internal: error occurs when getting the activities or its members.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse listSchedulingActivities(com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListSchedulingActivitiesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the on call scheduling activity for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   -grpc.NotFound: the on call scheduling activity for the org is not found.
     *   -grpc.Internal: error occurs when getting on call scheduling activity.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes getOnCallSchedulingActivity(com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetOnCallSchedulingActivityMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the Open Time and Agent Availability patterns for the given &#64;parent_entity and &#64;scheduling_activity_classifications for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   - grpc.Invalid: the arguments in the request are invalid.
     *   - grpc.Internal: error occurs getting the patterns or their scheduling activity sids.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse listPatternsForSchedulingActivityClassifications(com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListPatternsForSchedulingActivityClassificationsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the time off scheduling activity for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   -grpc.NotFound: the time off scheduling activity for the org is not found.
     *   -grpc.Internal: error occurs when getting time off scheduling activity.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse getTimeOffSchedulingActivity(com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetTimeOffSchedulingActivityMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates an agent group with the provided parameters.
     * A successful response should contain the &#64;agent_group_sid of the newly created entity.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, or &#64;parent_entity are invalid.
     *   - grpc.NotFound: &#64;parent_entity doesn't exist
     *   - grpc.Internal: error occurs when creating the agent group.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes createAgentGroup(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateAgentGroupMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * ListAgentScheduleGroups lists all schedulable agent groups for the given &#64;entity filled with &#64;member_wfm_agents for the org sending the request.
     * The given &#64;entity must be either a Node or a ShiftTemplate.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the agent groups.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse listAgentScheduleGroups(com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListAgentScheduleGroupsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the agent group corresponding to the &#64;agent_group_sid, &#64;name, and &#64;parent_entity.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this agent group since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_group_sid, &#64;parent_entity, or &#64;name in the request are invalid.
     *   - grpc.Internal: error occurs when updating the agent group.
     *   - grpc.AlreadyExists: an agent group with the given &#64;name already exists.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the agent group.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes updateAgentGroup(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateAgentGroupMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates an agent that is not assigned a tcn agent for the org sending the request.
     * If &#64;wfm_agent_sid_to_copy_agent_group_associations is set, it will also copy that agent's agent group associations to the new agent.
     * Otherwise only the new agent will be created.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sid_to_copy_agent_group_associations in the request is invalid.
     *   - grpc.Internal: error occurs creating the agent or the memberships.
     *   - grpc.NotFound: the given &#64;wfm_agent_sid_to_copy_agent_group_associations doesn't exist for the org.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse createUnassignedWFMAgent(com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateUnassignedWFMAgentMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a wfm agent for the given &#64;wfm_agent_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * The &#64;tcn_agent_sid cannot be updated.
     * Required permission:
     *   NONE
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;wfm_agent have invalid values.
     *   - grpc.NotFound: WFM agent with the given &#64;wfm_agent_sid doesn't exist.
     *   - grpc.Internal: error occurs when updating the wfm agent.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes updateWFMAgent(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateWFMAgentMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists all wfm agents for the org sending the request.
     * if &#64;include_inactive is true then inactive agents will also be included, otherwise only active agents will be returned.
     * if &#64;include_skill_proficiencies is true then agents returned will include their skill proficiencies.
     * if &#64;include_agent_groups is true then the &#64;agent_groups_by_agent response field will be set with a list of agent groups correlating to each agents index in the &#64;wfm_agents field.
     * if &#64;include_agent_groups is set to true, the &#64;agent_group_schedule_scenario_sid field must be set, so that the agent groups for the correct scenario are returned.
     * if &#64;include_agent_groups is set to true, and &#64;agent_group_schedule_scenario_sid is not set, the agent groups will not be filtered by schedule scenario.
     * if &#64;include_agent_groups is set to false, the &#64;agent_group_schedule_scenario_sid will be ignored.
     * &#64;agent_group_schedule_scenario_sid does not effect which &#64;wfm_agents are returned.
     * WFM agents with no associated agent_groups will have an empty slice in agent_groups_by_agent at their correlated index.
     * Errors:
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes listAllWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListAllWFMAgentsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists all candidate wfm agents for the org sending the request and given &#64;agent_group_sid.
     * A WFM agent is considered a candidate when it's active and it doesn't already belong to the given agent group.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Invalid: &#64;agent_group_sid has an invalid value.
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes listCandidateWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListCandidateWFMAgentsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists all wfm agents who are not grouped with any agent group for the given org sending the request that were created at or after the given &#64;created_after_datetime.
     * If &#64;schedule_scenario_sid is positive, it will filter further to get only agents who are not grouped with any agent group for that scenario.
     * if &#64;include_skill_proficiencies is true then agents returned will include their skill proficiencies.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Invalid: &#64;created_after_datetime has an invalid value.
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes listUngroupedWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListUngroupedWFMAgentsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the wfm_agent_sids with the given &#64;tcn_agent_sids for the org sending the request.
     * Returns a map where Key: tcn_agent_sid - Value: wfm_agent_sid.
     * If the wfm_agent_sid is not found for any &#64;tcn_agent_sids, they will not have an entry in the returned &#64;sids.
     * Errors:
     *  - grpc.Invalid: the &#64;tcn_agent_sids are invalid.
     *  - grpc.Internal: error occours while listing the wfm_agent_sids.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes listWFMAgentSids(com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListWFMAgentSidsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists all wfm agents that don't have a TCN agent assigned to them for the given &#64;orgId.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse listUnassignedWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListUnassignedWFMAgentsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the IDs of wfm agents that belong to the org sending the request which are associated with the given &#64;agent_group_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_group_sid is invalid.
     *   - grpc.Internal: error occurs when listing the wfm agents.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes listWFMAgentsAssociatedWithAgentGroup(com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListWFMAgentsAssociatedWithAgentGroupMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a membership association for each of the given &#64;wfm_agent_sids with the given &#64;agent_group_sid.
     * The &#64;schedule_scenario_sid must match the scenario of the agent group and wfm agents.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sid are invalid.
     *   - grpc.NotFound: the &#64;wfm_agent_sids or &#64;agent_group_sid don't exist for the org or given &#64;schedule_scenario_sid.
     *   - grpc.Internal: error occurs when creating the association.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes createWFMAgentMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateWFMAgentMembershipsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Copies the membership association of &#64;originating_wfm_agent_sid to &#64;target_wfm_agent_sid.
     * The wfm agents must both belong to the org sending the request.
     * Any existing membership associations on &#64;target_wfm_agent_sid with be retained.
     * Any conflicting memberships for &#64;target_wfm_agent_sid will be set with the membership of &#64;originating_wfm_agent_sid.
     * Errors:
     *   - grpc.NotFound: the &#64;wfm_agent_sids or &#64;agent_group_sid don't exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the associations.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse copyWFMAgentMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCopyWFMAgentMembershipsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes a membership association for each of the given &#64;wfm_agent_sids with the given &#64;agent_group_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sid are invalid.
     *   - grpc.NotFound: any of the given memberships to delete do not exist.
     *   - grpc.Internal: error occurs when deleting the association.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes deleteWFMAgentMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteWFMAgentMembershipsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes all membership associations for the given &#64;wfm_agent_sids with the given &#64;agent_group_sids.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sids are invalid.
     *   - grpc.Internal: error occurs when deleting the associations.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes deleteWFMAgentsMemberships(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteWFMAgentsMembershipsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Removes the &#64;wfm_agent_sid_to_remove from all future shifts for the org.
     * If &#64;replace_with_new_unassigned_agent is set to true, a new unassigned agent will be created and it will be assigned to the shifts and agent groups from &#64;wfm_agent_sid_to_remove.
     * If &#64;replace_with_new_unassigned_agent is set to false, the future shifts will just be deleted.
     * If the &#64;wfm_agent_sid_to_remove is not currently inactive, it will be set as inactive.
     * Errors:
     *   - grpc.Internal: error occurs when deleting the shifts, creating the new unassigned agent, reassigning the shifts to that agent, or setting the agent to inactive.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse removeAgentFromFutureShifts(com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getRemoveAgentFromFutureShiftsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics for the wfm agent associated with the given &#64;wfm_agent_sid or &#64;agent_group_sid for the org sending the request.
     * Response will only contain:
     *    one element if build for a single &#64;wfm_agent_sid.
     *    one element for each WFM agent if build for an &#64;agent_group_sid.
     *   - grpc.Invalid: the &#64;wfm_agent_sid, or &#64;agent_group_sid is invalid.
     *   - grpc.NotFound: the given &#64;wfm_agent_sid doesn't exist or the &#64;agent_group_sid has no agents.
     *   - grpc.Internal: error occurs building the diagnostics.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes buildAgentDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getBuildAgentDiagnosticsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a shift template for the org sending the request with the provided parameters
     * The &#64;shift_template_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent program node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, or &#64;program_node_sid are invalid.
     *   - grpc.AlreadyExists: a shift template with the given &#64;name already exists.
     *   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the shift template.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes createShiftTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateShiftTemplateMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a shift template for the given &#64;shift_template_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this shift template since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the &#64;shift_template_sid, &#64;name, &#64;program_node_sid are invalid.
     *   - grpc.AlreadyExists: a shift template with the given &#64;name already exists.
     *   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the shift template to update.
     *   - grpc.Internal: error occurs when updating the shift template.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes updateShiftTemplate(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateShiftTemplateMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the shift templates matching the specified &#64;shift_template_sids for the org sending the request.
     * If &#64;include_placement_rules is set to true, the &#64;shift_templates will be returned with their member placement rules.
     * Errors:
     *   - grpc.Invalid: the &#64;shift_template_sids are invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes listShiftTemplatesBySids(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListShiftTemplatesBySidsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics for the shift template associated with the given &#64;shift_template_sid for the org sending the request.
     *   - grpc.Invalid: the &#64;shift_template_sid is invalid.
     *   - grpc.NotFound: the given &#64;shift_template_sid doesn't exist for the org sending the request.
     *   - grpc.Internal: error occours building the diagnostics for the shift template.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes buildShiftTemplateDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getBuildShiftTemplateDiagnosticsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a placement rule for org sending the request with the provided parameters.
     * The &#64;placement_rule_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent shift template.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;placement_rule are invalid.
     *   - grpc.NotFound: the parent shift template doesn't exist or belongs to a different scenario than the one given.
     *                    the scheduling activity to associate with the placement rule doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the placement rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes createPlacementRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreatePlacementRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a placement rule corresponding with the given &#64;placement_rule_sid for the org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this placement rule since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the one or more of the fields in the &#64;placement_rule are invalid.
     *   - grpc.Internal: error occurs when updating the placement rule.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     *                  : the parent shift template or related scheduling activity don't exist or belong to a different scenario than the placement rule to update.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes updatePlacementRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdatePlacementRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes a placement rule with the coresponding &#64;placement_rule_sid for the org sending the request.
     * It also deletes the scheduling activity referenced by the &#64;scheduling_activity_sid if said activity is not a member of any other entity.
     * Errors:
     *   - grpc.Invalid: the &#64;placement_rule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;placement_rule doesn't exist.
     *   - grpc.Internal: error occurs when removing the placement rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes deletePlacementRule(com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeletePlacementRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates an open times pattern for the org sending the request with the provided parameters.
     * The &#64;open_times_pattern_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;open_times_pattern are invalid.
     *   - grpc.NotFound: the parent entity doesn't exist.
     *   - grpc.Internal: error occurs when creating the open times pattern.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes createOpenTimesPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateOpenTimesPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates an open times pattern for the given &#64;open_times_pattern_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this open times pattern since it cannot be changed.
     * Required permission:
     *   NONE
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;open_times_pattern have invalid values.
     *   - grpc.NotFound: the given &#64;open_times_pattern or it's &#64;parent_entity doesn't exist.
     *   - grpc.Internal: error occurs when updating the open times pattern.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes updateOpenTimesPattern(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateOpenTimesPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes an open times pattern with the coresponding &#64;open_times_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;open_times_pattern_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;open_times_pattern doesn't exist.
     *   - grpc.Internal: error occurs when removing the open times pattern.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes deleteOpenTimesPattern(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteOpenTimesPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the inherited, own, and resulting bitmaps for the open times patterns of &#64;node_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;node_to_check.
     * If &#64;bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
     * If &#64;bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the open times patterns.
     * If &#64;bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the open times patterns.
     * The bitmaps will be generated for the span of &#64;datetime_range.
     * Errors:
     *   - grpc.Invalid: the &#64;node_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *                 : the &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;node_to_check doesn't exist.
     *   - grpc.Internal: error occurs when getting the open times pattern bitmaps.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes getOpenTimesBitmaps(com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetOpenTimesBitmapsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the datetime ranges over which the given &#64;node_selector open times patterns are open throughout the given &#64;datetime_range for the org sending the request.
     * If the &#64;node_selector is not open during that range, no ranges will be returned.
     * If the &#64;node_selector is opened before or after the given &#64;datetime_range, those times outside of &#64;datetime_range will not be included in the returned &#64;open_close_ranges.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector or &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;node_selector doesn't exist in &#64;schedule_scenario_sid for the org sending the request.
     *   - grpc.Internal: error occurs when getting the open time close times.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse listOpenDateRangesForNodeOpenTimesBitmaps(com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListOpenDateRangesForNodeOpenTimesBitmapsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates an agent availability pattern for the org sending the request with the provided parameters.
     * The &#64;agent_availability_pattern_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;agent_availability_pattern are invalid.
     *   - grpc.NotFound: the parent entity doesn't exist.
     *   - grpc.Internal: error occurs when creating the agent availability pattern.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes createAgentAvailabilityPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateAgentAvailabilityPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates an agent availability pattern for the given &#64;agent_availability_pattern_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this agent availability pattern since it cannot be changed.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;agent_availability_pattern have invalid values.
     *   - grpc.Internal: error occurs when updating the agent avilability pattern.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the agent availability pattern.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes updateAgentAvailabilityPattern(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateAgentAvailabilityPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes an agent availability pattern with the coresponding &#64;agent_availability_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_availability_pattern_sid has an invalid value.
     *   - grpc.NotFound: the &#64;agent_availability_pattern with the given sid doesn't exist.
     *   - grpc.Internal: error occurs when removing the agent availability pattern.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes deleteAgentAvailabilityPattern(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteAgentAvailabilityPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the inherited, own, and resulting bitmaps for the agent availability patterns of &#64;entities_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;entities_to_check.
     * &#64;entities_to_check must have the entity_type field set with a wfm agent, agent group or a type of node.
     * If an availability bitmap is requested for an agent group, the bitmaps for all of it's member agents will be returned instead.
     * The bitmaps will be generated for the span of &#64;datetime_range.
     * If &#64;bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
     * If &#64;bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the availability patterns.
     * If &#64;bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the availability patterns.
     * Errors:
     *   - grpc.Invalid: the &#64;entities_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *                 : the &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;entities_to_check don't exist.
     *   - grpc.Internal: error occurs when getting the agent availability pattern bitmaps.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes getAvailabilityBitmaps(com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetAvailabilityBitmapsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Upserts an association for the given &#64;non_skill_activity_sid to the given &#64;node.
     * All downstream members of the entity will have their inheritance state cleared, and inherit the given association.
     * If an association already exists between the non skill activity and the &#64;node then their &#64;relationship_type will be updated.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * If a NOT_ASSOCIATED_WITH relationship is being created, the tree will be checked for conflicting downstream effects.
     * If any member rules, are referencing the non skill activity and &#64;relationship_type is NOT_ASSOCIATED_WITH, then the upsert will not take effect, and the list of related entities to be updated/removed first will be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;non_skill_activity_sid, &#64;node or &#64;association_type are invalid.
     *                 : the non skill activity and &#64;node belong to different scenarios.
     *   - grpc.NotFound: the &#64;non_skill_activity_sid or &#64;node don't exist.
     *   - grpc.Internal: error occurs when upserting the association.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes upsertNonSkillActivityAssociation(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertNonSkillActivityAssociationMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates skill proficiencies for the org sending the request with the provided parameters.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entities.
     * Errors:
     *   - grpc.Invalid: the parameters in a &#64;proficiency, or the &#64;schedule_scenario_sid are invalid.
     *   - grpc.NotFound: for any of the given &#64;skill_proficiencies:
     *                    the &#64;parent_entity doesn't exist.
     *                    the &#64;skill_sid doesn't exist.
     *                    the skill profile with &#64;preferred_skill_profile_sid doesn't contain the given &#64;skill_sid.
     *   - grpc.AlreadyExists: a skill proficiency with the given &#64;skill_sid and &#64;parent_entity already exists.
     *   - grpc.Internal: error occurs when creating the skill proficiencies.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes createSkillProficiencies(com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateSkillProficienciesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates skill proficiencies corresponding to the given &#64;skill_proficiency_sids and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;skill_sid and &#64;parent_entity field of each proficiency will be ignored since it cannot be updated.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;skill_proficiencies have invalid values.
     *   - grpc.Internal: error occurs when updating the skill proficiencies.
     *   - grpc.NotFound: for any of the given &#64;skill_proficiencies:
     *                    the &#64;skill_sid doesn't exist.
     *                    the skill profile with &#64;preferred_skill_profile_sid doesn't contain the skill of the given skill proficiency.
     *   - grpc.AlreadyExists: a skill proficiency with the given &#64;skill_sid and &#64;parent_entity already exists.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes updateSkillProficiencies(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateSkillProficienciesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes a skill proficiency with the corresponding &#64;skill_proficiency_sid for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;skill_proficiency_sid is invalid for the org making the request.
     *   -grpc.NotFound: the skill proficiency with the given &#64;skill_proficiency_sid doesn't exist.
     *   -grpc.Internal: error occurs when removing the skill proficiency.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes deleteSkillProficiency(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteSkillProficiencyMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Copies the existing scenario with the &#64;scenario_sid_to_copy for the org sending the request using the provided parameters.
     * Scheduling targets of entities in the scenario to copy will also be copied.
     * The new &#64;schedule_scenario_sid of the new entity will be returned in the response.
     * Errors:gg
     *   - grpc.Invalid: the parameters &#64;scenario_sid_to_copy or any others are invalid.
     *   - grpc.NotFound: the scenario corresponding to the &#64;scenario_sid_to_copy doesn't exist.
     *   - grpc.Internal: error occurs when creating/coping the new scenario.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes copyScenario(com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCopyScenarioMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a new schedule scenario for the org sending the request with the provided parameters.
     * The new &#64;schedule_scenario_sid of the new entity will be returned in the response.
     * It also creates 1 of each of the following: call center, client, program, location node, and on call scheduling activity (if it doesn't exist already for the org).
     * The &#64;node_description fields may optionally be left blank.
     * The &#64;copied_from_scenario_sid field will be ignored, as it will be set to nil in the newly created scenario.
     * The &#64;creation_datetime and &#64;is_default fields will also be ignored and set as the current time and false respectively.
     * The &#64;skill_profile_category will be associated with the created program node.
     * Errors:
     *   - grpc.Invalid: parameters in the &#64;req are invalid for the org making the request.
     *   - grpc.NotFound: the &#64;skill_profile_category does not exist.
     *   - grpc.Internal: error occurs when creating the new scenario, or any of the node entities.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes createScheduleScenarioWithNodes(com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateScheduleScenarioWithNodesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a schedule scenario corresponding to the given &#64;schedule_scenario_sid and org sending the request with the provided parameters.
     * Only the &#64;name, &#64;description and &#64;datetime_set_to_inactive fields may be updated, and must be filled in with current value if updating the field is not desired.
     * The &#64;schedule_scenario_sid must be the original for the schedule scenario since it cannot be updated.
     * All other fields will be ignored since they cannot be updated.
     * Errors:
     *   -grpc.Invalid: one or more fields in the &#64;scenario have invalid values.
     *   -grpc.NotFound: the scenario with the given &#64;schedule_scenario_sid doesn't exist.
     *   -grpc.Internal: error occurs when updating the scenario.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes updateScheduleScenario(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateScheduleScenarioMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets config entities that match the org sending the request and given &#64;entity_type and that belong to the &#64;belongs_to_entity and &#64;schedule_scenario_sid parameters.
     * If &#64;include_member_lists is set to true the member lists of the entities retrieved will be included.
     * Any nodes in the returned set of entities will have inherited nonskill associations applied to the node's member_nonskill_activity fields.
     * Errors:
     *   - grpc.Invalid: the &#64;entity_type, or &#64;belongs_to_entity have invalid values.
     *   - grpc.Internal: error occurs when getting the config entities.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes listConfigEntities(com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListConfigEntitiesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes shift instances with the corresponding &#64;shift_instance_sids for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;shift_instance_sids are invalid for the org making the request.
     *   -grpc.NotFound: the shift instances with the given &#64;shift_instance_sids don't exist.
     *   -grpc.Internal: error occurs when removing the shift instances.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes deleteShiftInstances(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteShiftInstancesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics and &#64;nodes_checked for the &#64;node_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;node_to_check.
     * Errors:
     *   - grpc.Invalid: the &#64;node_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *   - grpc.NotFound: the given &#64;node_to_check doesn't exist.
     *   - grpc.Internal: error occurs when building the diagnostics.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes buildNodeDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getBuildNodeDiagnosticsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds and returns the global diagnostics and &#64;nodes_checked for the &#64;schedule_scenario_sid and the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;schedule_scenario_sid has an invalid values.
     *   - grpc.NotFound: the given &#64;schedule_scenario_sid doesn't exist for the org making the request.
     *   - grpc.Internal: error occurs when building the diagnostics.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes buildGlobalDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getBuildGlobalDiagnosticsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the published schedule for the corresponding &#64;datetime_range for the org sending the request.
     * Will create a published schedule if it does not exist already for the org sending the request.
     * Returns the published schedule without any shift instances.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range, &#64;metric_types are invalid.
     *   - grpc.NotFound: the &#64;node_selector doesn't exist.
     *   - grpc.Internal: error occurs when getting the published schedule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes getPublishedSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetPublishedScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the required calls intervals for the published schedule for the corresponding &#64;viewing_range, for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the published schedule doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes getPublishedScheduleRequiredCalls(com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetPublishedScheduleRequiredCallsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the required calls intervals for the specified draft schedule for the corresponding &#64;viewing_range, for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the draft schedule doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes getDraftScheduleRequiredCalls(com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetDraftScheduleRequiredCallsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a draft schedule for the org sending the request with the provided parameters.
     * The &#64;draft_schedule_sid of the new entity will be returned in the response.
     * The &#64;created_at and &#64;last_updated_at fields will be set to the current time and null respectively.
     * The draft schedule will include the published schedule's shift instances and shift segments.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;description or &#64;scheduling_range are invalid.
     *   - grpc.Internal: error occurs when creating the draft schedule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes createDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateDraftScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the &#64;name, &#64;description, and &#64;datetime_range of the given &#64;draft_schedule_sid for the org sending the request.
     * The &#64;name, &#64;description, and &#64;datetime_range fields must all be set with their desired values.
     * If &#64;delete_shifts_not_in_range if true, then any instances outside of the &#64;datetime_range will be permenantly deleted with no recovery option.
     * If &#64;delete_shifts_not_in_range is false, instances outside of the new &#64;datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
     * If &#64;copy_shifts_into_new_range time is true, then new the portion of an expanded &#64;datetime_range which has no instances will copy the instances from the published schedule. If false, no instances will be created for an expanded &#64;scheduling_range.
     * Returns the updated schedule without any shift instances.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;description or &#64;datetime_range are invalid.
     *   - grpc.Internal: error occurs when updating the schedule or its instances.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes updateDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateDraftScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Builds a draft schedule for the given &#64;node_selector in &#64;schedule_scenario_sid over &#64;schedule_scenario_scheduling_range for &#64;draft_schedule_sid and the org making the request.
     * The &#64;schedule_scenario_scheduling_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
     * Returns the draft schedule without any shift instances.
     * Will return diagnostics for the newly built schedule, or just diagnostics if the schedule cannot be built successfully due to diagnostic error.
     * If &#64;auto_generate_agents is set to true, unassigned agents will automatically be generated to meet the requirements of the shift templates min and max agents.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes buildDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getBuildDraftScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Polls the scheduler to check if there is currently a build in progress for the given &#64;draft_schedule_sid.
     * If there is a build in progress &#64;build_in_progress will be true.
     * As long as there has been a build started for the given &#64;draft_schedule_sid, &#64;build_start_datetime will be set with the time that the build process started.
     * If a build has been completed for the draft, &#64;build_end_datetime will be set with the time that the build ended, otherwise it will be None.
     * The &#64;build_status gives the status of the most recent build for the draft.
     * The &#64;diagnostics will be set with any diagnostics encountered during the most recent build.
     * Any errors encountered during the build process will be returned as INTERNAL_ERROR diagnostics.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid.
     *   - grpc.NotFound: the &#64;draft_schedule_sid does not exist for the org sending the request.
     *   - grpc.Internal: error chceking for the build in progress.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse pollBuildInProgress(com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getPollBuildInProgressMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Cancels the build in progress for the given &#64;draft_schedule_sid.
     * If there was a build to cancel, &#64;canceled_build will be returned as true, otherwise it will be false.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid.
     *   - grpc.Internal: error when cancelling the build or updating the build in progress table.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse cancelBuildInProgress(com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCancelBuildInProgressMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Publishes the shift instances of the given &#64;draft_schedule_sid to the published schedule of the org sending the request.
     * Overlapping shift instances that aren't locked will be replaced with the instances from the draft schedule.
     * If &#64;ignore_diagnostics_errors is set to true, it will publish the schedule regardless of any diagnostics errors,
     * otherwise it will return those diagnostic errors and not publish the schedule.
     * does not return any shift instances on the published schedule.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;req are invalid..
     *   - grpc.NotFound: &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when publishing the draft schedule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes publishDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getPublishDraftScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Resets the shifts on the &#64;draft_schedule_sid for the org sending the request.
     * Shifts overlapping the &#64;datetime_range will be deleted, then that &#64;datetime_range will be populated with shifts from the published schedule.
     * If no &#64;datetime_range is provided, all shifts will be removed from the &#64;draft_schedule_sid, and published shifts will be copied across the draft's datetime range.
     * If &#64;unlocked_only is set to true, only unlocked shifts will be deleted, and the locked shift instances will remain.
     *   The published schedule will still be copied, so any newly overlapping shifts will result in an overlap warning.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range or &#64;draft_schedule_sid are invalid for the org sending the request.
     *   - grpc.NotFound: the &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when resetting the schedule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes resetDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getResetDraftScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the draft schedule with &#64;draft_schedule_sid for the corresponding &#64;datetime_range for the org sending the request.
     * The &#64;datetime_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
     * Does not return any shift instances on the draft schedule.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range or &#64;draft_schedule_sid are invalid.
     *   - grpc.NotFound: the &#64;node_selector or &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when getting the draft schedule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes getDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetDraftScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the draft schedules whose scheduling_range overlaps the given &#64;datetime_range for the org sending the request.
     * If &#64;datetime_range is not set, all draft schedules for the org will be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range is invalid.
     *   - grpc.Internal: error occurs when listing the draft schedules.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes listDraftSchedules(com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListDraftSchedulesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Clears shift instances from the &#64;schedule_selector for the org sending the request.
     * If &#64;node_selector is set, only shifts related to the given &#64;node_selector will be cleared.
     * If &#64;node_selector is not set, all shifts on the &#64;schedule_selector may be cleared, regardless of the shift template they are associated with.
     * If &#64;datetime_range is set, only the shifts overlapping the &#64;datetime_range will be cleared.
     * If &#64;datetime_range is not set, all shifts on the schedule will be considered in range to be deleted and &#64;invert_datetime_range and &#64;start_datetimes_only must be set to false.
     * If &#64;invert_datetime_range is set to true, the shifts overlapping the range before and after the provided &#64;datetime_range will be deleted.
     * If &#64;invert_datetime_range is set to false, the provided &#64;datetime_range will be used.
     * If &#64;start_datetimes_only is set to true, deletes the shifts that start within the &#64;datetime range, or start before or after &#64;datetime_range if &#64;invert_datetime_range is true.
     * If &#64;start_datetimes_only is set to false, deletes the shifts that overlap with the &#64;datetime range, or overlap the range before or after &#64;datetime_range if &#64;invert_datetime_range is true.
     * If &#64;delete_locked is set to true, both locked and unlocked shifts will be cleared.
     * If &#64;delete_locked is set to false, only shifts with &#64;is_locked set to false may be cleared.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector, &#64;schedule_selector, or &#64;datetime_range in the request are invalid.
     *   - grpc.NotFound: the draft schedule with the given &#64;schedule_selector doesn't exist.
     *   - grpc.Internal: error occurs when removing the shifts from the schedule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes clearSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getClearScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes a draft schedule with the corresponding &#64;draft_schedule_sid for the org sending the request.
     * It also deletes all of its shift instances and segments.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the draft schedule with the given &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when removing the draft schedule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes deleteDraftSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteDraftScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the shift instances with the corresponding &#64;shift_instance_sids for the org sending the request.
     * If &#64;include_shift_template is set to true then the related shift template for the shift instances will be returned in the shift template field.
     * If &#64;include_shift_segments is set to true then the related shift segments for the shift instances will be returned in the shift segments field.
     * If &#64;include_shift_segment_call_stats is set to true then the related shift segment call stats for the shift segments will be returned in the call stats by skill collection field on the shift segments.
     * If &#64;include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
     * &#64;include_shift_segments must be true to take effect.
     * If &#64;include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling
     * activities member non skill activity field. &#64;include_scheduling_activity must be true to take effect.
     * Errors:
     *   - grpc.Invalid: &#64;shift_instance_sids in the request are invalid.
     *   - grpc.Internal: error occurs when listing the shift instances or their shift segments.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes listShiftInstancesBySid(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListShiftInstancesBySidMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Copies the shifts from &#64;source_schedule_selector to &#64;destination_schedule_selector, constrained by the given parameters for the org sending the request.
     * If &#64;datetime_range is set, all shifts within the datetime range will be copied.
     * If &#64;datetime_range is not set, all shifts in the &#64;source_schedule_selector within the schedule range of the &#64;destination_schedule_selector will be copied. However if one of them is a published schedule, it will use the schedule range of the draft schedule.
     * If &#64;start_datetimes_only is set to false, then shifts are considered to be within the &#64;datetime range if any portion of them is within the range.
     * If &#64;start_datetimes_only is set to true, then only shifts with start times within the &#64;datetime range will be copied.
     * If &#64;overlap_as_warning is set to false, any overlapping shifts for a given agent will return a diagnostic error, and prevent any shifts from being copied.
     * If &#64;overlap_as_warning is set to true, the shifts will be copied regardless of overlap conflicts, and any conflicts will cause a diagnostic warning to be returned after.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values.
     *   -grpc.NotFound: the &#64;source_schedule_selector or &#64;destination_schedule_selector don't exist for the org sending the request.
     *   -grpc.Internal: error occurs when creating the copied shift instances.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes copyScheduleToSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCopyScheduleToScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a shift instance for the org sending the request with the provided parameters.
     * This method is not implemented. Do not use.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when creating the shift instance.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes createShiftInstance(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateShiftInstanceMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a shift instance for the org sending the request with the provided parameters.
     * If &#64;wfm_agent_sids is empty, then the shift instance will be created for a newly created unassigned agent.
     * A shift instance will be created for each wfm agent sid provided.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when creating the shift instance.
     *   - grpc.NotFound: the &#64;draft_schedule_sid, &#64;shift_template_sid, or &#64;wfm_agent_sids do not exist for the org sending the request.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res createShiftInstanceV2(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateShiftInstanceV2Method(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the &#64;shift_instance with any member shift segments and shift segment call stats for the org sending the request.
     * If &#64;ignore_diagnostics_errors any diagnostics encountered will be returned as warnings, and the shift will still be created.
     *   Otherwise, any diagnostics triggered by the given &#64;shift_instance will be returned and the shift will not be created.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values.
     *   -grpc.NotFound: the fields referenced in &#64;shift_instance or its member shift segments don't exist for the org.
     *   -grpc.Internal: error occurs when creating the shift instance or its members.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse createShiftInstanceWithSegments(com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateShiftInstanceWithSegmentsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Splits the &#64;shift_instance_sid into two, at the given &#64;time_to_split, returning the updated and new &#64;shift_instances.
     * Any shift segments will be split between the two shift instances at &#64;time_to_split.
     * If the &#64;time_to_split creates instances shorter then the minimum length specified by the shift template,
     *   warning diagnostics will be returned and the instance will still be split.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values, or &#64;time_to_split is not at least 5 minutes from the start or end of &#64;shift_instance_sid.
     *   -grpc.NotFound: the &#64;shift_instance_sid does't exist for the org sending the request.
     *   -grpc.Internal: error occurs when creating or updating the shift instances.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes splitShiftInstance(com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getSplitShiftInstanceMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Swaps shift instances with the given &#64;shift_instance_sids that belong to &#64;wfm_agent_sid1 to belong to &#64;wfm_agent_sid2 (and viceversa).
     * Returns the swapped &#64;shift_instances after they are succesfully updated.
     * If there are other shifts for the given &#64;wfm_agent_sids with an overlap conflict, diagnostics will be returned instead.
     * All &#64;shift_instance_sids must belong to the same schedule, and be from a draft schedule.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.NotFound: wfm_agent_sid_1, wfm_agent_sid_2, or shift_instance_sids do not exist for the org sending the request.
     *   - grpc.Internal: error occurs when swapping the shift instances.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes swapShiftInstances(com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getSwapShiftInstancesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a shift instance for the org sending the request with the provided parameters.
     * This method is not implemented. Do not use.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when updating the shift instance.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes updateShiftInstance(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateShiftInstanceMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates a shift instance for the org sending the request with the provided parameters.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when updating the shift instance.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res updateShiftInstanceV2(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateShiftInstanceV2Method(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Runs diagnostics on the given &#64;shift_instance for the org sending the request.
     * If &#64;ignore_diagnostics_errors is True, the shift will be updated regardless of diagnostic errors and any diagnostics will be returned as warnings.
     * Otherwise, the shift will only be updated if there are no diagnostic errors.
     * Only the &#64;start_datetime, &#64;is_locked, &#64;width_in_minutes and &#64;wfm_agent_sid fields of the shift will be updated.
     * Any existing shift segments belonging to &#64;shift_instance will be deleted and replaced with the ones in the given &#64;shift_instance.
     * If no segments are provided, the existing segments will still be deleted and the instances will be left without any.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when updating the &#64;shift_instance or replacing their member shift segments.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse updateShiftInstanceWithSegments(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateShiftInstanceWithSegmentsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Copies the given &#64;shift_instance_sids to &#64;destination_schedule for the org sending the request.
     * If there are any overlap conflicts on &#64;destination_schedule and &#64;overlap_as_warning is set to false,
     *  then &#64;shift_instance_sids will not be copied, and a list of diagnostics detailing the overlaps will be returned.
     * If &#64;overlap_as_warning is set to true, overlap conflicts will not prevent the shifts from being copied, and the overlap diagnostics will be returned after as warning messages instead.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.NotFound: the &#64;shift_instance_sids or &#64;destination_schedule does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when copying the shift instances.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes copyShiftInstancesToSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCopyShiftInstancesToScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the shift_instance_sids for the Shift Instances associated with &#64;wfm_agent_sid over the given &#64;datetime_range and &#64;schedule_selector.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes listShiftInstanceSidsForAgent(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListShiftInstanceSidsForAgentMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the shift_instance_sids for the Shift Instances associated with the given &#64;datetime_range and &#64;schedule_selector.
     * If &#64;node_selector is set, only shifts sids related to the given &#64;node_selector will be listed.
     * If &#64;node_selector is not set, all shifts on the &#64;schedule_selector may be cleared, regardless of the node they are associated with.
     * If &#64;node_selector is set, the &#64;schedule_scenario_sid must be set to match &#64;node_selector.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse listShiftInstanceSidsForSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListShiftInstanceSidsForScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists shift segments for the specified shift instances for the org sending the request.
     * If &#64;include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
     * If &#64;include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling activities member non skill activity field.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: a shift instance doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes listShiftSegmentsByShiftInstanceSids(com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListShiftSegmentsByShiftInstanceSidsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given &#64;scheduling_target for the org making the request.
     * The &#64;scheduling_target_sid of the new entity will be returned in the response.
     * Any preexisting scheduling target for &#64;node_entity will be removed upon creation of the new &#64;scheduling_target.
     * Errors:
     *   - grpc.Invalid: the &#64;scheduling_target is invalid.
     *   - grpc.NotFound: &#64;node_entity doesn't exist for &#64;schedule_scenario_sid and the org making the request.
     *   - grpc.Internal: error occours when setting the scheduling target.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes setSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getSetSchedulingTargetMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the &#64;own_scheduling_target, &#64;inherited_scheduling_target, and &#64;resulting_scheduling_target for the given &#64;node_selector and the org making the request.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector is invalid.
     *   - grpc.NotFound: the given &#64;node_selector doesn't exist for the org making the request.
     *   - grpc.Internal: error occours when getting the scheduling target.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes getSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetSchedulingTargetMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the scheduling target of the corresponding &#64;node_selector for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;node_selector is invalid.
     *   -grpc.NotFound: the scheduling target for the given &#64;node_selector doesn't exist for the org making the request.
     *   -grpc.Internal: error occurs when removing the scheduling target.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes deleteSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteSchedulingTargetMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the scheduling-target values for the org making the request.
     * Errors:
     *   - grpc.Internal: error occours when getting the scheduling-target values.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes getDefaultSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetDefaultSchedulingTargetMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Sets the scheduling-target values for the org making the request.
     * Errors:
     *   - grpc.Invalid: any of the given values are invalid.
     *   - grpc.Internal: error occours when setting the scheduling-target values.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes setDefaultSchedulingTarget(com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getSetDefaultSchedulingTargetMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the performance metrics across &#64;datetime_range for shift instances in &#64;schedule_selector associated with &#64;node_selector for the org making the request.
     * Performance metrics will be generated for each of the given &#64;metric_params.
     * The &#64;interval_width_in_minutes must be a multiple of 5.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;node_selector, &#64;schedule_selector, or their shift instances doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes getPerformanceMetrics(com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetPerformanceMetricsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the required calls intervals for the given &#64;node_selector over the given &#64;datetime_range for the org making the request.
     * The &#64;interval_width_in_minutes must be a multiple of 5.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes listRequiredCallsIntervals(com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListRequiredCallsIntervalsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a Tour Pattern for &#64;shift_template_sid and the org sending the request, returning &#64;tour_pattern_sid.
     * If there is already a Tour Pattern for &#64;shift_template_sid then the method call will fail to create a new Tour Pattern.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: A Tour Pattern already exists for &#64;shift_template_sid.
     *   - grpc.Internal: error occurs when creating the Tour Pattern.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes createTourPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateTourPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Returns a list of diagnostics describing any issues with the given &#64;tour_pattern.
     * Checks the internal consistency between the pattern and all members, as well as making sure required fields are set with valid values.
     * Ignores sid fields, except for &#64;shift_template_sid and &#64;scheduling_activity_sid.
     * Does not query the database to check that foreign keys exist.
     * Returns a single diagnostic with an OK code if the given &#64;tour_pattern has no issues.
     * The &#64;member_tour_week_patterns and &#64;member_tour_agent_collections fields must be set on &#64;tour_pattern.
     * Errors:
     *   - grpc.Internal: error occurs when validating the tour pattern or members.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes getTourPatternDiagnostics(com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetTourPatternDiagnosticsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Replaces the existing Tour Pattern and members with &#64;tour_pattern for the &#64;tour_pattern.shift_template_sid and the org sending the request.
     * Returns the newly created Tour Pattern and members with their updated SIDs and Week Pattern Numbers.
     * Any existing Tour Week Patterns, Tour Shift Instance and Segment Configs, Tour Agent Collections and their WFM Agent SIDs
     *   belonging to &#64;tour_pattern.shift_template_sid will be replaced with the members on the provided &#64;tour_pattern.
     * At least one Tour Agent Collection and one Tour Week Pattern must be provided in the member fields.
     * If the tour pattern data or members have issues that prevent them from being persisted, a list of diagnostics will be returned describing the issues that must be resolved.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;tour_pattern.shift_template_sid does not exist.
     *   - grpc.Internal: error occurs when upserting the tour pattern or members.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes upsertTourPatternWithMembers(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertTourPatternWithMembersMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the Tour Pattern belonging to &#64;shift_template_sid and the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the requested Tour Pattern does not exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes getTourPattern(com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetTourPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the Tour Pattern belonging to &#64;shift_template_sid and the org sending the request.
     * The &#64;tour_pattern will be returned with all member entities.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the requested Tour Pattern does not exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes getTourPatternWithMembers(com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGetTourPatternWithMembersMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the Tour Pattern belonging to &#64;tour_pattern_sid and the org sending the request.
     * Any member Tour Week Patterns or Agent Collections will be deleted as well.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the data or it's children.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes deleteTourPattern(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteTourPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates a Tour Week Pattern for &#64;tour_pattern_sid for the org sending the request, returning &#64;tour_week_pattern_sid.
     * The newly created Tour Week Pattern will be placed at the end of the existing sequence of tour week patterns for &#64;tour_pattern_sid.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the Tour Week Pattern.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes createTourWeekPattern(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateTourWeekPatternMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the Tour Week Patterns with &#64;tour_pattern_sid for the org sending the request
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Week Patterns.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes listTourWeekPatterns(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListTourWeekPatternsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the Tour Week Patterns with the given &#64;tour_week_pattern_sids for the org sending the request.
     * Any Tour Week Instance or Segment Configs using &#64;tour_week_pattern_sids will be deleted.
     * Request will error if any &#64;tour_week_pattern_sids are in use by a Tour Agent Collection, as those must be removed first.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.FailedPrecondition: a &#64;tour_week_pattern_sid is in use by a Tour Agent Collection.
     *   - grpc.Internal: error occurs when deleting the tour week patterns or configs.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes deleteTourWeekPatterns(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteTourWeekPatternsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the &#64;tour_shift_instance_config for the org sending the request, returning &#64;tour_shift_instance_config_sid.
     * The given &#64;tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to &#64;tour_week_pattern_sid.
     * The &#64;member_tour_shift_segment_configs field will be ignored, and will not be created if passed through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or a preexisting tour shift instance config would overlap &#64;tour_shift_instance_config.
     *   - grpc.Internal: error occurs when creating the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes createTourShiftInstanceConfig(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateTourShiftInstanceConfigMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the &#64;tour_shift_instance_config for the org sending the request, returning &#64;tour_shift_instance_config_sid.
     * The given &#64;tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to &#64;tour_week_pattern_sid.
     * The &#64;member_tour_shift_segment_configs field will be ignored, and will not be updated if passed through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or a preexisting Tour Shift Instance Config would overlap &#64;tour_shift_instance_config.
     *   - grpc.Internal: error occurs when updating the data.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes updateTourShiftInstanceConfig(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateTourShiftInstanceConfigMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the Tour Shift Instance Configs belonging to &#64;tour_week_pattern_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes listTourShiftInstanceConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListTourShiftInstanceConfigsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the Tour Shift Instance Configs matching &#64;tour_shift_instance_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes deleteTourShiftInstanceConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteTourShiftInstanceConfigsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given &#64;tour_shift_segment_config for the org sending the request, returning &#64;tour_shift_segment_config_sid.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;tour_shift_instance_config_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the entity.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes createTourShiftSegmentConfig(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateTourShiftSegmentConfigMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given &#64;tour_shift_segment_config matching &#64;tour_shift_segment_config_sid for the org sending the request.
     * If the updated Tour Shift Segment Config overlaps another segment or does not fit within the parent Tour Shift Instance Config the update will fail.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or the resulting update would result in a conflict.
     *   - grpc.NotFound: the &#64;tour_shift_instance_config_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when updating the entity.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes updateTourShiftSegmentConfig(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateTourShiftSegmentConfigMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the Tour Shift Segment Configs belonging to &#64;tour_shift_instance_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Segment Configs.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes listTourShiftSegmentConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListTourShiftSegmentConfigsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the Tour Shift Segment Configs associated with the given &#64;tour_shift_segment_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the Tour Shift Segment Configs.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes deleteTourShiftSegmentConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteTourShiftSegmentConfigsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given &#64;tour_agent_collection for the org sending the request and return the &#64;tour_agent_collection_sid.
     * The &#64;wfm_agent_sids will be ignored and will not be created through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: the first_week_pattern_number for &#64;tour_pattern_sid is already in use by another tour agent collection.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the entity.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes createTourAgentCollection(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateTourAgentCollectionMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given &#64;tour_agent_collection matching the &#64;tour_agent_collection_sid for the org sending the request.
     * The &#64;wfm_agent_sids will be ignored and will not be updated through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: the first_week_pattern_number for &#64;tour_pattern_sid is already in use by another tour agent collection.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when updating the entity.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes updateTourAgentCollection(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateTourAgentCollectionMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the Tour Agent Collections belonging to &#64;tour_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes listTourAgentCollections(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListTourAgentCollectionsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the Tour Agent collections matching &#64;tour_agent_collection_sids for the org sending the request.
     * Any existing associations with WFM Agent Sids will be deleted as well.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the tour agent collections.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes deleteTourAgentCollections(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteTourAgentCollectionsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates an assocation between the &#64;tour_agent_collection_sid and the &#64;wfm_agent_sids for the org sending the request.
     * If there is already an association between any of the &#64;wfm_agent_sids and the Tour Pattern that &#64;tour_agent_collection_sid belongs to, the method will fail and no associations will be created.
     * Errors:
     *   - grpc.Invalid: the request data is invalid
     *   - grpc.AlreadyExists: an association already exists for at least one SID in &#64;wfm_agent_sids.
     *   - grpc.Internal: error occurs when creating the association.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes createTourAgentCollectionWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateTourAgentCollectionWFMAgentsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists the WFM Agent SIDs belonging to &#64;tour_agent_collection_sids for the org sending the request.
     * The resulting sids will be returned in &#64;wfm_agent_pairings each containing an &#64;agent_collection_sid and &#64;wfm_agent_sids.
     * If no agents are found for a sid in the given &#64;tour_agent_collection_sids, that &#64;agent_collection_sid will have an empty slice in &#64;wfm_agent_sids.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes listTourAgentCollectionWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListTourAgentCollectionWFMAgentsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes association between the &#64;wfm_agent_sids and &#64;tour_agent_collection_sid for the org sending the request.
     * If no &#64;wfm_agent_sids are provided, all existing &#64;wfm_agent_sids for the given &#64;tour_agent_collection_sid will be deleted.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: there are no WFM Agent associations to delete for &#64;tour_agent_collection_sid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes deleteTourAgentCollectionWFMAgents(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteTourAgentCollectionWFMAgentsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Generates a list of tour week patterns for &#64;target_shift_template_sid and the org sending the request.
     * Sets the member_tour_week_patterns with a tour week pattern for each of the &#64;num_weeks_in_tour.
     * Each of the tour week patterns will be set with tour shift instances and segment configs based on
     *   the forecasted call data over the next &#64;num_weeks_in_tour, starting on the next Monday.
     * The returned data will not be persisted. This method will not effect any existing tour week patterns in the database.
     * The &#64;tour_week_patterns returned by this method are intended to replace, not append, all currenly existing tour week patterns for &#64;target_shift_template_sid, once persisted.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: there is no call center node or &#64;shift_template_sid associated with &#64;schedule_scenario_sid.
     *   - grpc.Internal: error occurs when generating the tour week patterns.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes generateTourWeekPatterns(com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getGenerateTourWeekPatternsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Returns a list of &#64;wfm_agent_sids that are suitable for replacing &#64;wfm_agent_sid_to_replace for the given parameters and the org sending the request.
     * Only enforces that skill proficiencies are covered by the individual wfm agents, does not enforce constraint rules.
     * If &#64;skip_skill_proficiency_sort is False, the agents will be returned in order of cumulative skill proficiency towards the required skills.
     * If &#64;include_skill_mismatches is True, the agents will be included even if they do not include all of the required skills for the shifts being replaced.
     * If &#64;skip_force_same_agent_groups is False, the agents will only be returned if they belong to every agent group that &#64;wfm_agent_sid_to_replace is a member of. Otherwise, this check will be skipped.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when determinining which agents are valid.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes listValidAgentsForReplacement(com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListValidAgentsForReplacementMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Replaces &#64;wfm_agent_sid_to_remove with &#64;wfm_agent_sid_to_add for the given parameters and the org sending the request.
     * If &#64;skip_overlapping_shifts, shifts with an overlap conflict will be skipped, otherwise overlap conflicts will cause a diagnostic to be returned.
     * Does not enforce skill proficiencies. To check skill proficiencies for shift replacement use ListValidAgentsForReplacement.
     * DEPRECATED as of Jan/22/2024 - Use ReplaceAgentOnScheduleV1 instead.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when replacing the &#64;wfm_agent_sid_to_remove.
     * </pre>
     */
    @java.lang.Deprecated
    public com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes replaceAgentOnSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getReplaceAgentOnScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Replaces &#64;wfm_agent_sid_to_remove with &#64;wfm_agent_sid_to_add for the given parameters and the org sending the request.
     * If &#64;skip_overlapping_shifts, shifts with an overlap conflict will be skipped, otherwise overlap conflicts will cause a diagnostic to be returned.
     * Does not enforce skill proficiencies. To check skill proficiencies for shift replacement use ListValidAgentsForReplacement.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when replacing the &#64;wfm_agent_sid_to_remove.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes replaceAgentOnScheduleV1(com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getReplaceAgentOnScheduleV1Method(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Removes the &#64;wfm_agent_sid from &#64;schedule_selector over &#64;datetime_range for the org sending the request.
     * Creates a new unassigned agent with the same active agent group associations as &#64;wfm_agent_sid for &#64;schedule_scenario_sid.
     * The unassigned agent will be assigned to shifts belonging to &#64;wfm_agent_sid, returning newly created unassigned agent's SID and the updated shifts.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the unassigned agent or updating the shifts.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse removeAgentFromSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getRemoveAgentFromScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates an agent leave petition to request time off for the &#64;wfm_agent_sid over the &#64;requested_datetime_ranges for the org sending the request.
     * The &#64;petition_comment must be set with a value.
     * The &#64;requested_datetime_ranges may not overlap each other.
     * The number of working hours requested off should be set in &#64;requested_hours_off.
     * The &#64;requested_hours_off does not need to relate directly to the datetime range being requested off,
     *   for example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
     * The usage of &#64;requested_hours_off hours will depend on org policy, but is not yet implemented.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the time off request.
     *   - grpc.NotFound: the &#64;wfm_agent_sid does not exist for the org sending the request.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse createAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateAgentLeavePetitionMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists agent leave petitions for the &#64;wfm_agent_sids over &#64;datetime_range for the org sending the request.
     * If no &#64;wfm_agent_sids are provided, all agent leave petitions overlapping &#64;datetime_range for the org sending the request will be returned.
     * If no &#64;datetime_range is provided, petitions will be returned across all datetimes.
     * If &#64;include_archived is true, archived agent leave petitions will be returned as well, otherwise archived requests will not be included.
     * If no agent leave petitions are found for the given parameters, an empty slice will be returned.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when listing the agent leave petitions.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse listAgentLeavePetitions(com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListAgentLeavePetitionsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Archives an agent leave petition with the given &#64;agent_leave_petition_id for the org sending the request.
     * If the leave petition has the status of PENDING_PETITION, the petition must be resolved first, or the request will error.
     * If the petition has a status of APPROVED_PETITION and a portion of the petitions &#64;requested_datetime_ranges lies in the future,
     *   the petition may not be archived without being cancelled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the agent leave petition is approved for a future datetime, still pending, or is already archived.
     *   - grpc.Internal: error occurs when archiving the agent leave petition.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse archiveAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getArchiveAgentLeavePetitionMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Resolves the given &#64;agent_leave_petition_id, setting the given parameters, for the org sending the request.
     * May only resolve leave petitions that currently have a PENDING_PETITION status.
     * May only set the &#64;petition_status to APPROVED_PETITION or DENIED_PETITION.
     * If a petition is approved, time off shifts will be added to the agent's schedule across the requested_datetime_ranges.
     * If &#64;retain_partial_shifts is true, partial shifts overlapping the requested_datetime_ranges will have the remaining portion of the shift retained,
     *    if the remaining portion of the shift is at least 30 minutes in length.
     * If &#64;retain_partial_shifts is false, the entirety of shifts overlapping the requested_datetime_ranges range will be deleted or transfered depending on &#64;replace_with_unassigned_agent.
     * If &#64;replace_with_unassigned_agent is true, an unassigned agent sid will be assigned to the covered shifts instead of deleting them.
     * When &#64;replace_with_unassigned_agent is true, if &#64;retain_partial_shifts is also true, only the portion of the shift in the requested datetime ranges will be transfered.
     * When &#64;replace_with_unassigned_agent is true, if &#64;retain_partial_shifts is false, the entirety of any overlapping shifts will be transfered.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is not pending approval.
     *   - grpc.Internal: error occurs when resolving the agent leave petition, or modifying the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse resolveAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getResolveAgentLeavePetitionMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Cancels the given &#64;agent_leave_petition_id for the organization sending the request.
     * If &#64;agent_leave_petition_id has a status of APPROVED_PETITION, the agent's schedule will have time off blocks removed,
     *   but any desired shifts must be added by the user after that leave is canceled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is already canceled.
     *   - grpc.Internal: error occurs when canceling the agent leave petition, or removing time off shifts from the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse cancelAgentLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCancelAgentLeavePetitionMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * A hello world endpoint to test the WFM Adherence App.
     * Returns a string with a hello world message.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse helloWorldWFMAdherence(com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getHelloWorldWFMAdherenceMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * List the real time agent states for published schedule and the org sending the request, starting on the given &#64;start_datetime.
     * If the &#64;end_datetime is set, all agent state sequences will be returned for the range between &#64;start_datetime and &#64;end_datetime.
     * If &#64;end_datetime is not set, the agent state sequences will be returned over a 24 hour period or until the current time, whichever is shorter.
     * Errors:
     *   - grpc.Invalid: the &#64;start_datetime is invalid or beyond the current datetime.
     *   - grpc.Internal: error occurs when listing the agent states.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse listAgentStatesForDay(com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListAgentStatesForDayMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * List org-level RealTimeManagementStates.
     * Errors:
     *   - grpc.Invalid: on invalid input.
     *   - grpc.Internal: on unexpected error.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse listRealTimeManagementStates(com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListRealTimeManagementStatesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the agent states for the given &#64;wfm_agent_sids from the given &#64;start_datetime to the &#64;end_datetime
     * or the current time if not set (start time not inclusive, end time inclusive).
     * Agent states will be grouped by wfm_agent_sid and ordered by date in ascending order.
     * If zero states are found for a given agent, it will not be included in the resulting map.
     * Errors:
     *   - grpc.Invalid: arguments in the request are invalid.
     *   - grpc.Internal: error occurs when getting the states.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse listAdherenceAgentStates(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListAdherenceAgentStatesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Sets the given &#64;state to be associated with the given &#64;rgba_color_id for the org sending the request.
     * Errors:
     *   - grpc.Internal: error upserting the real time management state color or returning the newly created state color.
     *   - grpc.NotFound: the given &#64;rgba_color_id does not exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse upsertRealTimeManagementStateColor(com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpsertRealTimeManagementStateColorMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * List org assigned colors for real-time management states.
     * Any states that do not have an assigned state color will have their system default state color returned instead.
     * Errors:
     *  - grpc.Internal: error occurs when listing the real-time management state colors.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse listRealTimeManagementStateColors(com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListRealTimeManagementStateColorsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the state color for the given &#64;state for the org sending the request.
     * The state will be associated with the system default color.
     * Errors:
     *  - grpc.Invalid: the &#64;state is invalid or is not associated with an &#64;rbg_color_id.
     *  - grpc.Internal: error occurs when deleting the state color fails.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse deleteRealTimeManagementStateColor(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteRealTimeManagementStateColorMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given &#64;color for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;color are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;color or an rgba with &#64;color.name already exists.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse createRgbaColor(com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateRgbaColorMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists all rbga colors for the org sending the request.
     * Errors:
     *   - grpc.Internal: error occurs when listing the &#64;colors.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse listRgbaColors(com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListRgbaColorsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given &#64;color for the org sending the request.
     * Returns the updated rgba color after it has been updated.
     * Errors:
     *   - grpc.Internal: error occurs when updating the rgba color, or getting the updated color.
     *   - grpc.NotFound: the color with &#64;color.rgba_color_id does not exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse updateRgbaColor(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateRgbaColorMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Delete the rgba color with the &#64;rgba_color_id for the org sending the request.
     * Deletes any real time management state colors that are using &#64;rgba_color_id, leaving them with their default colors.option
     * Errors:
     *  - grpc.Invalid: the &#64;rgba_color_id is invalid or does not exist.
     *  - grpc.Internal: error occurs when deleting the rgba color or real time management state colors.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse deleteRgbaColor(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteRgbaColorMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given adherence &#64;notification_config for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;notification_config.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse createAdherenceRuleNotificationConfig(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateAdherenceRuleNotificationConfigMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given adherence &#64;notification_config for the org sending the request.
     * Fields that can be updated are: name.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config are invalid.
     *   - grpc.NotFound: the given notification config is not found.
     *   - grpc.Internal: error occurs when updating the given &#64;notification_config.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse updateAdherenceRuleNotificationConfig(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateAdherenceRuleNotificationConfigMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given adherence &#64;notification_config_entry for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config_entry are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;notification_config_entry.
     *   - grpc.NotFound: notification config with the &#64;notification_config_sid does not exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse createAdherenceRuleNotificationConfigEntry(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateAdherenceRuleNotificationConfigEntryMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given adherence &#64;notification_config_entry for the org sending the request.
     * Fields that can be updated are: recipient_user_id, notification_medium, seconds_to_wait_for_no_response.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config_entry are invalid.
     *   - grpc.NotFound: the given notification config entry is not found.
     *   - grpc.Internal: error occurs when updating the given &#64;notification_config_entry.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse updateAdherenceRuleNotificationConfigEntry(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateAdherenceRuleNotificationConfigEntryMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the notification config entry that has the given &#64;adherence_rule_notification_config_entry_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the given &#64;adherence_rule_notification_config_entry_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_rule_notification_config_entry_id.
     *   - grpc.NotFound: notification config with the &#64;adherence_rule_notification_config_entry_id does not exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse deleteAdherenceRuleNotificationConfigEntry(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteAdherenceRuleNotificationConfigEntryMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets all adherence rule &#64;notification_configs for the org sending the request.
     * Configs will include their respective entries.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the notification configs.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse listAdherenceRuleNotificationConfigs(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListAdherenceRuleNotificationConfigsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given adherence departmental &#64;rule for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse createAdherenceDepartmentalRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateAdherenceDepartmentalRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given adherence departmental &#64;rule for the org sending the request.
     * Fields that can be updated are: name, selected_entity_id, selected_entity_type, rule_requirement_type,
     * rule_range, custom_range, adherence_rule_notification_config_id.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.NotFound: departmental rule clause with &#64;adherence_departmental_rule_clause_id does not exist.
     *   - grpc.Internal: error occurs when updating the given &#64;rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse updateAdherenceDepartmentalRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateAdherenceDepartmentalRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given adherence departmental rule &#64;clause for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;clause.
     *   - grpc.NotFound: departmental rule with the &#64;departmetal_rule_sid does not exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse createAdherenceDepartmentalRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateAdherenceDepartmentalRuleClauseMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given adherence departmental rule &#64;clause for the org sending the request.
     * Fields that can be updated are: action_type, condition, amount, unit, per_amount, per_unit.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when updating the given &#64;clause.
     *   - grpc.NotFound: departmental rule with the with &#64;adherence_departmental_rule_clause_id does not exist to update.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse updateAdherenceDepartmentalRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateAdherenceDepartmentalRuleClauseMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the departmental rule clause that has the given &#64;adherence_departmental_rule_clause_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the value of the given &#64;adherence_departmental_rule_clause_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_departmental_rule_clause_id.
     *   - grpc.NotFound: departmental rule with the &#64;adherence_departmental_rule_clause_id does not exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse deleteAdherenceDepartmentalRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteAdherenceDepartmentalRuleClauseMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets all adherence departmental &#64;rules for the org sending the request.
     * Rules will include their respective clauses.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the rules.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse listAdherenceDepartmentalRules(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListAdherenceDepartmentalRulesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given adherence agent &#64;rule for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse createAdherenceAgentRule(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateAdherenceAgentRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given adherence agent &#64;rule for the org sending the request.
     * Fields that can be updated are: name, selected_entity_id, selected_entity_type, rule_requirement_type, adherence_rule_notification_config_id.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.NotFound: agent rule clause with &#64;adherence_agent_rule_clause_id does not exist.
     *   - grpc.Internal: error occurs when updating the given &#64;rule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse updateAdherenceAgentRule(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateAdherenceAgentRuleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates the given adherence agent rule &#64;clause for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;clause.
     *   - grpc.NotFound: agent rule with the &#64;agent_rule_sid does not exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse createAdherenceAgentRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getCreateAdherenceAgentRuleClauseMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Updates the given adherence agent rule &#64;clause for the org sending the request.
     * Fields that can be updated are: action_type, condition, amount, unit.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when updating the given &#64;clause.
     *   - grpc.NotFound: agent rule with the with &#64;adherence_agent_rule_clause_id does not exist to update.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse updateAdherenceAgentRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getUpdateAdherenceAgentRuleClauseMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets all adherence agent &#64;rules for the org sending the request.
     * Rules will include their respective clauses.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the rules.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse listAdherenceAgentRules(com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getListAdherenceAgentRulesMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Deletes the agent rule clause that has the given &#64;adherence_agent_rule_clause_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the value of the given &#64;adherence_agent_rule_clause_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_agent_rule_clause_id.
     *   - grpc.NotFound: departmental rule with the &#64;adherence_agent_rule_clause_id does not exist.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse deleteAdherenceAgentRuleClause(com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getDeleteAdherenceAgentRuleClauseMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Gets the published schedule for the corresponding &#64;datetime_range for the agent and org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range, &#64;metric_types are invalid.
     *   - grpc.Internal: error occurs when getting the published schedule.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse agentGetSchedule(com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getAgentGetScheduleMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Lists agent leave petitions over the &#64;datetime_range for the agent and org sending the request.
     * If no &#64;datetime_range is provided, petitions will be returned across all datetimes.
     * If &#64;include_archived is true, archived agent leave petitions will be returned as well, otherwise archived requests will not be included.
     * If no agent leave petitions are found for the given parameters, an empty list will be returned.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when listing the agent leave petitions.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse agentListLeavePetitions(com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getAgentListLeavePetitionsMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Creates an agent leave petition to request time off over the &#64;requested_datetime_ranges for the agent and org sending the request.
     * The &#64;petition_comment must be set with a value.
     * The &#64;requested_datetime_ranges may not overlap each other.
     * The number of working hours requested off should be set in &#64;requested_hours_off.
     * The &#64;requested_hours_off does not need to relate directly to the datetime range being requested off,
     *   for example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
     * The usage of &#64;requested_hours_off hours will depend on org policy, but is not yet implemented.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the time off request.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse agentCreateLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getAgentCreateLeavePetitionMethod(), getCallOptions(), request);
    }

    /**
     * <pre>
     * Cancels the given &#64;agent_leave_petition_id for the agent and organization sending the request.
     * If &#64;agent_leave_petition_id has a status of APPROVED_PETITION, the agent's schedule will have time off blocks removed,
     *   but any desired shifts must be added by the user after that leave is canceled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is already canceled.
     *   - grpc.Internal: error occurs when canceling the agent leave petition, or removing time off shifts from the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse agentCancelLeavePetition(com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.blockingUnaryCall(
          getChannel(), getAgentCancelLeavePetitionMethod(), getCallOptions(), request);
    }
  }

  /**
   * A stub to allow clients to do ListenableFuture-style rpc calls to service WFM.
   * <pre>
   * WFM is responsible for call prediction and call volume calculations based on call skills and other parameters.
   * </pre>
   */
  public static final class WFMFutureStub
      extends io.grpc.stub.AbstractFutureStub<WFMFutureStub> {
    private WFMFutureStub(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @java.lang.Override
    protected WFMFutureStub build(
        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
      return new WFMFutureStub(channel, callOptions);
    }

    /**
     * <pre>
     * Starts the tasks to perform the initial setup on wfm services for the org sending the request.
     * It will then report the state of their setup task.
     * A new setup task will only be started if the client hasn't done one before, or their setup failed previously.
     * Errors:
     *  - grpc.Internal: error occurs when performing the initial setup.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse> performInitialClientSetup(
        com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getPerformInitialClientSetupMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Create an initial set of demo activities for the org sending the requests.
     * If any non skill activities already exist matching the names of the demo non skill activities, a second copy will not be created.
     * Required permissions:
     *   NONE
     * Errors:
     *   - grpc.Internal: error occurs when creating the activities or checking if they already exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse> createInitialDemoActivities(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateInitialDemoActivitiesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Retrieves all the skill profiles of the org sending the request.
     * Also it can return the skills of each of the returned profiles.
     * Errors:
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes> listSkillProfiles(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListSkillProfilesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the &#64;name, and averages of a skill profile that has the given &#64;skill_profile_sid.
     * It also updates it to no longer be unnamed.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid, &#64;name or averages in the request are invalid.
     *   - grpc.Internal: error occurs when updating the skill profile.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes> updateSkillProfile(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateSkillProfileMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the &#64;proficiencies for the given skill profile's skills that belong the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;proficiencies in the request are invalid.
     *   - grpc.Internal: error occurs when updating the skill profiles proficiencies.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes> updateSkillProfileProficiencies(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateSkillProfileProficienciesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Get a skill profile that has the given &#64;skill_profile_sid.
     * It also gets all the skills and the mappings associated with that profile.
     * If the &#64;inactive_as_of_date of the skill profile is nil then the mapping is of inactive profiles to this one,
     * otherwise the mapping is of this profile to an active one.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.Internal: error occurs when getting the skill profile.
     *   - grpc.NotFound: skill profile doesn't exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes> getSkillProfile(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetSkillProfileMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Resyncs the skill profiles of the org sending the request.
     * It will add skills and skill profiles based on that client's historical call data.
     * Errors:
     *   - grpc.Internal: error occurs when creating the new skills and skill profiles.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes> resyncSkillProfiles(
        com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getResyncSkillProfilesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the last date of a skill profile resync for the org seding the request.
     * If the org has never done a skill profile resync &#64;resync_date will not be set.
     * Errors:
     *   - grpc.Internal: error occurs when getting the resync date.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes> getLastSkillProfileResyncDate(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetLastSkillProfileResyncDateMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Tries to create an entry for the given forecasting parameters for the org sending the request.
     * If the org already has an entry for them, it will update the already existing entry.
     * Errors:
     *   - grpc.Invalid: the &#64;forecasting_parameters in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the parameters.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes> upsertForecastingParameters(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertForecastingParametersMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the forecasting parameters for the org sending the request.
     * If the org hasn't created any parameters, it will return the default parameters.
     * Errors:
     *   - grpc.Internal: error occurs when getting the parameters.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes> getForecastingParameters(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetForecastingParametersMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the state of the cache for the org sending the request, and if the cache's state is not_loaded, or loading_failed,
     * it will start the loading task before returning the current state.
     * DEPRECATED as of Dec/13/2023 - Use PerformInitialClientSetup instead.
     * Errors:
     *  -grpc.Internal: error occurs when getting the cache info.
     * </pre>
     */
    @java.lang.Deprecated
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes> getClientHistoryCacheInfo(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetClientHistoryCacheInfoMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the historical data for the org sending the request and the given &#64;skill_profile_category.
     * It will look through the client's call history and generate the historical data by using their configured forecasting parameters (historical data period and interval width).
     * The duration of each interval will be the interval width of the org's forecasting parameters.
     * It also applies any deltas that the client has stored for the given &#64;skill_profile_category, if the category is a group it will use the deltas of the skill profiles part of that group.
     * If the client has no historical data, only the deltas will be applied to the returned intervals, all other intervals will have nil averages.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_category given is not found for the org.
     *   - grpc.Internal: error occurs when getting the historical data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes> listHistoricalData(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListHistoricalDataMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Tries to create an entry for the given &#64;delta for the org sending the request.
     * If the org already has an entry for it, it will update the already exisiting entry.
     * Errors:
     *   - grpc.Invalid: the &#64;delta in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the historical data interval.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes> upsertHistoricalDataDelta(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertHistoricalDataDeltaMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Tries to create entries for the given &#64;deltas.
     * If the given org already has an entry for any of the deltas, it will replace the already existing entries.
     * This is made into a unary due to the UI's lack of support for client streams.
     * Errors:
     *   - grpc.Invalid: the &#64;deltas in the request are invalid.
     *   - grpc.Internal: error occurs when upserting the historical data deltas.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes> upsertHistoricalDataDeltas(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertHistoricalDataDeltasMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets all the skills that the org sending the request has.
     * Skills returned will be sorted by &#64;skill_sid in ascending order.
     * Errors:
     *   - grpc.Internal: error occurs when getting the skills.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes> listSkills(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListSkillsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Builds and returns a call profile template for the org sending the request and the given &#64;skill_profile_sid.
     * The template will be generated using the training data for said skill profile using the &#64;training_data_range and &#64;averages_calculation_range_in_months
     * from the client's saved forecasting parameters.
     * The &#64;total_calls in the returned template be summed from the (&#64;training_data_start_datetime - &#64;averages_calculation_range_in_months) to &#64;training_data_end_datetime,
     * or from &#64;training_data_start_datetime to &#64;training_data_end_datetime if &#64;averages_calculation_range_in_months is 0.
     * The fixed averages fields in the call profile template, will be set to the averages that the skill profile has.
     * DEPRECATED as of Sep/7/2023 - Use BuildCallProfileTemplate instead.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid given is not found for the org.
     *   - grpc.Internal: error occurs when building the call profile template.
     * </pre>
     */
    @java.lang.Deprecated
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes> buildCallProfileTemplateForSkillProfile(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getBuildCallProfileTemplateForSkillProfileMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Builds and returns a call profile template for the org sending the request and the given &#64;skill_profile_category.
     * The template will be generated using the training data for said skill profile category using the &#64;training_data_range and &#64;averages_calculation_range_in_months
     * from the client's saved forecasting parameters.
     * The &#64;total_calls in the returned template be summed from the (&#64;training_data_start_datetime - &#64;averages_calculation_range_in_months) to &#64;training_data_end_datetime,
     * or from &#64;training_data_start_datetime to &#64;training_data_end_datetime if &#64;averages_calculation_range_in_months is 0.
     * The fixed averages fields in the call profile template, will be set to the averages that the skill profile category has.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_category given is not found for the org.
     *   - grpc.Internal: error occurs when building the call profile template.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes> buildCallProfileTemplate(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getBuildCallProfileTemplateMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a mapping entry for the &#64;inactive_skill_profile_sid to the &#64;active_skill_profile_sid for the org sending the request.
     * DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
     * Errors:
     *   - grpc.Invalid: the &#64;inactive_skill_profile_sid, or &#64;active_skill_profile_sid in the request are invalid.
     *                   the &#64;inactive_skill_profile_sid given is of an active skill profile.
     *                   the &#64;active_skill_profile_sid given is of an inactive skill profile.
     *   - grpc.Internal: error occurs when creating the inactive skill profile mapping.
     * </pre>
     */
    @java.lang.Deprecated
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes> createInactiveSkillProfileMapping(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateInactiveSkillProfileMappingMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets a list of enums that represent all of the forecaster types that are currently available for use
     * Errors:
     *  -grpc.Internal: error occurs when contacting the forecaster to get the available forecaster types.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes> getAvailableRegressionForecasterModelTypes(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetAvailableRegressionForecasterModelTypesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Changes the current mapping for the given &#64;inactive_skill_profile_sid to be disconnected.
     * DEPRECATED as of Sep/27/2023 - Use skill profile groups instead.
     * Errors:
     *   - grpc.Invalid: the &#64;inactive_skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the skill profile is not found for the org.
     *   - grpc.Internal: the current mapping for the given &#64;inactive_skill_profile_sid is already disconnected,
     *				            the given &#64;inactive_skill_profile_sid is of an active skill profile.
     * </pre>
     */
    @java.lang.Deprecated
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes> disconnectInactiveSkillProfileMapping(
        com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDisconnectInactiveSkillProfileMappingMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given &#64;skill_profile_group.
     * &#64;skill_profile_group_sids will be ignored since associations cannot be created by this method.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group in the request is invalid.
     *   - grpc.Internal: error occurs creating the skill profile group.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes> createSkillProfileGroup(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateSkillProfileGroupMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given &#64;skill_profile_group that has the &#64;skill_profile_group_sid for the org sending the request.
     * &#64;skill_profile_group_sids will be ignored since associations cannot be updated by this method.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group in the request is invalid.
     *   - grpc.NotFound: the skill profile group to update doesn't exist.
     *   - grpc.Internal: error occurs updating the skill profile group.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes> updateSkillProfileGroup(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateSkillProfileGroupMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the skill profile groups that have the &#64;skill_profile_group_sids for the org sending the request.
     * if &#64;include_inactive is true then inactive groups will also be included, otherwise only active groups will be returned.
     * If &#64;skill_profile_group_sids is empty it will get all the skill profile groups for the org.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_group_sids in the request is invalid.
     *   - grpc.Internal: error occurs getting the skill profile groups.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes> listSkillProfileGroups(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListSkillProfileGroupsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates associations of the given &#64;skill_profile_group_sid for the org sending the request.
     * It will create the associations with the &#64;skill_profile_sids_to_associate, and remove the associations with the &#64;skill_profile_sids_to_disassociate.
     * Only one of the skill_profile_sids fields needs to be set, but both can be set on the same request.
     * Errors:
     *   - grpc.Invalid: the values in the request are invalid.
     *   - grpc.Internal: error occurs updating the skill profile group associations.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes> updateSkillProfileGroupAssociations(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateSkillProfileGroupAssociationsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes deltas whose dates match the given &#64;start_datetimes for the given &#64;skill_profile_sid.
     * If no &#64;start_datetimes are given, it will delete all the deltas that the given &#64;skill_profile_sid has.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid, or &#64;start_datetimes in the request are invalid.
     *   - grpc.NotFound: no matching deltas are found for deletion.
     *   - grpc.Internal: error occurs during the deletion of the historical data interval.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes> deleteHistoricalDataDeltas(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteHistoricalDataDeltasMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the top N skill profiles with the highest calls_count for org sending the request where N is &#64;max_number_of_profiles.
     * It will also return the number of skills found for that profile.
     * Individual skills that each profile has will not be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;max_number_of_profiles in the request is invalid.
     *   - grpc.Internal: error occurs when getting the skill profiles.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes> listTopSkillProfiles(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListTopSkillProfilesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the total number of skill profiles associated with the org sending the request.
     * Errors:
     *   - grpc.Internal: error occurs when getting the skill profiles count.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes> getSkillProfilesCount(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetSkillProfilesCountMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Builds a profile forecast for the given &#64;skill_profile_sid and org sending the request using the given &#64;call_profile_template.
     * The forecaster will produce intervals from the following range using the client's saved forecasting parameters:
     * &#64;forecast_range_start_datetime to &#64;forecast_range_end_datetime.
     * The &#64;total_calls in the &#64;call_profile_template will be scaled using the same ranges as BuildCallProfileTemplateForSkillProfile.
     * The intervals produced will be saved in the database.
     * The &#64;fixed_averages_forecast field indicates whether or not to do a fixed averages forecast.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid or &#64;call_profile_template in the request are invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid doesn't exist.
     *   - grpc.Internal: error occurs when upserting the profile forecast.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes> upsertProfileForecast(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertProfileForecastMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given &#64;call_profile_template for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;call_profile_template in the request is invalid.
     *   - grpc.Internal: error occurs during the creation of the call profile.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes> createCallProfileTemplate(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateCallProfileTemplateMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes a call profile template for the requesting org that has the given &#64;call_profile_template_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;call_profile_template_sid in the request is invalid.
     *   - grpc.Internal: error occurs during the deletion of the call profile.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes> deleteCallProfileTemplate(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteCallProfileTemplateMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates an entry for the &#64;regression_template for the requesting org.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs when creating the regression template.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes> createRegressionTemplate(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateRegressionTemplateMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes a regression template for the requesting org that has the given &#64;regression_template_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template_sid in the request is invalid.
     *   - grpc.Internal: error occurs during the deletion of the regression template.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes> deleteRegressionTemplate(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteRegressionTemplateMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets all the regression templates that the org sending the request has.
     * Errors:
     *   - grpc.Internal: error occurs when getting the regression templates.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes> listRegressionTemplates(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListRegressionTemplatesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the forecast data intervals for the given &#64;skill_profile_category.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_category in the request is invalid.
     *   - grpc.Internal: error occurs when getting the forecast data intervals.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response> listForecastIntervalsV2(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListForecastIntervalsV2Method(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the call profile templates that the org sending the request has.
     * Errors:
     *   - grpc.Internal: error occurs when getting the templates.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes> listCallProfileTemplates(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListCallProfileTemplatesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Builds a regression forecast for the org using the given &#64;regression_template and saves the resulting intervals in the db.
     * It will generate forecast intervals for the skill profiles sids in &#64;save_forecasts_for_skill_profile_sids,
     * if the list is empty or has no valid skill profile sids, it will generate and save forecasts for all active skill profiles.
     * If any intervals produced already exist in the db, they will be replaced with the ones produced.
     * Errors:
     *   - grpc.Invalid: the &#64;regression_template in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the regression forecast.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes> upsertRegressionForecast(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertRegressionForecastMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Tries to create an entry for the given &#64;delta for the org sending the request.
     * If the org already has an entry for it, it will update the already exisiting entry.
     * Errors:
     *   - grpc.Invalid: the &#64;delta in the request is invalid.
     *   - grpc.Internal: error occurs when upserting the forecast data delta.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes> upsertForecastDataDelta(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertForecastDataDeltaMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Tries to create entries for the given &#64;deltas.
     * If the org already has entries for any of them, it will update the already existing entry.
     * Errors:
     *   - grpc.Invalid: the &#64;deltas in the request are invalid.
     *   - grpc.Internal: error occurs when upserting the forecast data deltas.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes> upsertForecastDataDeltas(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertForecastDataDeltasMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes forecast data intervals/deltas based on the parameters provided.
     * If &#64;delete_param is type skill_profile_category, then the intervals/deltas to be deleted will be
     * associated with that id. If &#64;delete_param is type interval_sids, then the intervals/deltas to be
     * deleted will be contained in the list &#64;interval_sids. The &#64;delete_type field determines which
     * table(s) in the database the intervals/deltas will be deleted from.
     * Errors:
     *   - grpc.Invalid: one of the &#64;delete_params is invalid
     *   - grpc.NotFound: no matching intervals/deltas are found for deletion.
     *   - grpc.Internal: error occurs during the deletion of the forecast data intervals/deltas.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes> deleteForecastIntervals(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteForecastIntervalsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Retrieves the history for all the skill profiles of the requesting org.
     * Each value in every interval that has the same &#64;start_datetime of each skill profile will be summed then averaged and made into a single one.
     * When calculating the averages, each interval's values will be weighted by the number of &#64;total_calls it has.
     * History will be sorted by &#64;start_datetime in ascending order, and the range is determined by the client's historical range.
     * Errors:
     *   - grpc.Internal: error occurs when retriving the history.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes> listHistoricalDataForAllSkillProfiles(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListHistoricalDataForAllSkillProfilesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Converts the given &#64;profile_tod and &#64;profile_woms to a ProfileDOW and ProfileMOY.
     * Errors:
     *   - grpc.Invalid: the &#64;profile_tod or &#64;profile_woms in the request are invalid.
     *   - grpc.Internal: error occurs when building the ProfileDOW or ProfileMOY.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes> buildDOWAndMOYProfiles(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getBuildDOWAndMOYProfilesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Calculates and returns the averages in the training data for the given &#64;skill_profile_sid.
     * Averages to be returned will be weighted by the number of calls that each training data interval has.
     * The start time that the training data will be averaged can be modified based on the forecasting parameter &#64;averages_calculation_range_in_months,
     * which will subtract that many months from the training data range end datetime and set it as the start time.
     * If &#64;averages_calculation_range_in_months is 0, it will use the training data range start datetime.
     * Errors:
     *   - grpc.Invalid: the &#64;skill_profile_sid in the request is invalid.
     *   - grpc.NotFound: the &#64;skill_profile_sid given is not found.
     *   - grpc.Internal: error occurs when calculating the averages from the training data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes> calculateTrainingDataAveragesForSkillProfile(
        com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCalculateTrainingDataAveragesForSkillProfileMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Calculates the averages for call characteristics using the historical data of the given &#64;skill_profile_sids, &#64;skill_profile_group_sids and org sending the request.
     * If no &#64;skill_profile_sids are given, it will calculate the averages for all skill profiles for the org sending the request.
     * If no &#64;skill_profile_group_sids are given, it will calculate the averages for all skill profile groups for the org sending the request.
     * Averages will be weighted by the number of calls that each historical data interval has.
     * Once the averages are calculated, they will be updated in the db for those skill profiles.
     * If a nil &#64;datetime_range is given then the range used will be &#64;training_data_range_end_datetime - &#64;averages_calculation_range_in_months to the &#64;training_data_range_end_datetime from the forecasting parameters.
     * If &#64;averages_calculation_range_in_months is 0, it will use the &#64;training_data_range_start_datetime as the start datetime of the range.
     * If &#64;exclude_skill_profiles_with_manual_averages is true, it will exclude skill profiles and groups that have manual averages from the calculation
     * even if those skill profiles and groups are in &#64;skill_profile_sids or &#64;skill_profile_group_sids respectively.
     * Errors:
     *   - grpc.Internal: error occurs when calculating the averages from the historical data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes> updateSkillProfileAveragesUsingHistoricalData(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateSkillProfileAveragesUsingHistoricalDataMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the call center &#64;node that has the given &#64;call_center_node_sid.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this call center node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the one or more of the fields in the request are invalid.
     *   - grpc.Internal: error occurs when updating the call center node.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes> updateCallCenterNode(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateCallCenterNodeMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given client &#64;node for the org sending the request and &#64;parent_sid in the node.
     * The &#64;client_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent call center node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;parent_sid, or &#64;time_zone_val is invalid.
     *   - grpc.NotFound: parent call center node doesn't exist, or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the client node.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes> createClientNode(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateClientNodeMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a client node for the org sending the request that has the given &#64;client_node_sid and &#64;schedule_scenario_sid.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this client node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.Internal: error occurs when updating the client &#64;node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given &#64;parent_sid (call_center_node_sid) belongs to a different scenario than this &#64;node.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes> updateClientNode(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateClientNodeMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given location &#64;node for the org sending the request and parent &#64;client_node_sid.
     * The &#64;location_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent client node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.NotFound: parent client node doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the location node.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes> createLocationNode(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateLocationNodeMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a location node corresponding to the given &#64;location_node_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this location node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;location_node have invalid values.
     *   - grpc.Internal: error occurs when updating the location node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given parent &#64;client_node_sid belongs to a different scenario than the node to update.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes> updateLocationNode(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateLocationNodeMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given program &#64;node for the org sending the request and parent &#64;location_node_sid.
     * The &#64;program_node_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent location node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;node have invalid values.
     *   - grpc.NotFound: parent location node doesn't exist or belongs to a different scenario than the one given.
     *                    the &#64;skill_profile_category does not exist.
     *   - grpc.Internal: error occurs when creating the program node.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes> createProgramNode(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateProgramNodeMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a program node for the given &#64;program_node_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this program node since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;program_node have invalid values.
     *   - grpc.Internal: error occurs when updating the program node.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the given parent &#64;location_node_sid belongs to a different scenario than the program node to update.
     *                    the &#64;skill_profile_category does not exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes> updateProgramNode(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateProgramNodeMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the program nodes with the given &#64;program_node_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the given &#64;program_node_sids are invalid.
     *   - grpc.Internal: error occurs when listing the program nodes.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes> listProgramNodesBySid(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListProgramNodesBySidMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given &#64;constraint_rule for the org sending the request.
     * The &#64;constraint_rule_sid and &#64;skill_proficiency_sid (if one was created) of the new entities will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * If &#64;rule_type is set to MIN_SKILL_LEVEL, the &#64;member_target_entity field must be set with a skill proficiency and the &#64;constraint_rule.target_sid will be ignored.
     * If the &#64;member_target_entity is for a skill proficiency, that skill proficiency will be created with the given &#64;constraint_rule as parent.
     * If &#64;rule_type is NOT MIN_SKILL_LEVEL then the &#64;target_sid must be that of a scheduling activity.
     * The all other &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;constraint_rule have invalid values.
     *   - grpc.NotFound: the given &#64;target_sid for the given &#64;rule_type, or &#64;parent_entity don't exist.
     *   - grpc.Internal: error occurs when creating the constraint rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes> createConstraintRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateConstraintRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the constraint rule corresponding for given &#64;contraint_rule_sid for the org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this constraint rule since it cannot be changed.
     * If &#64;rule_type is set to MIN_SKILL_LEVEL, the &#64;member_target_entity field must be set with a skill proficiency, otherwise it should not be set and field will be ignored.
     * If the &#64;target_sid is for a different skill proficiency than the current one the constraint rule has as a target,
     * the old one will be deleted and a new one will be created for the given &#64;member_target_entity.
     * If &#64;rule_type is NOT MIN_SKILL_LEVEL then the &#64;target_sid must be that of a scheduling activity.
     * The all other &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;constraint_rule have invalid values.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the constraint rule.
     *                  : the given &#64;target_sid for the given &#64;rule_type, or &#64;parent_entity don't exist.
     *   - grpc.Internal: error occurs when updating the constraint rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes> updateConstraintRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateConstraintRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes a constraint rule with the coresponding &#64;constraint_rule_sid for the org sending the request.
     * It also deletes the entity referenced by the &#64;target_sid and &#64;rule_type if said entity is not a member of any other entity or the on call scheduling activity.
     * Errors:
     *   - grpc.Invalid: the &#64;constraint_rule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;constraint_rule doesn't exist.
     *   - grpc.Internal: error occurs when removing the constraint rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes> deleteConstraintRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteConstraintRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given &#64;non_skill_activity for the org sending the request.
     * Will also create a scheduling activity wrapper for the non skill activity.
     * The &#64;non_skill_activity_sid and &#64;scheduling_activity_sid of the new entities will be returned in the response.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;non_skill_activity have invalid values.
     *   - grpc.NotFound: the &#64;schedule_scenario_sid doesn't exist.
     *   - grpc.Internal: error occurs when creating the non skill activity or scheduling activity.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes> createNonSkillActivity(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateNonSkillActivityMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a non skill activity that has the given &#64;non_skill_activity_sid with the given values.
     * Errors:
     *   - grpc.Invalid: &#64;non_skill_activity fields have invalid values.
     *   - grpc.NotFound: non skill activity for the given &#64;non_skill_activity_sid doesn't exist.
     *   - grpc.Internal: error occurs when updating the non skill activity.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes> updateNonSkillActivity(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateNonSkillActivityMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the non skill activities that belong to the org sending the request.
     * Errors:.
     *   - grpc.Internal: error occurs when listing the activites.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes> listNonSkillActivities(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListNonSkillActivitiesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the IDs of non skill activities that belong to the org sending the request which have the given &#64;relationship_type with the &#64;associated_entity.
     * Errors:
     *   - grpc.Invalid: the &#64;associated_entity or &#64;relationship_type are invalid.
     *   - grpc.Internal: error occurs when listing the associations.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes> listNonSkillActivityAssociations(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListNonSkillActivityAssociationsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the candidate scheduling activities for a constraint or placement rule, inherited through given &#64;parent_of_rule for &#64;schedule_scenario_sid for the org making the request.
     * &#64;parent_of_rule may be any type of node, agent group, or shift template which the rule will belong to.
     * If the rule will belong to a wfm agent, the agent group must be supplied instead to get a relevant set of candidate scheduling activities.
     * Member non skill activity of each scheduling activity will be included in the response.
     * The on call scheduling activity will always be included.
     * Errors:
     *   - grpc.Invalid: the &#64;parent_of_rule is invalid.
     *   - grpc.NotFound: &#64;parent_of_rule doesn't exist
     *   - grpc.Internal: error occurs when applying inheritance or getting the nodes from &#64;parent_of_rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes> listCandidateSchedulingActivities(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListCandidateSchedulingActivitiesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists all the scheduling activities for the org making the request.
     * Their member non skill activities and pause codes will always be included.
     * Errors:
     *   - grpc.Internal: error occurs when getting the activities or its members.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse> listSchedulingActivities(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListSchedulingActivitiesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the on call scheduling activity for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   -grpc.NotFound: the on call scheduling activity for the org is not found.
     *   -grpc.Internal: error occurs when getting on call scheduling activity.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes> getOnCallSchedulingActivity(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetOnCallSchedulingActivityMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the Open Time and Agent Availability patterns for the given &#64;parent_entity and &#64;scheduling_activity_classifications for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   - grpc.Invalid: the arguments in the request are invalid.
     *   - grpc.Internal: error occurs getting the patterns or their scheduling activity sids.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse> listPatternsForSchedulingActivityClassifications(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListPatternsForSchedulingActivityClassificationsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the time off scheduling activity for the org sending the request.
     * Required permissions:
     *   NONE
     * Errors:
     *   -grpc.NotFound: the time off scheduling activity for the org is not found.
     *   -grpc.Internal: error occurs when getting time off scheduling activity.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse> getTimeOffSchedulingActivity(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetTimeOffSchedulingActivityMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates an agent group with the provided parameters.
     * A successful response should contain the &#64;agent_group_sid of the newly created entity.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, or &#64;parent_entity are invalid.
     *   - grpc.NotFound: &#64;parent_entity doesn't exist
     *   - grpc.Internal: error occurs when creating the agent group.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes> createAgentGroup(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateAgentGroupMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * ListAgentScheduleGroups lists all schedulable agent groups for the given &#64;entity filled with &#64;member_wfm_agents for the org sending the request.
     * The given &#64;entity must be either a Node or a ShiftTemplate.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the agent groups.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse> listAgentScheduleGroups(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListAgentScheduleGroupsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the agent group corresponding to the &#64;agent_group_sid, &#64;name, and &#64;parent_entity.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this agent group since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_group_sid, &#64;parent_entity, or &#64;name in the request are invalid.
     *   - grpc.Internal: error occurs when updating the agent group.
     *   - grpc.AlreadyExists: an agent group with the given &#64;name already exists.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the agent group.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes> updateAgentGroup(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateAgentGroupMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates an agent that is not assigned a tcn agent for the org sending the request.
     * If &#64;wfm_agent_sid_to_copy_agent_group_associations is set, it will also copy that agent's agent group associations to the new agent.
     * Otherwise only the new agent will be created.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sid_to_copy_agent_group_associations in the request is invalid.
     *   - grpc.Internal: error occurs creating the agent or the memberships.
     *   - grpc.NotFound: the given &#64;wfm_agent_sid_to_copy_agent_group_associations doesn't exist for the org.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse> createUnassignedWFMAgent(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateUnassignedWFMAgentMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a wfm agent for the given &#64;wfm_agent_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * The &#64;tcn_agent_sid cannot be updated.
     * Required permission:
     *   NONE
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;wfm_agent have invalid values.
     *   - grpc.NotFound: WFM agent with the given &#64;wfm_agent_sid doesn't exist.
     *   - grpc.Internal: error occurs when updating the wfm agent.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes> updateWFMAgent(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateWFMAgentMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists all wfm agents for the org sending the request.
     * if &#64;include_inactive is true then inactive agents will also be included, otherwise only active agents will be returned.
     * if &#64;include_skill_proficiencies is true then agents returned will include their skill proficiencies.
     * if &#64;include_agent_groups is true then the &#64;agent_groups_by_agent response field will be set with a list of agent groups correlating to each agents index in the &#64;wfm_agents field.
     * if &#64;include_agent_groups is set to true, the &#64;agent_group_schedule_scenario_sid field must be set, so that the agent groups for the correct scenario are returned.
     * if &#64;include_agent_groups is set to true, and &#64;agent_group_schedule_scenario_sid is not set, the agent groups will not be filtered by schedule scenario.
     * if &#64;include_agent_groups is set to false, the &#64;agent_group_schedule_scenario_sid will be ignored.
     * &#64;agent_group_schedule_scenario_sid does not effect which &#64;wfm_agents are returned.
     * WFM agents with no associated agent_groups will have an empty slice in agent_groups_by_agent at their correlated index.
     * Errors:
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes> listAllWFMAgents(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListAllWFMAgentsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists all candidate wfm agents for the org sending the request and given &#64;agent_group_sid.
     * A WFM agent is considered a candidate when it's active and it doesn't already belong to the given agent group.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Invalid: &#64;agent_group_sid has an invalid value.
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes> listCandidateWFMAgents(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListCandidateWFMAgentsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists all wfm agents who are not grouped with any agent group for the given org sending the request that were created at or after the given &#64;created_after_datetime.
     * If &#64;schedule_scenario_sid is positive, it will filter further to get only agents who are not grouped with any agent group for that scenario.
     * if &#64;include_skill_proficiencies is true then agents returned will include their skill proficiencies.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Invalid: &#64;created_after_datetime has an invalid value.
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes> listUngroupedWFMAgents(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListUngroupedWFMAgentsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the wfm_agent_sids with the given &#64;tcn_agent_sids for the org sending the request.
     * Returns a map where Key: tcn_agent_sid - Value: wfm_agent_sid.
     * If the wfm_agent_sid is not found for any &#64;tcn_agent_sids, they will not have an entry in the returned &#64;sids.
     * Errors:
     *  - grpc.Invalid: the &#64;tcn_agent_sids are invalid.
     *  - grpc.Internal: error occours while listing the wfm_agent_sids.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes> listWFMAgentSids(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListWFMAgentSidsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists all wfm agents that don't have a TCN agent assigned to them for the given &#64;orgId.
     * Member entities will not be returned.
     * Errors:
     *   - grpc.Internal: error occurs when getting the wfm agents.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse> listUnassignedWFMAgents(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListUnassignedWFMAgentsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the IDs of wfm agents that belong to the org sending the request which are associated with the given &#64;agent_group_sid.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_group_sid is invalid.
     *   - grpc.Internal: error occurs when listing the wfm agents.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes> listWFMAgentsAssociatedWithAgentGroup(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListWFMAgentsAssociatedWithAgentGroupMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a membership association for each of the given &#64;wfm_agent_sids with the given &#64;agent_group_sid.
     * The &#64;schedule_scenario_sid must match the scenario of the agent group and wfm agents.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sid are invalid.
     *   - grpc.NotFound: the &#64;wfm_agent_sids or &#64;agent_group_sid don't exist for the org or given &#64;schedule_scenario_sid.
     *   - grpc.Internal: error occurs when creating the association.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes> createWFMAgentMemberships(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateWFMAgentMembershipsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Copies the membership association of &#64;originating_wfm_agent_sid to &#64;target_wfm_agent_sid.
     * The wfm agents must both belong to the org sending the request.
     * Any existing membership associations on &#64;target_wfm_agent_sid with be retained.
     * Any conflicting memberships for &#64;target_wfm_agent_sid will be set with the membership of &#64;originating_wfm_agent_sid.
     * Errors:
     *   - grpc.NotFound: the &#64;wfm_agent_sids or &#64;agent_group_sid don't exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the associations.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse> copyWFMAgentMemberships(
        com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCopyWFMAgentMembershipsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes a membership association for each of the given &#64;wfm_agent_sids with the given &#64;agent_group_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sid are invalid.
     *   - grpc.NotFound: any of the given memberships to delete do not exist.
     *   - grpc.Internal: error occurs when deleting the association.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes> deleteWFMAgentMemberships(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteWFMAgentMembershipsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes all membership associations for the given &#64;wfm_agent_sids with the given &#64;agent_group_sids.
     * Errors:
     *   - grpc.Invalid: the &#64;wfm_agent_sids, or &#64;agent_group_sids are invalid.
     *   - grpc.Internal: error occurs when deleting the associations.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes> deleteWFMAgentsMemberships(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteWFMAgentsMembershipsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Removes the &#64;wfm_agent_sid_to_remove from all future shifts for the org.
     * If &#64;replace_with_new_unassigned_agent is set to true, a new unassigned agent will be created and it will be assigned to the shifts and agent groups from &#64;wfm_agent_sid_to_remove.
     * If &#64;replace_with_new_unassigned_agent is set to false, the future shifts will just be deleted.
     * If the &#64;wfm_agent_sid_to_remove is not currently inactive, it will be set as inactive.
     * Errors:
     *   - grpc.Internal: error occurs when deleting the shifts, creating the new unassigned agent, reassigning the shifts to that agent, or setting the agent to inactive.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse> removeAgentFromFutureShifts(
        com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getRemoveAgentFromFutureShiftsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics for the wfm agent associated with the given &#64;wfm_agent_sid or &#64;agent_group_sid for the org sending the request.
     * Response will only contain:
     *    one element if build for a single &#64;wfm_agent_sid.
     *    one element for each WFM agent if build for an &#64;agent_group_sid.
     *   - grpc.Invalid: the &#64;wfm_agent_sid, or &#64;agent_group_sid is invalid.
     *   - grpc.NotFound: the given &#64;wfm_agent_sid doesn't exist or the &#64;agent_group_sid has no agents.
     *   - grpc.Internal: error occurs building the diagnostics.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes> buildAgentDiagnostics(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getBuildAgentDiagnosticsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a shift template for the org sending the request with the provided parameters
     * The &#64;shift_template_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent program node.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the &#64;name, or &#64;program_node_sid are invalid.
     *   - grpc.AlreadyExists: a shift template with the given &#64;name already exists.
     *   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the shift template.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes> createShiftTemplate(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateShiftTemplateMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a shift template for the given &#64;shift_template_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this shift template since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the &#64;shift_template_sid, &#64;name, &#64;program_node_sid are invalid.
     *   - grpc.AlreadyExists: a shift template with the given &#64;name already exists.
     *   - grpc.NotFound: the parent program node doesn't exist or belongs to a different scenario than the shift template to update.
     *   - grpc.Internal: error occurs when updating the shift template.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes> updateShiftTemplate(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateShiftTemplateMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the shift templates matching the specified &#64;shift_template_sids for the org sending the request.
     * If &#64;include_placement_rules is set to true, the &#64;shift_templates will be returned with their member placement rules.
     * Errors:
     *   - grpc.Invalid: the &#64;shift_template_sids are invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes> listShiftTemplatesBySids(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListShiftTemplatesBySidsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics for the shift template associated with the given &#64;shift_template_sid for the org sending the request.
     *   - grpc.Invalid: the &#64;shift_template_sid is invalid.
     *   - grpc.NotFound: the given &#64;shift_template_sid doesn't exist for the org sending the request.
     *   - grpc.Internal: error occours building the diagnostics for the shift template.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes> buildShiftTemplateDiagnostics(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getBuildShiftTemplateDiagnosticsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a placement rule for org sending the request with the provided parameters.
     * The &#64;placement_rule_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the parent shift template.
     * The &#64;member fields will be ignored since those cannot be created by this method and must be created by their respective create methods.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;placement_rule are invalid.
     *   - grpc.NotFound: the parent shift template doesn't exist or belongs to a different scenario than the one given.
     *                    the scheduling activity to associate with the placement rule doesn't exist or belongs to a different scenario than the one given.
     *   - grpc.Internal: error occurs when creating the placement rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes> createPlacementRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreatePlacementRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a placement rule corresponding with the given &#64;placement_rule_sid for the org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this placement rule since it cannot be changed.
     * The &#64;member fields will be ignored since those cannot be updated by this method and must be updated by their respective update methods.
     * Errors:
     *   - grpc.Invalid: the one or more of the fields in the &#64;placement_rule are invalid.
     *   - grpc.Internal: error occurs when updating the placement rule.
     *   - grpc.NotFound: entry to be updated doesn't exist.
     *                  : the parent shift template or related scheduling activity don't exist or belong to a different scenario than the placement rule to update.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes> updatePlacementRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdatePlacementRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes a placement rule with the coresponding &#64;placement_rule_sid for the org sending the request.
     * It also deletes the scheduling activity referenced by the &#64;scheduling_activity_sid if said activity is not a member of any other entity.
     * Errors:
     *   - grpc.Invalid: the &#64;placement_rule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;placement_rule doesn't exist.
     *   - grpc.Internal: error occurs when removing the placement rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes> deletePlacementRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeletePlacementRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates an open times pattern for the org sending the request with the provided parameters.
     * The &#64;open_times_pattern_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;open_times_pattern are invalid.
     *   - grpc.NotFound: the parent entity doesn't exist.
     *   - grpc.Internal: error occurs when creating the open times pattern.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes> createOpenTimesPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateOpenTimesPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates an open times pattern for the given &#64;open_times_pattern_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this open times pattern since it cannot be changed.
     * Required permission:
     *   NONE
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;open_times_pattern have invalid values.
     *   - grpc.NotFound: the given &#64;open_times_pattern or it's &#64;parent_entity doesn't exist.
     *   - grpc.Internal: error occurs when updating the open times pattern.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes> updateOpenTimesPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateOpenTimesPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes an open times pattern with the coresponding &#64;open_times_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;open_times_pattern_sid is invalid for the org making the request.
     *   - grpc.NotFound: the given &#64;open_times_pattern doesn't exist.
     *   - grpc.Internal: error occurs when removing the open times pattern.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes> deleteOpenTimesPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteOpenTimesPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the inherited, own, and resulting bitmaps for the open times patterns of &#64;node_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;node_to_check.
     * If &#64;bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
     * If &#64;bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the open times patterns.
     * If &#64;bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the open times patterns.
     * The bitmaps will be generated for the span of &#64;datetime_range.
     * Errors:
     *   - grpc.Invalid: the &#64;node_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *                 : the &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;node_to_check doesn't exist.
     *   - grpc.Internal: error occurs when getting the open times pattern bitmaps.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes> getOpenTimesBitmaps(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetOpenTimesBitmapsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the datetime ranges over which the given &#64;node_selector open times patterns are open throughout the given &#64;datetime_range for the org sending the request.
     * If the &#64;node_selector is not open during that range, no ranges will be returned.
     * If the &#64;node_selector is opened before or after the given &#64;datetime_range, those times outside of &#64;datetime_range will not be included in the returned &#64;open_close_ranges.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector or &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;node_selector doesn't exist in &#64;schedule_scenario_sid for the org sending the request.
     *   - grpc.Internal: error occurs when getting the open time close times.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse> listOpenDateRangesForNodeOpenTimesBitmaps(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListOpenDateRangesForNodeOpenTimesBitmapsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates an agent availability pattern for the org sending the request with the provided parameters.
     * The &#64;agent_availability_pattern_sid of the new entity will be returned in the response.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;agent_availability_pattern are invalid.
     *   - grpc.NotFound: the parent entity doesn't exist.
     *   - grpc.Internal: error occurs when creating the agent availability pattern.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes> createAgentAvailabilityPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateAgentAvailabilityPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates an agent availability pattern for the given &#64;agent_availability_pattern_sid and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;schedule_scenario_sid must be the original for this agent availability pattern since it cannot be changed.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;agent_availability_pattern have invalid values.
     *   - grpc.Internal: error occurs when updating the agent avilability pattern.
     *   - grpc.NotFound: entry to be updated doesn't exist, or the &#64;parent_entity has a different &#64;schedule_scenario_sid than the agent availability pattern.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes> updateAgentAvailabilityPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateAgentAvailabilityPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes an agent availability pattern with the coresponding &#64;agent_availability_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;agent_availability_pattern_sid has an invalid value.
     *   - grpc.NotFound: the &#64;agent_availability_pattern with the given sid doesn't exist.
     *   - grpc.Internal: error occurs when removing the agent availability pattern.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes> deleteAgentAvailabilityPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteAgentAvailabilityPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the inherited, own, and resulting bitmaps for the agent availability patterns of &#64;entities_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;entities_to_check.
     * &#64;entities_to_check must have the entity_type field set with a wfm agent, agent group or a type of node.
     * If an availability bitmap is requested for an agent group, the bitmaps for all of it's member agents will be returned instead.
     * The bitmaps will be generated for the span of &#64;datetime_range.
     * If &#64;bitmap_type is COMPLETE, the bitmaps will be generated using all relevant pattern data.
     * If &#64;bitmap_type is ONLY_WEEKMAPS, the bitmaps will be generated using only the weekmap data from the availability patterns.
     * If &#64;bitmap_type is ONLY_CALENDAR_ITEMS, the bitmaps will be generated using only the calendar item data from the availability patterns.
     * Errors:
     *   - grpc.Invalid: the &#64;entities_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *                 : the &#64;datetime_range is invalid.
     *   - grpc.NotFound: the given &#64;entities_to_check don't exist.
     *   - grpc.Internal: error occurs when getting the agent availability pattern bitmaps.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes> getAvailabilityBitmaps(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetAvailabilityBitmapsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Upserts an association for the given &#64;non_skill_activity_sid to the given &#64;node.
     * All downstream members of the entity will have their inheritance state cleared, and inherit the given association.
     * If an association already exists between the non skill activity and the &#64;node then their &#64;relationship_type will be updated.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entity.
     * If a NOT_ASSOCIATED_WITH relationship is being created, the tree will be checked for conflicting downstream effects.
     * If any member rules, are referencing the non skill activity and &#64;relationship_type is NOT_ASSOCIATED_WITH, then the upsert will not take effect, and the list of related entities to be updated/removed first will be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;non_skill_activity_sid, &#64;node or &#64;association_type are invalid.
     *                 : the non skill activity and &#64;node belong to different scenarios.
     *   - grpc.NotFound: the &#64;non_skill_activity_sid or &#64;node don't exist.
     *   - grpc.Internal: error occurs when upserting the association.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes> upsertNonSkillActivityAssociation(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertNonSkillActivityAssociationMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates skill proficiencies for the org sending the request with the provided parameters.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;parent_entities.
     * Errors:
     *   - grpc.Invalid: the parameters in a &#64;proficiency, or the &#64;schedule_scenario_sid are invalid.
     *   - grpc.NotFound: for any of the given &#64;skill_proficiencies:
     *                    the &#64;parent_entity doesn't exist.
     *                    the &#64;skill_sid doesn't exist.
     *                    the skill profile with &#64;preferred_skill_profile_sid doesn't contain the given &#64;skill_sid.
     *   - grpc.AlreadyExists: a skill proficiency with the given &#64;skill_sid and &#64;parent_entity already exists.
     *   - grpc.Internal: error occurs when creating the skill proficiencies.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes> createSkillProficiencies(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateSkillProficienciesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates skill proficiencies corresponding to the given &#64;skill_proficiency_sids and org sending the request with the provided parameters.
     * All of the entity's parameters that are not desired to be updated must be filled with their current values.
     * The &#64;skill_sid and &#64;parent_entity field of each proficiency will be ignored since it cannot be updated.
     * Errors:
     *   - grpc.Invalid: one or more fields in the &#64;skill_proficiencies have invalid values.
     *   - grpc.Internal: error occurs when updating the skill proficiencies.
     *   - grpc.NotFound: for any of the given &#64;skill_proficiencies:
     *                    the &#64;skill_sid doesn't exist.
     *                    the skill profile with &#64;preferred_skill_profile_sid doesn't contain the skill of the given skill proficiency.
     *   - grpc.AlreadyExists: a skill proficiency with the given &#64;skill_sid and &#64;parent_entity already exists.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes> updateSkillProficiencies(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateSkillProficienciesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes a skill proficiency with the corresponding &#64;skill_proficiency_sid for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;skill_proficiency_sid is invalid for the org making the request.
     *   -grpc.NotFound: the skill proficiency with the given &#64;skill_proficiency_sid doesn't exist.
     *   -grpc.Internal: error occurs when removing the skill proficiency.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes> deleteSkillProficiency(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteSkillProficiencyMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Copies the existing scenario with the &#64;scenario_sid_to_copy for the org sending the request using the provided parameters.
     * Scheduling targets of entities in the scenario to copy will also be copied.
     * The new &#64;schedule_scenario_sid of the new entity will be returned in the response.
     * Errors:gg
     *   - grpc.Invalid: the parameters &#64;scenario_sid_to_copy or any others are invalid.
     *   - grpc.NotFound: the scenario corresponding to the &#64;scenario_sid_to_copy doesn't exist.
     *   - grpc.Internal: error occurs when creating/coping the new scenario.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes> copyScenario(
        com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCopyScenarioMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a new schedule scenario for the org sending the request with the provided parameters.
     * The new &#64;schedule_scenario_sid of the new entity will be returned in the response.
     * It also creates 1 of each of the following: call center, client, program, location node, and on call scheduling activity (if it doesn't exist already for the org).
     * The &#64;node_description fields may optionally be left blank.
     * The &#64;copied_from_scenario_sid field will be ignored, as it will be set to nil in the newly created scenario.
     * The &#64;creation_datetime and &#64;is_default fields will also be ignored and set as the current time and false respectively.
     * The &#64;skill_profile_category will be associated with the created program node.
     * Errors:
     *   - grpc.Invalid: parameters in the &#64;req are invalid for the org making the request.
     *   - grpc.NotFound: the &#64;skill_profile_category does not exist.
     *   - grpc.Internal: error occurs when creating the new scenario, or any of the node entities.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes> createScheduleScenarioWithNodes(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateScheduleScenarioWithNodesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a schedule scenario corresponding to the given &#64;schedule_scenario_sid and org sending the request with the provided parameters.
     * Only the &#64;name, &#64;description and &#64;datetime_set_to_inactive fields may be updated, and must be filled in with current value if updating the field is not desired.
     * The &#64;schedule_scenario_sid must be the original for the schedule scenario since it cannot be updated.
     * All other fields will be ignored since they cannot be updated.
     * Errors:
     *   -grpc.Invalid: one or more fields in the &#64;scenario have invalid values.
     *   -grpc.NotFound: the scenario with the given &#64;schedule_scenario_sid doesn't exist.
     *   -grpc.Internal: error occurs when updating the scenario.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes> updateScheduleScenario(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateScheduleScenarioMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets config entities that match the org sending the request and given &#64;entity_type and that belong to the &#64;belongs_to_entity and &#64;schedule_scenario_sid parameters.
     * If &#64;include_member_lists is set to true the member lists of the entities retrieved will be included.
     * Any nodes in the returned set of entities will have inherited nonskill associations applied to the node's member_nonskill_activity fields.
     * Errors:
     *   - grpc.Invalid: the &#64;entity_type, or &#64;belongs_to_entity have invalid values.
     *   - grpc.Internal: error occurs when getting the config entities.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes> listConfigEntities(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListConfigEntitiesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes shift instances with the corresponding &#64;shift_instance_sids for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;shift_instance_sids are invalid for the org making the request.
     *   -grpc.NotFound: the shift instances with the given &#64;shift_instance_sids don't exist.
     *   -grpc.Internal: error occurs when removing the shift instances.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes> deleteShiftInstances(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteShiftInstancesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Builds and returns the diagnostics and &#64;nodes_checked for the &#64;node_to_check for &#64;schedule_scenario_sid and the org sending the request.
     * The &#64;schedule_scenario_sid must match the scenario of the &#64;node_to_check.
     * Errors:
     *   - grpc.Invalid: the &#64;node_to_check is invalid for &#64;schedule_scenario_sid and the org making the request.
     *   - grpc.NotFound: the given &#64;node_to_check doesn't exist.
     *   - grpc.Internal: error occurs when building the diagnostics.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes> buildNodeDiagnostics(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getBuildNodeDiagnosticsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Builds and returns the global diagnostics and &#64;nodes_checked for the &#64;schedule_scenario_sid and the org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;schedule_scenario_sid has an invalid values.
     *   - grpc.NotFound: the given &#64;schedule_scenario_sid doesn't exist for the org making the request.
     *   - grpc.Internal: error occurs when building the diagnostics.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes> buildGlobalDiagnostics(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getBuildGlobalDiagnosticsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the published schedule for the corresponding &#64;datetime_range for the org sending the request.
     * Will create a published schedule if it does not exist already for the org sending the request.
     * Returns the published schedule without any shift instances.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range, &#64;metric_types are invalid.
     *   - grpc.NotFound: the &#64;node_selector doesn't exist.
     *   - grpc.Internal: error occurs when getting the published schedule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes> getPublishedSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetPublishedScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the required calls intervals for the published schedule for the corresponding &#64;viewing_range, for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the published schedule doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes> getPublishedScheduleRequiredCalls(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetPublishedScheduleRequiredCallsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the required calls intervals for the specified draft schedule for the corresponding &#64;viewing_range, for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the draft schedule doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes> getDraftScheduleRequiredCalls(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetDraftScheduleRequiredCallsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a draft schedule for the org sending the request with the provided parameters.
     * The &#64;draft_schedule_sid of the new entity will be returned in the response.
     * The &#64;created_at and &#64;last_updated_at fields will be set to the current time and null respectively.
     * The draft schedule will include the published schedule's shift instances and shift segments.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;description or &#64;scheduling_range are invalid.
     *   - grpc.Internal: error occurs when creating the draft schedule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes> createDraftSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateDraftScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the &#64;name, &#64;description, and &#64;datetime_range of the given &#64;draft_schedule_sid for the org sending the request.
     * The &#64;name, &#64;description, and &#64;datetime_range fields must all be set with their desired values.
     * If &#64;delete_shifts_not_in_range if true, then any instances outside of the &#64;datetime_range will be permenantly deleted with no recovery option.
     * If &#64;delete_shifts_not_in_range is false, instances outside of the new &#64;datetime_range will be retained, for use if the datetime range is expanded to cover the instances in the future.
     * If &#64;copy_shifts_into_new_range time is true, then new the portion of an expanded &#64;datetime_range which has no instances will copy the instances from the published schedule. If false, no instances will be created for an expanded &#64;scheduling_range.
     * Returns the updated schedule without any shift instances.
     * Errors:
     *   - grpc.Invalid: the &#64;name, &#64;description or &#64;datetime_range are invalid.
     *   - grpc.Internal: error occurs when updating the schedule or its instances.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes> updateDraftSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateDraftScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Builds a draft schedule for the given &#64;node_selector in &#64;schedule_scenario_sid over &#64;schedule_scenario_scheduling_range for &#64;draft_schedule_sid and the org making the request.
     * The &#64;schedule_scenario_scheduling_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
     * Returns the draft schedule without any shift instances.
     * Will return diagnostics for the newly built schedule, or just diagnostics if the schedule cannot be built successfully due to diagnostic error.
     * If &#64;auto_generate_agents is set to true, unassigned agents will automatically be generated to meet the requirements of the shift templates min and max agents.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes> buildDraftSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getBuildDraftScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Polls the scheduler to check if there is currently a build in progress for the given &#64;draft_schedule_sid.
     * If there is a build in progress &#64;build_in_progress will be true.
     * As long as there has been a build started for the given &#64;draft_schedule_sid, &#64;build_start_datetime will be set with the time that the build process started.
     * If a build has been completed for the draft, &#64;build_end_datetime will be set with the time that the build ended, otherwise it will be None.
     * The &#64;build_status gives the status of the most recent build for the draft.
     * The &#64;diagnostics will be set with any diagnostics encountered during the most recent build.
     * Any errors encountered during the build process will be returned as INTERNAL_ERROR diagnostics.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid.
     *   - grpc.NotFound: the &#64;draft_schedule_sid does not exist for the org sending the request.
     *   - grpc.Internal: error chceking for the build in progress.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse> pollBuildInProgress(
        com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getPollBuildInProgressMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Cancels the build in progress for the given &#64;draft_schedule_sid.
     * If there was a build to cancel, &#64;canceled_build will be returned as true, otherwise it will be false.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid.
     *   - grpc.Internal: error when cancelling the build or updating the build in progress table.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse> cancelBuildInProgress(
        com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCancelBuildInProgressMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Publishes the shift instances of the given &#64;draft_schedule_sid to the published schedule of the org sending the request.
     * Overlapping shift instances that aren't locked will be replaced with the instances from the draft schedule.
     * If &#64;ignore_diagnostics_errors is set to true, it will publish the schedule regardless of any diagnostics errors,
     * otherwise it will return those diagnostic errors and not publish the schedule.
     * does not return any shift instances on the published schedule.
     * Errors:
     *   - grpc.Invalid: the parameters in the &#64;req are invalid..
     *   - grpc.NotFound: &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when publishing the draft schedule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes> publishDraftSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getPublishDraftScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Resets the shifts on the &#64;draft_schedule_sid for the org sending the request.
     * Shifts overlapping the &#64;datetime_range will be deleted, then that &#64;datetime_range will be populated with shifts from the published schedule.
     * If no &#64;datetime_range is provided, all shifts will be removed from the &#64;draft_schedule_sid, and published shifts will be copied across the draft's datetime range.
     * If &#64;unlocked_only is set to true, only unlocked shifts will be deleted, and the locked shift instances will remain.
     *   The published schedule will still be copied, so any newly overlapping shifts will result in an overlap warning.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range or &#64;draft_schedule_sid are invalid for the org sending the request.
     *   - grpc.NotFound: the &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when resetting the schedule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes> resetDraftSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getResetDraftScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the draft schedule with &#64;draft_schedule_sid for the corresponding &#64;datetime_range for the org sending the request.
     * The &#64;datetime_range field is optional. If not set, the draft schedule will be obtained with it's default range from it's start to end time.
     * Does not return any shift instances on the draft schedule.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range or &#64;draft_schedule_sid are invalid.
     *   - grpc.NotFound: the &#64;node_selector or &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when getting the draft schedule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes> getDraftSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetDraftScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the draft schedules whose scheduling_range overlaps the given &#64;datetime_range for the org sending the request.
     * If &#64;datetime_range is not set, all draft schedules for the org will be returned.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range is invalid.
     *   - grpc.Internal: error occurs when listing the draft schedules.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes> listDraftSchedules(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListDraftSchedulesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Clears shift instances from the &#64;schedule_selector for the org sending the request.
     * If &#64;node_selector is set, only shifts related to the given &#64;node_selector will be cleared.
     * If &#64;node_selector is not set, all shifts on the &#64;schedule_selector may be cleared, regardless of the shift template they are associated with.
     * If &#64;datetime_range is set, only the shifts overlapping the &#64;datetime_range will be cleared.
     * If &#64;datetime_range is not set, all shifts on the schedule will be considered in range to be deleted and &#64;invert_datetime_range and &#64;start_datetimes_only must be set to false.
     * If &#64;invert_datetime_range is set to true, the shifts overlapping the range before and after the provided &#64;datetime_range will be deleted.
     * If &#64;invert_datetime_range is set to false, the provided &#64;datetime_range will be used.
     * If &#64;start_datetimes_only is set to true, deletes the shifts that start within the &#64;datetime range, or start before or after &#64;datetime_range if &#64;invert_datetime_range is true.
     * If &#64;start_datetimes_only is set to false, deletes the shifts that overlap with the &#64;datetime range, or overlap the range before or after &#64;datetime_range if &#64;invert_datetime_range is true.
     * If &#64;delete_locked is set to true, both locked and unlocked shifts will be cleared.
     * If &#64;delete_locked is set to false, only shifts with &#64;is_locked set to false may be cleared.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector, &#64;schedule_selector, or &#64;datetime_range in the request are invalid.
     *   - grpc.NotFound: the draft schedule with the given &#64;schedule_selector doesn't exist.
     *   - grpc.Internal: error occurs when removing the shifts from the schedule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes> clearSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getClearScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes a draft schedule with the corresponding &#64;draft_schedule_sid for the org sending the request.
     * It also deletes all of its shift instances and segments.
     * Errors:
     *   - grpc.Invalid: the &#64;draft_schedule_sid is invalid for the org making the request.
     *   - grpc.NotFound: the draft schedule with the given &#64;draft_schedule_sid doesn't exist.
     *   - grpc.Internal: error occurs when removing the draft schedule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes> deleteDraftSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteDraftScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the shift instances with the corresponding &#64;shift_instance_sids for the org sending the request.
     * If &#64;include_shift_template is set to true then the related shift template for the shift instances will be returned in the shift template field.
     * If &#64;include_shift_segments is set to true then the related shift segments for the shift instances will be returned in the shift segments field.
     * If &#64;include_shift_segment_call_stats is set to true then the related shift segment call stats for the shift segments will be returned in the call stats by skill collection field on the shift segments.
     * If &#64;include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
     * &#64;include_shift_segments must be true to take effect.
     * If &#64;include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling
     * activities member non skill activity field. &#64;include_scheduling_activity must be true to take effect.
     * Errors:
     *   - grpc.Invalid: &#64;shift_instance_sids in the request are invalid.
     *   - grpc.Internal: error occurs when listing the shift instances or their shift segments.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes> listShiftInstancesBySid(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListShiftInstancesBySidMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Copies the shifts from &#64;source_schedule_selector to &#64;destination_schedule_selector, constrained by the given parameters for the org sending the request.
     * If &#64;datetime_range is set, all shifts within the datetime range will be copied.
     * If &#64;datetime_range is not set, all shifts in the &#64;source_schedule_selector within the schedule range of the &#64;destination_schedule_selector will be copied. However if one of them is a published schedule, it will use the schedule range of the draft schedule.
     * If &#64;start_datetimes_only is set to false, then shifts are considered to be within the &#64;datetime range if any portion of them is within the range.
     * If &#64;start_datetimes_only is set to true, then only shifts with start times within the &#64;datetime range will be copied.
     * If &#64;overlap_as_warning is set to false, any overlapping shifts for a given agent will return a diagnostic error, and prevent any shifts from being copied.
     * If &#64;overlap_as_warning is set to true, the shifts will be copied regardless of overlap conflicts, and any conflicts will cause a diagnostic warning to be returned after.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values.
     *   -grpc.NotFound: the &#64;source_schedule_selector or &#64;destination_schedule_selector don't exist for the org sending the request.
     *   -grpc.Internal: error occurs when creating the copied shift instances.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes> copyScheduleToSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCopyScheduleToScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a shift instance for the org sending the request with the provided parameters.
     * This method is not implemented. Do not use.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when creating the shift instance.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes> createShiftInstance(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateShiftInstanceMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a shift instance for the org sending the request with the provided parameters.
     * If &#64;wfm_agent_sids is empty, then the shift instance will be created for a newly created unassigned agent.
     * A shift instance will be created for each wfm agent sid provided.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when creating the shift instance.
     *   - grpc.NotFound: the &#64;draft_schedule_sid, &#64;shift_template_sid, or &#64;wfm_agent_sids do not exist for the org sending the request.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res> createShiftInstanceV2(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateShiftInstanceV2Method(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the &#64;shift_instance with any member shift segments and shift segment call stats for the org sending the request.
     * If &#64;ignore_diagnostics_errors any diagnostics encountered will be returned as warnings, and the shift will still be created.
     *   Otherwise, any diagnostics triggered by the given &#64;shift_instance will be returned and the shift will not be created.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values.
     *   -grpc.NotFound: the fields referenced in &#64;shift_instance or its member shift segments don't exist for the org.
     *   -grpc.Internal: error occurs when creating the shift instance or its members.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse> createShiftInstanceWithSegments(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateShiftInstanceWithSegmentsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Splits the &#64;shift_instance_sid into two, at the given &#64;time_to_split, returning the updated and new &#64;shift_instances.
     * Any shift segments will be split between the two shift instances at &#64;time_to_split.
     * If the &#64;time_to_split creates instances shorter then the minimum length specified by the shift template,
     *   warning diagnostics will be returned and the instance will still be split.
     * Errors:
     *   -grpc.Invalid: one or more fields in the request have invalid values, or &#64;time_to_split is not at least 5 minutes from the start or end of &#64;shift_instance_sid.
     *   -grpc.NotFound: the &#64;shift_instance_sid does't exist for the org sending the request.
     *   -grpc.Internal: error occurs when creating or updating the shift instances.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes> splitShiftInstance(
        com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getSplitShiftInstanceMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Swaps shift instances with the given &#64;shift_instance_sids that belong to &#64;wfm_agent_sid1 to belong to &#64;wfm_agent_sid2 (and viceversa).
     * Returns the swapped &#64;shift_instances after they are succesfully updated.
     * If there are other shifts for the given &#64;wfm_agent_sids with an overlap conflict, diagnostics will be returned instead.
     * All &#64;shift_instance_sids must belong to the same schedule, and be from a draft schedule.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.NotFound: wfm_agent_sid_1, wfm_agent_sid_2, or shift_instance_sids do not exist for the org sending the request.
     *   - grpc.Internal: error occurs when swapping the shift instances.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes> swapShiftInstances(
        com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getSwapShiftInstancesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a shift instance for the org sending the request with the provided parameters.
     * This method is not implemented. Do not use.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when updating the shift instance.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes> updateShiftInstance(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateShiftInstanceMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates a shift instance for the org sending the request with the provided parameters.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.Internal: error occurs when updating the shift instance.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res> updateShiftInstanceV2(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateShiftInstanceV2Method(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Runs diagnostics on the given &#64;shift_instance for the org sending the request.
     * If &#64;ignore_diagnostics_errors is True, the shift will be updated regardless of diagnostic errors and any diagnostics will be returned as warnings.
     * Otherwise, the shift will only be updated if there are no diagnostic errors.
     * Only the &#64;start_datetime, &#64;is_locked, &#64;width_in_minutes and &#64;wfm_agent_sid fields of the shift will be updated.
     * Any existing shift segments belonging to &#64;shift_instance will be deleted and replaced with the ones in the given &#64;shift_instance.
     * If no segments are provided, the existing segments will still be deleted and the instances will be left without any.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when updating the &#64;shift_instance or replacing their member shift segments.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse> updateShiftInstanceWithSegments(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateShiftInstanceWithSegmentsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Copies the given &#64;shift_instance_sids to &#64;destination_schedule for the org sending the request.
     * If there are any overlap conflicts on &#64;destination_schedule and &#64;overlap_as_warning is set to false,
     *  then &#64;shift_instance_sids will not be copied, and a list of diagnostics detailing the overlaps will be returned.
     * If &#64;overlap_as_warning is set to true, overlap conflicts will not prevent the shifts from being copied, and the overlap diagnostics will be returned after as warning messages instead.
     * Errors:
     *   - grpc.Invalid: one or more fields in the request have invalid values.
     *   - grpc.NotFound: the &#64;shift_instance_sids or &#64;destination_schedule does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when copying the shift instances.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes> copyShiftInstancesToSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCopyShiftInstancesToScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the shift_instance_sids for the Shift Instances associated with &#64;wfm_agent_sid over the given &#64;datetime_range and &#64;schedule_selector.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes> listShiftInstanceSidsForAgent(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListShiftInstanceSidsForAgentMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the shift_instance_sids for the Shift Instances associated with the given &#64;datetime_range and &#64;schedule_selector.
     * If &#64;node_selector is set, only shifts sids related to the given &#64;node_selector will be listed.
     * If &#64;node_selector is not set, all shifts on the &#64;schedule_selector may be cleared, regardless of the node they are associated with.
     * If &#64;node_selector is set, the &#64;schedule_scenario_sid must be set to match &#64;node_selector.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse> listShiftInstanceSidsForSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListShiftInstanceSidsForScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists shift segments for the specified shift instances for the org sending the request.
     * If &#64;include_scheduling_activity is set to true then the related scheduling activity for the shift segment will be returned in the scheduling activity field.
     * If &#64;include_activity is set to true then the related non skill activity for the scheduling activity will be returned in the scheduling activities member non skill activity field.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: a shift instance doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes> listShiftSegmentsByShiftInstanceSids(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListShiftSegmentsByShiftInstanceSidsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given &#64;scheduling_target for the org making the request.
     * The &#64;scheduling_target_sid of the new entity will be returned in the response.
     * Any preexisting scheduling target for &#64;node_entity will be removed upon creation of the new &#64;scheduling_target.
     * Errors:
     *   - grpc.Invalid: the &#64;scheduling_target is invalid.
     *   - grpc.NotFound: &#64;node_entity doesn't exist for &#64;schedule_scenario_sid and the org making the request.
     *   - grpc.Internal: error occours when setting the scheduling target.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes> setSchedulingTarget(
        com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getSetSchedulingTargetMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the &#64;own_scheduling_target, &#64;inherited_scheduling_target, and &#64;resulting_scheduling_target for the given &#64;node_selector and the org making the request.
     * Errors:
     *   - grpc.Invalid: the &#64;node_selector is invalid.
     *   - grpc.NotFound: the given &#64;node_selector doesn't exist for the org making the request.
     *   - grpc.Internal: error occours when getting the scheduling target.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes> getSchedulingTarget(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetSchedulingTargetMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the scheduling target of the corresponding &#64;node_selector for the org sending the request.
     * Errors:
     *   -grpc.Invalid: the &#64;node_selector is invalid.
     *   -grpc.NotFound: the scheduling target for the given &#64;node_selector doesn't exist for the org making the request.
     *   -grpc.Internal: error occurs when removing the scheduling target.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes> deleteSchedulingTarget(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteSchedulingTargetMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the scheduling-target values for the org making the request.
     * Errors:
     *   - grpc.Internal: error occours when getting the scheduling-target values.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes> getDefaultSchedulingTarget(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetDefaultSchedulingTargetMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Sets the scheduling-target values for the org making the request.
     * Errors:
     *   - grpc.Invalid: any of the given values are invalid.
     *   - grpc.Internal: error occours when setting the scheduling-target values.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes> setDefaultSchedulingTarget(
        com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getSetDefaultSchedulingTargetMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the performance metrics across &#64;datetime_range for shift instances in &#64;schedule_selector associated with &#64;node_selector for the org making the request.
     * Performance metrics will be generated for each of the given &#64;metric_params.
     * The &#64;interval_width_in_minutes must be a multiple of 5.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;node_selector, &#64;schedule_selector, or their shift instances doesn't exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes> getPerformanceMetrics(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetPerformanceMetricsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the required calls intervals for the given &#64;node_selector over the given &#64;datetime_range for the org making the request.
     * The &#64;interval_width_in_minutes must be a multiple of 5.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes> listRequiredCallsIntervals(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListRequiredCallsIntervalsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a Tour Pattern for &#64;shift_template_sid and the org sending the request, returning &#64;tour_pattern_sid.
     * If there is already a Tour Pattern for &#64;shift_template_sid then the method call will fail to create a new Tour Pattern.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: A Tour Pattern already exists for &#64;shift_template_sid.
     *   - grpc.Internal: error occurs when creating the Tour Pattern.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes> createTourPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateTourPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Returns a list of diagnostics describing any issues with the given &#64;tour_pattern.
     * Checks the internal consistency between the pattern and all members, as well as making sure required fields are set with valid values.
     * Ignores sid fields, except for &#64;shift_template_sid and &#64;scheduling_activity_sid.
     * Does not query the database to check that foreign keys exist.
     * Returns a single diagnostic with an OK code if the given &#64;tour_pattern has no issues.
     * The &#64;member_tour_week_patterns and &#64;member_tour_agent_collections fields must be set on &#64;tour_pattern.
     * Errors:
     *   - grpc.Internal: error occurs when validating the tour pattern or members.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes> getTourPatternDiagnostics(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetTourPatternDiagnosticsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Replaces the existing Tour Pattern and members with &#64;tour_pattern for the &#64;tour_pattern.shift_template_sid and the org sending the request.
     * Returns the newly created Tour Pattern and members with their updated SIDs and Week Pattern Numbers.
     * Any existing Tour Week Patterns, Tour Shift Instance and Segment Configs, Tour Agent Collections and their WFM Agent SIDs
     *   belonging to &#64;tour_pattern.shift_template_sid will be replaced with the members on the provided &#64;tour_pattern.
     * At least one Tour Agent Collection and one Tour Week Pattern must be provided in the member fields.
     * If the tour pattern data or members have issues that prevent them from being persisted, a list of diagnostics will be returned describing the issues that must be resolved.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;tour_pattern.shift_template_sid does not exist.
     *   - grpc.Internal: error occurs when upserting the tour pattern or members.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes> upsertTourPatternWithMembers(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertTourPatternWithMembersMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the Tour Pattern belonging to &#64;shift_template_sid and the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the requested Tour Pattern does not exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes> getTourPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetTourPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the Tour Pattern belonging to &#64;shift_template_sid and the org sending the request.
     * The &#64;tour_pattern will be returned with all member entities.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the requested Tour Pattern does not exist.
     *   - grpc.Internal: error occurs when getting the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes> getTourPatternWithMembers(
        com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGetTourPatternWithMembersMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the Tour Pattern belonging to &#64;tour_pattern_sid and the org sending the request.
     * Any member Tour Week Patterns or Agent Collections will be deleted as well.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the data or it's children.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes> deleteTourPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteTourPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates a Tour Week Pattern for &#64;tour_pattern_sid for the org sending the request, returning &#64;tour_week_pattern_sid.
     * The newly created Tour Week Pattern will be placed at the end of the existing sequence of tour week patterns for &#64;tour_pattern_sid.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the Tour Week Pattern.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes> createTourWeekPattern(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateTourWeekPatternMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the Tour Week Patterns with &#64;tour_pattern_sid for the org sending the request
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Week Patterns.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes> listTourWeekPatterns(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListTourWeekPatternsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the Tour Week Patterns with the given &#64;tour_week_pattern_sids for the org sending the request.
     * Any Tour Week Instance or Segment Configs using &#64;tour_week_pattern_sids will be deleted.
     * Request will error if any &#64;tour_week_pattern_sids are in use by a Tour Agent Collection, as those must be removed first.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.FailedPrecondition: a &#64;tour_week_pattern_sid is in use by a Tour Agent Collection.
     *   - grpc.Internal: error occurs when deleting the tour week patterns or configs.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes> deleteTourWeekPatterns(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteTourWeekPatternsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the &#64;tour_shift_instance_config for the org sending the request, returning &#64;tour_shift_instance_config_sid.
     * The given &#64;tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to &#64;tour_week_pattern_sid.
     * The &#64;member_tour_shift_segment_configs field will be ignored, and will not be created if passed through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or a preexisting tour shift instance config would overlap &#64;tour_shift_instance_config.
     *   - grpc.Internal: error occurs when creating the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes> createTourShiftInstanceConfig(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateTourShiftInstanceConfigMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the &#64;tour_shift_instance_config for the org sending the request, returning &#64;tour_shift_instance_config_sid.
     * The given &#64;tour_shift_instance_config will not be created if it will overlap another tour shift instance config belonging to &#64;tour_week_pattern_sid.
     * The &#64;member_tour_shift_segment_configs field will be ignored, and will not be updated if passed through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or a preexisting Tour Shift Instance Config would overlap &#64;tour_shift_instance_config.
     *   - grpc.Internal: error occurs when updating the data.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes> updateTourShiftInstanceConfig(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateTourShiftInstanceConfigMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the Tour Shift Instance Configs belonging to &#64;tour_week_pattern_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes> listTourShiftInstanceConfigs(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListTourShiftInstanceConfigsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the Tour Shift Instance Configs matching &#64;tour_shift_instance_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Instance Configs.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes> deleteTourShiftInstanceConfigs(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteTourShiftInstanceConfigsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given &#64;tour_shift_segment_config for the org sending the request, returning &#64;tour_shift_segment_config_sid.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: the &#64;tour_shift_instance_config_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the entity.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes> createTourShiftSegmentConfig(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateTourShiftSegmentConfigMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given &#64;tour_shift_segment_config matching &#64;tour_shift_segment_config_sid for the org sending the request.
     * If the updated Tour Shift Segment Config overlaps another segment or does not fit within the parent Tour Shift Instance Config the update will fail.
     * Errors:
     *   - grpc.Invalid: the request data is invalid or the resulting update would result in a conflict.
     *   - grpc.NotFound: the &#64;tour_shift_instance_config_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when updating the entity.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes> updateTourShiftSegmentConfig(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateTourShiftSegmentConfigMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the Tour Shift Segment Configs belonging to &#64;tour_shift_instance_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the Tour Shift Segment Configs.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes> listTourShiftSegmentConfigs(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListTourShiftSegmentConfigsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the Tour Shift Segment Configs associated with the given &#64;tour_shift_segment_config_sids for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the Tour Shift Segment Configs.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes> deleteTourShiftSegmentConfigs(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteTourShiftSegmentConfigsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given &#64;tour_agent_collection for the org sending the request and return the &#64;tour_agent_collection_sid.
     * The &#64;wfm_agent_sids will be ignored and will not be created through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: the first_week_pattern_number for &#64;tour_pattern_sid is already in use by another tour agent collection.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when creating the entity.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes> createTourAgentCollection(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateTourAgentCollectionMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given &#64;tour_agent_collection matching the &#64;tour_agent_collection_sid for the org sending the request.
     * The &#64;wfm_agent_sids will be ignored and will not be updated through this endpoint.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.AlreadyExists: the first_week_pattern_number for &#64;tour_pattern_sid is already in use by another tour agent collection.
     *   - grpc.NotFound: the given &#64;tour_pattern_sid does not exist for the org sending the request.
     *   - grpc.Internal: error occurs when updating the entity.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes> updateTourAgentCollection(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateTourAgentCollectionMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the Tour Agent Collections belonging to &#64;tour_pattern_sid for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes> listTourAgentCollections(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListTourAgentCollectionsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the Tour Agent collections matching &#64;tour_agent_collection_sids for the org sending the request.
     * Any existing associations with WFM Agent Sids will be deleted as well.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when deleting the tour agent collections.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes> deleteTourAgentCollections(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteTourAgentCollectionsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates an assocation between the &#64;tour_agent_collection_sid and the &#64;wfm_agent_sids for the org sending the request.
     * If there is already an association between any of the &#64;wfm_agent_sids and the Tour Pattern that &#64;tour_agent_collection_sid belongs to, the method will fail and no associations will be created.
     * Errors:
     *   - grpc.Invalid: the request data is invalid
     *   - grpc.AlreadyExists: an association already exists for at least one SID in &#64;wfm_agent_sids.
     *   - grpc.Internal: error occurs when creating the association.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes> createTourAgentCollectionWFMAgents(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateTourAgentCollectionWFMAgentsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists the WFM Agent SIDs belonging to &#64;tour_agent_collection_sids for the org sending the request.
     * The resulting sids will be returned in &#64;wfm_agent_pairings each containing an &#64;agent_collection_sid and &#64;wfm_agent_sids.
     * If no agents are found for a sid in the given &#64;tour_agent_collection_sids, that &#64;agent_collection_sid will have an empty slice in &#64;wfm_agent_sids.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes> listTourAgentCollectionWFMAgents(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListTourAgentCollectionWFMAgentsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes association between the &#64;wfm_agent_sids and &#64;tour_agent_collection_sid for the org sending the request.
     * If no &#64;wfm_agent_sids are provided, all existing &#64;wfm_agent_sids for the given &#64;tour_agent_collection_sid will be deleted.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: there are no WFM Agent associations to delete for &#64;tour_agent_collection_sid.
     *   - grpc.Internal: error occurs when getting the tour agent collections.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes> deleteTourAgentCollectionWFMAgents(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteTourAgentCollectionWFMAgentsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Generates a list of tour week patterns for &#64;target_shift_template_sid and the org sending the request.
     * Sets the member_tour_week_patterns with a tour week pattern for each of the &#64;num_weeks_in_tour.
     * Each of the tour week patterns will be set with tour shift instances and segment configs based on
     *   the forecasted call data over the next &#64;num_weeks_in_tour, starting on the next Monday.
     * The returned data will not be persisted. This method will not effect any existing tour week patterns in the database.
     * The &#64;tour_week_patterns returned by this method are intended to replace, not append, all currenly existing tour week patterns for &#64;target_shift_template_sid, once persisted.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.NotFound: there is no call center node or &#64;shift_template_sid associated with &#64;schedule_scenario_sid.
     *   - grpc.Internal: error occurs when generating the tour week patterns.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes> generateTourWeekPatterns(
        com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getGenerateTourWeekPatternsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Returns a list of &#64;wfm_agent_sids that are suitable for replacing &#64;wfm_agent_sid_to_replace for the given parameters and the org sending the request.
     * Only enforces that skill proficiencies are covered by the individual wfm agents, does not enforce constraint rules.
     * If &#64;skip_skill_proficiency_sort is False, the agents will be returned in order of cumulative skill proficiency towards the required skills.
     * If &#64;include_skill_mismatches is True, the agents will be included even if they do not include all of the required skills for the shifts being replaced.
     * If &#64;skip_force_same_agent_groups is False, the agents will only be returned if they belong to every agent group that &#64;wfm_agent_sid_to_replace is a member of. Otherwise, this check will be skipped.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when determinining which agents are valid.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes> listValidAgentsForReplacement(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListValidAgentsForReplacementMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Replaces &#64;wfm_agent_sid_to_remove with &#64;wfm_agent_sid_to_add for the given parameters and the org sending the request.
     * If &#64;skip_overlapping_shifts, shifts with an overlap conflict will be skipped, otherwise overlap conflicts will cause a diagnostic to be returned.
     * Does not enforce skill proficiencies. To check skill proficiencies for shift replacement use ListValidAgentsForReplacement.
     * DEPRECATED as of Jan/22/2024 - Use ReplaceAgentOnScheduleV1 instead.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when replacing the &#64;wfm_agent_sid_to_remove.
     * </pre>
     */
    @java.lang.Deprecated
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> replaceAgentOnSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getReplaceAgentOnScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Replaces &#64;wfm_agent_sid_to_remove with &#64;wfm_agent_sid_to_add for the given parameters and the org sending the request.
     * If &#64;skip_overlapping_shifts, shifts with an overlap conflict will be skipped, otherwise overlap conflicts will cause a diagnostic to be returned.
     * Does not enforce skill proficiencies. To check skill proficiencies for shift replacement use ListValidAgentsForReplacement.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when replacing the &#64;wfm_agent_sid_to_remove.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes> replaceAgentOnScheduleV1(
        com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getReplaceAgentOnScheduleV1Method(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Removes the &#64;wfm_agent_sid from &#64;schedule_selector over &#64;datetime_range for the org sending the request.
     * Creates a new unassigned agent with the same active agent group associations as &#64;wfm_agent_sid for &#64;schedule_scenario_sid.
     * The unassigned agent will be assigned to shifts belonging to &#64;wfm_agent_sid, returning newly created unassigned agent's SID and the updated shifts.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the unassigned agent or updating the shifts.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse> removeAgentFromSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getRemoveAgentFromScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates an agent leave petition to request time off for the &#64;wfm_agent_sid over the &#64;requested_datetime_ranges for the org sending the request.
     * The &#64;petition_comment must be set with a value.
     * The &#64;requested_datetime_ranges may not overlap each other.
     * The number of working hours requested off should be set in &#64;requested_hours_off.
     * The &#64;requested_hours_off does not need to relate directly to the datetime range being requested off,
     *   for example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
     * The usage of &#64;requested_hours_off hours will depend on org policy, but is not yet implemented.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the time off request.
     *   - grpc.NotFound: the &#64;wfm_agent_sid does not exist for the org sending the request.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse> createAgentLeavePetition(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateAgentLeavePetitionMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists agent leave petitions for the &#64;wfm_agent_sids over &#64;datetime_range for the org sending the request.
     * If no &#64;wfm_agent_sids are provided, all agent leave petitions overlapping &#64;datetime_range for the org sending the request will be returned.
     * If no &#64;datetime_range is provided, petitions will be returned across all datetimes.
     * If &#64;include_archived is true, archived agent leave petitions will be returned as well, otherwise archived requests will not be included.
     * If no agent leave petitions are found for the given parameters, an empty slice will be returned.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when listing the agent leave petitions.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse> listAgentLeavePetitions(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListAgentLeavePetitionsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Archives an agent leave petition with the given &#64;agent_leave_petition_id for the org sending the request.
     * If the leave petition has the status of PENDING_PETITION, the petition must be resolved first, or the request will error.
     * If the petition has a status of APPROVED_PETITION and a portion of the petitions &#64;requested_datetime_ranges lies in the future,
     *   the petition may not be archived without being cancelled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the agent leave petition is approved for a future datetime, still pending, or is already archived.
     *   - grpc.Internal: error occurs when archiving the agent leave petition.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse> archiveAgentLeavePetition(
        com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getArchiveAgentLeavePetitionMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Resolves the given &#64;agent_leave_petition_id, setting the given parameters, for the org sending the request.
     * May only resolve leave petitions that currently have a PENDING_PETITION status.
     * May only set the &#64;petition_status to APPROVED_PETITION or DENIED_PETITION.
     * If a petition is approved, time off shifts will be added to the agent's schedule across the requested_datetime_ranges.
     * If &#64;retain_partial_shifts is true, partial shifts overlapping the requested_datetime_ranges will have the remaining portion of the shift retained,
     *    if the remaining portion of the shift is at least 30 minutes in length.
     * If &#64;retain_partial_shifts is false, the entirety of shifts overlapping the requested_datetime_ranges range will be deleted or transfered depending on &#64;replace_with_unassigned_agent.
     * If &#64;replace_with_unassigned_agent is true, an unassigned agent sid will be assigned to the covered shifts instead of deleting them.
     * When &#64;replace_with_unassigned_agent is true, if &#64;retain_partial_shifts is also true, only the portion of the shift in the requested datetime ranges will be transfered.
     * When &#64;replace_with_unassigned_agent is true, if &#64;retain_partial_shifts is false, the entirety of any overlapping shifts will be transfered.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is not pending approval.
     *   - grpc.Internal: error occurs when resolving the agent leave petition, or modifying the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse> resolveAgentLeavePetition(
        com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getResolveAgentLeavePetitionMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Cancels the given &#64;agent_leave_petition_id for the organization sending the request.
     * If &#64;agent_leave_petition_id has a status of APPROVED_PETITION, the agent's schedule will have time off blocks removed,
     *   but any desired shifts must be added by the user after that leave is canceled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is already canceled.
     *   - grpc.Internal: error occurs when canceling the agent leave petition, or removing time off shifts from the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse> cancelAgentLeavePetition(
        com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCancelAgentLeavePetitionMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * A hello world endpoint to test the WFM Adherence App.
     * Returns a string with a hello world message.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse> helloWorldWFMAdherence(
        com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getHelloWorldWFMAdherenceMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * List the real time agent states for published schedule and the org sending the request, starting on the given &#64;start_datetime.
     * If the &#64;end_datetime is set, all agent state sequences will be returned for the range between &#64;start_datetime and &#64;end_datetime.
     * If &#64;end_datetime is not set, the agent state sequences will be returned over a 24 hour period or until the current time, whichever is shorter.
     * Errors:
     *   - grpc.Invalid: the &#64;start_datetime is invalid or beyond the current datetime.
     *   - grpc.Internal: error occurs when listing the agent states.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse> listAgentStatesForDay(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListAgentStatesForDayMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * List org-level RealTimeManagementStates.
     * Errors:
     *   - grpc.Invalid: on invalid input.
     *   - grpc.Internal: on unexpected error.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse> listRealTimeManagementStates(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListRealTimeManagementStatesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the agent states for the given &#64;wfm_agent_sids from the given &#64;start_datetime to the &#64;end_datetime
     * or the current time if not set (start time not inclusive, end time inclusive).
     * Agent states will be grouped by wfm_agent_sid and ordered by date in ascending order.
     * If zero states are found for a given agent, it will not be included in the resulting map.
     * Errors:
     *   - grpc.Invalid: arguments in the request are invalid.
     *   - grpc.Internal: error occurs when getting the states.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse> listAdherenceAgentStates(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListAdherenceAgentStatesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Sets the given &#64;state to be associated with the given &#64;rgba_color_id for the org sending the request.
     * Errors:
     *   - grpc.Internal: error upserting the real time management state color or returning the newly created state color.
     *   - grpc.NotFound: the given &#64;rgba_color_id does not exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse> upsertRealTimeManagementStateColor(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpsertRealTimeManagementStateColorMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * List org assigned colors for real-time management states.
     * Any states that do not have an assigned state color will have their system default state color returned instead.
     * Errors:
     *  - grpc.Internal: error occurs when listing the real-time management state colors.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse> listRealTimeManagementStateColors(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListRealTimeManagementStateColorsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the state color for the given &#64;state for the org sending the request.
     * The state will be associated with the system default color.
     * Errors:
     *  - grpc.Invalid: the &#64;state is invalid or is not associated with an &#64;rbg_color_id.
     *  - grpc.Internal: error occurs when deleting the state color fails.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse> deleteRealTimeManagementStateColor(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteRealTimeManagementStateColorMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given &#64;color for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;color are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;color or an rgba with &#64;color.name already exists.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse> createRgbaColor(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateRgbaColorMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists all rbga colors for the org sending the request.
     * Errors:
     *   - grpc.Internal: error occurs when listing the &#64;colors.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse> listRgbaColors(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListRgbaColorsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given &#64;color for the org sending the request.
     * Returns the updated rgba color after it has been updated.
     * Errors:
     *   - grpc.Internal: error occurs when updating the rgba color, or getting the updated color.
     *   - grpc.NotFound: the color with &#64;color.rgba_color_id does not exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse> updateRgbaColor(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateRgbaColorMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Delete the rgba color with the &#64;rgba_color_id for the org sending the request.
     * Deletes any real time management state colors that are using &#64;rgba_color_id, leaving them with their default colors.option
     * Errors:
     *  - grpc.Invalid: the &#64;rgba_color_id is invalid or does not exist.
     *  - grpc.Internal: error occurs when deleting the rgba color or real time management state colors.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse> deleteRgbaColor(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteRgbaColorMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given adherence &#64;notification_config for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;notification_config.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse> createAdherenceRuleNotificationConfig(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateAdherenceRuleNotificationConfigMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given adherence &#64;notification_config for the org sending the request.
     * Fields that can be updated are: name.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config are invalid.
     *   - grpc.NotFound: the given notification config is not found.
     *   - grpc.Internal: error occurs when updating the given &#64;notification_config.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse> updateAdherenceRuleNotificationConfig(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateAdherenceRuleNotificationConfigMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given adherence &#64;notification_config_entry for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config_entry are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;notification_config_entry.
     *   - grpc.NotFound: notification config with the &#64;notification_config_sid does not exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse> createAdherenceRuleNotificationConfigEntry(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateAdherenceRuleNotificationConfigEntryMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given adherence &#64;notification_config_entry for the org sending the request.
     * Fields that can be updated are: recipient_user_id, notification_medium, seconds_to_wait_for_no_response.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;notification_config_entry are invalid.
     *   - grpc.NotFound: the given notification config entry is not found.
     *   - grpc.Internal: error occurs when updating the given &#64;notification_config_entry.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse> updateAdherenceRuleNotificationConfigEntry(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateAdherenceRuleNotificationConfigEntryMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the notification config entry that has the given &#64;adherence_rule_notification_config_entry_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the given &#64;adherence_rule_notification_config_entry_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_rule_notification_config_entry_id.
     *   - grpc.NotFound: notification config with the &#64;adherence_rule_notification_config_entry_id does not exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse> deleteAdherenceRuleNotificationConfigEntry(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteAdherenceRuleNotificationConfigEntryMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets all adherence rule &#64;notification_configs for the org sending the request.
     * Configs will include their respective entries.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the notification configs.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse> listAdherenceRuleNotificationConfigs(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListAdherenceRuleNotificationConfigsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given adherence departmental &#64;rule for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse> createAdherenceDepartmentalRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateAdherenceDepartmentalRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given adherence departmental &#64;rule for the org sending the request.
     * Fields that can be updated are: name, selected_entity_id, selected_entity_type, rule_requirement_type,
     * rule_range, custom_range, adherence_rule_notification_config_id.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.NotFound: departmental rule clause with &#64;adherence_departmental_rule_clause_id does not exist.
     *   - grpc.Internal: error occurs when updating the given &#64;rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse> updateAdherenceDepartmentalRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateAdherenceDepartmentalRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given adherence departmental rule &#64;clause for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;clause.
     *   - grpc.NotFound: departmental rule with the &#64;departmetal_rule_sid does not exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse> createAdherenceDepartmentalRuleClause(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateAdherenceDepartmentalRuleClauseMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given adherence departmental rule &#64;clause for the org sending the request.
     * Fields that can be updated are: action_type, condition, amount, unit, per_amount, per_unit.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when updating the given &#64;clause.
     *   - grpc.NotFound: departmental rule with the with &#64;adherence_departmental_rule_clause_id does not exist to update.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse> updateAdherenceDepartmentalRuleClause(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateAdherenceDepartmentalRuleClauseMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the departmental rule clause that has the given &#64;adherence_departmental_rule_clause_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the value of the given &#64;adherence_departmental_rule_clause_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_departmental_rule_clause_id.
     *   - grpc.NotFound: departmental rule with the &#64;adherence_departmental_rule_clause_id does not exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse> deleteAdherenceDepartmentalRuleClause(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteAdherenceDepartmentalRuleClauseMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets all adherence departmental &#64;rules for the org sending the request.
     * Rules will include their respective clauses.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the rules.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse> listAdherenceDepartmentalRules(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListAdherenceDepartmentalRulesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given adherence agent &#64;rule for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse> createAdherenceAgentRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateAdherenceAgentRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given adherence agent &#64;rule for the org sending the request.
     * Fields that can be updated are: name, selected_entity_id, selected_entity_type, rule_requirement_type, adherence_rule_notification_config_id.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;rule are invalid.
     *   - grpc.NotFound: agent rule clause with &#64;adherence_agent_rule_clause_id does not exist.
     *   - grpc.Internal: error occurs when updating the given &#64;rule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse> updateAdherenceAgentRule(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateAdherenceAgentRuleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates the given adherence agent rule &#64;clause for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when creating the given &#64;clause.
     *   - grpc.NotFound: agent rule with the &#64;agent_rule_sid does not exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse> createAdherenceAgentRuleClause(
        com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getCreateAdherenceAgentRuleClauseMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Updates the given adherence agent rule &#64;clause for the org sending the request.
     * Fields that can be updated are: action_type, condition, amount, unit.
     * Errors:
     *   - grpc.Invalid: the values on the given &#64;clause are invalid.
     *   - grpc.Internal: error occurs when updating the given &#64;clause.
     *   - grpc.NotFound: agent rule with the with &#64;adherence_agent_rule_clause_id does not exist to update.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse> updateAdherenceAgentRuleClause(
        com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getUpdateAdherenceAgentRuleClauseMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets all adherence agent &#64;rules for the org sending the request.
     * Rules will include their respective clauses.
     * Errors:
     *   - grpc.Invalid: the request arguments are invalid.
     *   - grpc.Internal: error occurs when getting the rules.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse> listAdherenceAgentRules(
        com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getListAdherenceAgentRulesMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Deletes the agent rule clause that has the given &#64;adherence_agent_rule_clause_id for the org sending the request.
     * Errors:
     *   - grpc.Invalid: the value of the given &#64;adherence_agent_rule_clause_id is invalid.
     *   - grpc.Internal: error occurs when deleting the given &#64;adherence_agent_rule_clause_id.
     *   - grpc.NotFound: departmental rule with the &#64;adherence_agent_rule_clause_id does not exist.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse> deleteAdherenceAgentRuleClause(
        com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getDeleteAdherenceAgentRuleClauseMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Gets the published schedule for the corresponding &#64;datetime_range for the agent and org sending the request.
     * Errors:
     *   - grpc.Invalid: the &#64;datetime_range, &#64;metric_types are invalid.
     *   - grpc.Internal: error occurs when getting the published schedule.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse> agentGetSchedule(
        com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getAgentGetScheduleMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Lists agent leave petitions over the &#64;datetime_range for the agent and org sending the request.
     * If no &#64;datetime_range is provided, petitions will be returned across all datetimes.
     * If &#64;include_archived is true, archived agent leave petitions will be returned as well, otherwise archived requests will not be included.
     * If no agent leave petitions are found for the given parameters, an empty list will be returned.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when listing the agent leave petitions.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse> agentListLeavePetitions(
        com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getAgentListLeavePetitionsMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Creates an agent leave petition to request time off over the &#64;requested_datetime_ranges for the agent and org sending the request.
     * The &#64;petition_comment must be set with a value.
     * The &#64;requested_datetime_ranges may not overlap each other.
     * The number of working hours requested off should be set in &#64;requested_hours_off.
     * The &#64;requested_hours_off does not need to relate directly to the datetime range being requested off,
     *   for example in the case where a 14 hour schedulable range is being taken off but 8 hours of work will be paid out with PTO.
     * The usage of &#64;requested_hours_off hours will depend on org policy, but is not yet implemented.
     * Errors:
     *   - grpc.Invalid: the request data is invalid.
     *   - grpc.Internal: error occurs when creating the time off request.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse> agentCreateLeavePetition(
        com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getAgentCreateLeavePetitionMethod(), getCallOptions()), request);
    }

    /**
     * <pre>
     * Cancels the given &#64;agent_leave_petition_id for the agent and organization sending the request.
     * If &#64;agent_leave_petition_id has a status of APPROVED_PETITION, the agent's schedule will have time off blocks removed,
     *   but any desired shifts must be added by the user after that leave is canceled.
     * Errors:
     *   - grpc.Invalid: the request data is invalid, the &#64;agent_leave_petition_id is already canceled.
     *   - grpc.Internal: error occurs when canceling the agent leave petition, or removing time off shifts from the agent's schedule.
     *   - grpc.NotFound: the &#64;agent_leave_petition_id does not exist for the org sending the request.
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse> agentCancelLeavePetition(
        com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest request) {
      return io.grpc.stub.ClientCalls.futureUnaryCall(
          getChannel().newCall(getAgentCancelLeavePetitionMethod(), getCallOptions()), request);
    }
  }

  private static final int METHODID_PERFORM_INITIAL_CLIENT_SETUP = 0;
  private static final int METHODID_CREATE_INITIAL_DEMO_ACTIVITIES = 1;
  private static final int METHODID_LIST_SKILL_PROFILES = 2;
  private static final int METHODID_UPDATE_SKILL_PROFILE = 3;
  private static final int METHODID_UPDATE_SKILL_PROFILE_PROFICIENCIES = 4;
  private static final int METHODID_GET_SKILL_PROFILE = 5;
  private static final int METHODID_RESYNC_SKILL_PROFILES = 6;
  private static final int METHODID_GET_LAST_SKILL_PROFILE_RESYNC_DATE = 7;
  private static final int METHODID_UPSERT_FORECASTING_PARAMETERS = 8;
  private static final int METHODID_GET_FORECASTING_PARAMETERS = 9;
  private static final int METHODID_GET_CLIENT_HISTORY_CACHE_INFO = 10;
  private static final int METHODID_LIST_HISTORICAL_DATA = 11;
  private static final int METHODID_UPSERT_HISTORICAL_DATA_DELTA = 12;
  private static final int METHODID_UPSERT_HISTORICAL_DATA_DELTAS = 13;
  private static final int METHODID_LIST_SKILLS = 14;
  private static final int METHODID_BUILD_CALL_PROFILE_TEMPLATE_FOR_SKILL_PROFILE = 15;
  private static final int METHODID_BUILD_CALL_PROFILE_TEMPLATE = 16;
  private static final int METHODID_CREATE_INACTIVE_SKILL_PROFILE_MAPPING = 17;
  private static final int METHODID_GET_AVAILABLE_REGRESSION_FORECASTER_MODEL_TYPES = 18;
  private static final int METHODID_DISCONNECT_INACTIVE_SKILL_PROFILE_MAPPING = 19;
  private static final int METHODID_CREATE_SKILL_PROFILE_GROUP = 20;
  private static final int METHODID_UPDATE_SKILL_PROFILE_GROUP = 21;
  private static final int METHODID_LIST_SKILL_PROFILE_GROUPS = 22;
  private static final int METHODID_UPDATE_SKILL_PROFILE_GROUP_ASSOCIATIONS = 23;
  private static final int METHODID_DELETE_HISTORICAL_DATA_DELTAS = 24;
  private static final int METHODID_LIST_TOP_SKILL_PROFILES = 25;
  private static final int METHODID_GET_SKILL_PROFILES_COUNT = 26;
  private static final int METHODID_BUILD_PROFILE_FORECAST_BY_INTERVAL = 27;
  private static final int METHODID_BUILD_PROFILE_FORECAST_BY_INTERVAL_WITH_STATS = 28;
  private static final int METHODID_UPSERT_PROFILE_FORECAST = 29;
  private static final int METHODID_CREATE_CALL_PROFILE_TEMPLATE = 30;
  private static final int METHODID_DELETE_CALL_PROFILE_TEMPLATE = 31;
  private static final int METHODID_CREATE_REGRESSION_TEMPLATE = 32;
  private static final int METHODID_DELETE_REGRESSION_TEMPLATE = 33;
  private static final int METHODID_LIST_REGRESSION_TEMPLATES = 34;
  private static final int METHODID_LIST_FORECAST_INTERVALS_FOR_SKILL_PROFILE = 35;
  private static final int METHODID_LIST_FORECAST_INTERVALS = 36;
  private static final int METHODID_LIST_FORECAST_INTERVALS_V2 = 37;
  private static final int METHODID_BUILD_REGRESSION_FORECAST_BY_INTERVAL = 38;
  private static final int METHODID_BUILD_REGRESSION_FORECAST_BY_INTERVAL_WITH_STATS = 39;
  private static final int METHODID_LIST_CALL_PROFILE_TEMPLATES = 40;
  private static final int METHODID_UPSERT_REGRESSION_FORECAST = 41;
  private static final int METHODID_UPSERT_FORECAST_DATA_DELTA = 42;
  private static final int METHODID_UPSERT_FORECAST_DATA_DELTAS = 43;
  private static final int METHODID_DELETE_FORECAST_INTERVALS = 44;
  private static final int METHODID_LIST_HISTORICAL_DATA_FOR_ALL_SKILL_PROFILES = 45;
  private static final int METHODID_BUILD_DOWAND_MOYPROFILES = 46;
  private static final int METHODID_CALCULATE_TRAINING_DATA_AVERAGES_FOR_SKILL_PROFILE = 47;
  private static final int METHODID_UPDATE_SKILL_PROFILE_AVERAGES_USING_HISTORICAL_DATA = 48;
  private static final int METHODID_UPDATE_CALL_CENTER_NODE = 49;
  private static final int METHODID_CREATE_CLIENT_NODE = 50;
  private static final int METHODID_UPDATE_CLIENT_NODE = 51;
  private static final int METHODID_CREATE_LOCATION_NODE = 52;
  private static final int METHODID_UPDATE_LOCATION_NODE = 53;
  private static final int METHODID_CREATE_PROGRAM_NODE = 54;
  private static final int METHODID_UPDATE_PROGRAM_NODE = 55;
  private static final int METHODID_LIST_PROGRAM_NODES_BY_SID = 56;
  private static final int METHODID_CREATE_CONSTRAINT_RULE = 57;
  private static final int METHODID_UPDATE_CONSTRAINT_RULE = 58;
  private static final int METHODID_DELETE_CONSTRAINT_RULE = 59;
  private static final int METHODID_CREATE_NON_SKILL_ACTIVITY = 60;
  private static final int METHODID_UPDATE_NON_SKILL_ACTIVITY = 61;
  private static final int METHODID_LIST_NON_SKILL_ACTIVITIES = 62;
  private static final int METHODID_LIST_NON_SKILL_ACTIVITY_ASSOCIATIONS = 63;
  private static final int METHODID_LIST_CANDIDATE_SCHEDULING_ACTIVITIES = 64;
  private static final int METHODID_LIST_SCHEDULING_ACTIVITIES = 65;
  private static final int METHODID_GET_ON_CALL_SCHEDULING_ACTIVITY = 66;
  private static final int METHODID_LIST_PATTERNS_FOR_SCHEDULING_ACTIVITY_CLASSIFICATIONS = 67;
  private static final int METHODID_GET_TIME_OFF_SCHEDULING_ACTIVITY = 68;
  private static final int METHODID_CREATE_AGENT_GROUP = 69;
  private static final int METHODID_LIST_AGENT_SCHEDULE_GROUPS = 70;
  private static final int METHODID_UPDATE_AGENT_GROUP = 71;
  private static final int METHODID_CREATE_UNASSIGNED_WFMAGENT = 72;
  private static final int METHODID_UPDATE_WFMAGENT = 73;
  private static final int METHODID_LIST_ALL_WFMAGENTS = 74;
  private static final int METHODID_LIST_CANDIDATE_WFMAGENTS = 75;
  private static final int METHODID_LIST_UNGROUPED_WFMAGENTS = 76;
  private static final int METHODID_LIST_WFMAGENT_SIDS = 77;
  private static final int METHODID_LIST_UNASSIGNED_WFMAGENTS = 78;
  private static final int METHODID_LIST_WFMAGENTS_ASSOCIATED_WITH_AGENT_GROUP = 79;
  private static final int METHODID_CREATE_WFMAGENT_MEMBERSHIPS = 80;
  private static final int METHODID_COPY_WFMAGENT_MEMBERSHIPS = 81;
  private static final int METHODID_DELETE_WFMAGENT_MEMBERSHIPS = 82;
  private static final int METHODID_DELETE_WFMAGENTS_MEMBERSHIPS = 83;
  private static final int METHODID_REMOVE_AGENT_FROM_FUTURE_SHIFTS = 84;
  private static final int METHODID_BUILD_AGENT_DIAGNOSTICS = 85;
  private static final int METHODID_CREATE_SHIFT_TEMPLATE = 86;
  private static final int METHODID_UPDATE_SHIFT_TEMPLATE = 87;
  private static final int METHODID_LIST_SHIFT_TEMPLATES_BY_SIDS = 88;
  private static final int METHODID_BUILD_SHIFT_TEMPLATE_DIAGNOSTICS = 89;
  private static final int METHODID_CREATE_PLACEMENT_RULE = 90;
  private static final int METHODID_UPDATE_PLACEMENT_RULE = 91;
  private static final int METHODID_DELETE_PLACEMENT_RULE = 92;
  private static final int METHODID_CREATE_OPEN_TIMES_PATTERN = 93;
  private static final int METHODID_UPDATE_OPEN_TIMES_PATTERN = 94;
  private static final int METHODID_DELETE_OPEN_TIMES_PATTERN = 95;
  private static final int METHODID_GET_OPEN_TIMES_BITMAPS = 96;
  private static final int METHODID_LIST_OPEN_DATE_RANGES_FOR_NODE_OPEN_TIMES_BITMAPS = 97;
  private static final int METHODID_CREATE_AGENT_AVAILABILITY_PATTERN = 98;
  private static final int METHODID_UPDATE_AGENT_AVAILABILITY_PATTERN = 99;
  private static final int METHODID_DELETE_AGENT_AVAILABILITY_PATTERN = 100;
  private static final int METHODID_GET_AVAILABILITY_BITMAPS = 101;
  private static final int METHODID_UPSERT_NON_SKILL_ACTIVITY_ASSOCIATION = 102;
  private static final int METHODID_CREATE_SKILL_PROFICIENCIES = 103;
  private static final int METHODID_UPDATE_SKILL_PROFICIENCIES = 104;
  private static final int METHODID_DELETE_SKILL_PROFICIENCY = 105;
  private static final int METHODID_COPY_SCENARIO = 106;
  private static final int METHODID_CREATE_SCHEDULE_SCENARIO_WITH_NODES = 107;
  private static final int METHODID_UPDATE_SCHEDULE_SCENARIO = 108;
  private static final int METHODID_LIST_CONFIG_ENTITIES = 109;
  private static final int METHODID_DELETE_SHIFT_INSTANCES = 110;
  private static final int METHODID_BUILD_NODE_DIAGNOSTICS = 111;
  private static final int METHODID_BUILD_GLOBAL_DIAGNOSTICS = 112;
  private static final int METHODID_GET_PUBLISHED_SCHEDULE = 113;
  private static final int METHODID_GET_PUBLISHED_SCHEDULE_REQUIRED_CALLS = 114;
  private static final int METHODID_GET_DRAFT_SCHEDULE_REQUIRED_CALLS = 115;
  private static final int METHODID_CREATE_DRAFT_SCHEDULE = 116;
  private static final int METHODID_UPDATE_DRAFT_SCHEDULE = 117;
  private static final int METHODID_BUILD_DRAFT_SCHEDULE = 118;
  private static final int METHODID_POLL_BUILD_IN_PROGRESS = 119;
  private static final int METHODID_CANCEL_BUILD_IN_PROGRESS = 120;
  private static final int METHODID_PUBLISH_DRAFT_SCHEDULE = 121;
  private static final int METHODID_RESET_DRAFT_SCHEDULE = 122;
  private static final int METHODID_GET_DRAFT_SCHEDULE = 123;
  private static final int METHODID_LIST_DRAFT_SCHEDULES = 124;
  private static final int METHODID_CLEAR_SCHEDULE = 125;
  private static final int METHODID_DELETE_DRAFT_SCHEDULE = 126;
  private static final int METHODID_LIST_SHIFT_INSTANCES_BY_SID = 127;
  private static final int METHODID_COPY_SCHEDULE_TO_SCHEDULE = 128;
  private static final int METHODID_CREATE_SHIFT_INSTANCE = 129;
  private static final int METHODID_CREATE_SHIFT_INSTANCE_V2 = 130;
  private static final int METHODID_CREATE_SHIFT_INSTANCE_WITH_SEGMENTS = 131;
  private static final int METHODID_SPLIT_SHIFT_INSTANCE = 132;
  private static final int METHODID_SWAP_SHIFT_INSTANCES = 133;
  private static final int METHODID_UPDATE_SHIFT_INSTANCE = 134;
  private static final int METHODID_UPDATE_SHIFT_INSTANCE_V2 = 135;
  private static final int METHODID_UPDATE_SHIFT_INSTANCE_WITH_SEGMENTS = 136;
  private static final int METHODID_COPY_SHIFT_INSTANCES_TO_SCHEDULE = 137;
  private static final int METHODID_LIST_SHIFT_INSTANCE_SIDS_FOR_AGENT = 138;
  private static final int METHODID_LIST_SHIFT_INSTANCE_SIDS_FOR_SCHEDULE = 139;
  private static final int METHODID_LIST_SHIFT_SEGMENTS_BY_SHIFT_INSTANCE_SIDS = 140;
  private static final int METHODID_SET_SCHEDULING_TARGET = 141;
  private static final int METHODID_GET_SCHEDULING_TARGET = 142;
  private static final int METHODID_DELETE_SCHEDULING_TARGET = 143;
  private static final int METHODID_GET_DEFAULT_SCHEDULING_TARGET = 144;
  private static final int METHODID_SET_DEFAULT_SCHEDULING_TARGET = 145;
  private static final int METHODID_GET_PERFORMANCE_METRICS = 146;
  private static final int METHODID_LIST_REQUIRED_CALLS_INTERVALS = 147;
  private static final int METHODID_CREATE_TOUR_PATTERN = 148;
  private static final int METHODID_GET_TOUR_PATTERN_DIAGNOSTICS = 149;
  private static final int METHODID_UPSERT_TOUR_PATTERN_WITH_MEMBERS = 150;
  private static final int METHODID_GET_TOUR_PATTERN = 151;
  private static final int METHODID_GET_TOUR_PATTERN_WITH_MEMBERS = 152;
  private static final int METHODID_DELETE_TOUR_PATTERN = 153;
  private static final int METHODID_CREATE_TOUR_WEEK_PATTERN = 154;
  private static final int METHODID_LIST_TOUR_WEEK_PATTERNS = 155;
  private static final int METHODID_DELETE_TOUR_WEEK_PATTERNS = 156;
  private static final int METHODID_CREATE_TOUR_SHIFT_INSTANCE_CONFIG = 157;
  private static final int METHODID_UPDATE_TOUR_SHIFT_INSTANCE_CONFIG = 158;
  private static final int METHODID_LIST_TOUR_SHIFT_INSTANCE_CONFIGS = 159;
  private static final int METHODID_DELETE_TOUR_SHIFT_INSTANCE_CONFIGS = 160;
  private static final int METHODID_CREATE_TOUR_SHIFT_SEGMENT_CONFIG = 161;
  private static final int METHODID_UPDATE_TOUR_SHIFT_SEGMENT_CONFIG = 162;
  private static final int METHODID_LIST_TOUR_SHIFT_SEGMENT_CONFIGS = 163;
  private static final int METHODID_DELETE_TOUR_SHIFT_SEGMENT_CONFIGS = 164;
  private static final int METHODID_CREATE_TOUR_AGENT_COLLECTION = 165;
  private static final int METHODID_UPDATE_TOUR_AGENT_COLLECTION = 166;
  private static final int METHODID_LIST_TOUR_AGENT_COLLECTIONS = 167;
  private static final int METHODID_DELETE_TOUR_AGENT_COLLECTIONS = 168;
  private static final int METHODID_CREATE_TOUR_AGENT_COLLECTION_WFMAGENTS = 169;
  private static final int METHODID_LIST_TOUR_AGENT_COLLECTION_WFMAGENTS = 170;
  private static final int METHODID_DELETE_TOUR_AGENT_COLLECTION_WFMAGENTS = 171;
  private static final int METHODID_GENERATE_TOUR_WEEK_PATTERNS = 172;
  private static final int METHODID_LIST_VALID_AGENTS_FOR_REPLACEMENT = 173;
  private static final int METHODID_REPLACE_AGENT_ON_SCHEDULE = 174;
  private static final int METHODID_REPLACE_AGENT_ON_SCHEDULE_V1 = 175;
  private static final int METHODID_REMOVE_AGENT_FROM_SCHEDULE = 176;
  private static final int METHODID_CREATE_AGENT_LEAVE_PETITION = 177;
  private static final int METHODID_LIST_AGENT_LEAVE_PETITIONS = 178;
  private static final int METHODID_ARCHIVE_AGENT_LEAVE_PETITION = 179;
  private static final int METHODID_RESOLVE_AGENT_LEAVE_PETITION = 180;
  private static final int METHODID_CANCEL_AGENT_LEAVE_PETITION = 181;
  private static final int METHODID_HELLO_WORLD_WFMADHERENCE = 182;
  private static final int METHODID_LIST_AGENT_STATES_FOR_DAY = 183;
  private static final int METHODID_LIST_REAL_TIME_MANAGEMENT_STATES = 184;
  private static final int METHODID_LIST_ADHERENCE_AGENT_STATES = 185;
  private static final int METHODID_UPSERT_REAL_TIME_MANAGEMENT_STATE_COLOR = 186;
  private static final int METHODID_LIST_REAL_TIME_MANAGEMENT_STATE_COLORS = 187;
  private static final int METHODID_DELETE_REAL_TIME_MANAGEMENT_STATE_COLOR = 188;
  private static final int METHODID_CREATE_RGBA_COLOR = 189;
  private static final int METHODID_LIST_RGBA_COLORS = 190;
  private static final int METHODID_UPDATE_RGBA_COLOR = 191;
  private static final int METHODID_DELETE_RGBA_COLOR = 192;
  private static final int METHODID_CREATE_ADHERENCE_RULE_NOTIFICATION_CONFIG = 193;
  private static final int METHODID_UPDATE_ADHERENCE_RULE_NOTIFICATION_CONFIG = 194;
  private static final int METHODID_CREATE_ADHERENCE_RULE_NOTIFICATION_CONFIG_ENTRY = 195;
  private static final int METHODID_UPDATE_ADHERENCE_RULE_NOTIFICATION_CONFIG_ENTRY = 196;
  private static final int METHODID_DELETE_ADHERENCE_RULE_NOTIFICATION_CONFIG_ENTRY = 197;
  private static final int METHODID_LIST_ADHERENCE_RULE_NOTIFICATION_CONFIGS = 198;
  private static final int METHODID_CREATE_ADHERENCE_DEPARTMENTAL_RULE = 199;
  private static final int METHODID_UPDATE_ADHERENCE_DEPARTMENTAL_RULE = 200;
  private static final int METHODID_CREATE_ADHERENCE_DEPARTMENTAL_RULE_CLAUSE = 201;
  private static final int METHODID_UPDATE_ADHERENCE_DEPARTMENTAL_RULE_CLAUSE = 202;
  private static final int METHODID_DELETE_ADHERENCE_DEPARTMENTAL_RULE_CLAUSE = 203;
  private static final int METHODID_LIST_ADHERENCE_DEPARTMENTAL_RULES = 204;
  private static final int METHODID_CREATE_ADHERENCE_AGENT_RULE = 205;
  private static final int METHODID_UPDATE_ADHERENCE_AGENT_RULE = 206;
  private static final int METHODID_CREATE_ADHERENCE_AGENT_RULE_CLAUSE = 207;
  private static final int METHODID_UPDATE_ADHERENCE_AGENT_RULE_CLAUSE = 208;
  private static final int METHODID_LIST_ADHERENCE_AGENT_RULES = 209;
  private static final int METHODID_DELETE_ADHERENCE_AGENT_RULE_CLAUSE = 210;
  private static final int METHODID_AGENT_GET_SCHEDULE = 211;
  private static final int METHODID_AGENT_LIST_LEAVE_PETITIONS = 212;
  private static final int METHODID_AGENT_CREATE_LEAVE_PETITION = 213;
  private static final int METHODID_AGENT_CANCEL_LEAVE_PETITION = 214;

  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final AsyncService serviceImpl;
    private final int methodId;

    MethodHandlers(AsyncService serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_PERFORM_INITIAL_CLIENT_SETUP:
          serviceImpl.performInitialClientSetup((com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse>) responseObserver);
          break;
        case METHODID_CREATE_INITIAL_DEMO_ACTIVITIES:
          serviceImpl.createInitialDemoActivities((com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse>) responseObserver);
          break;
        case METHODID_LIST_SKILL_PROFILES:
          serviceImpl.listSkillProfiles((com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes>) responseObserver);
          break;
        case METHODID_UPDATE_SKILL_PROFILE:
          serviceImpl.updateSkillProfile((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes>) responseObserver);
          break;
        case METHODID_UPDATE_SKILL_PROFILE_PROFICIENCIES:
          serviceImpl.updateSkillProfileProficiencies((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes>) responseObserver);
          break;
        case METHODID_GET_SKILL_PROFILE:
          serviceImpl.getSkillProfile((com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes>) responseObserver);
          break;
        case METHODID_RESYNC_SKILL_PROFILES:
          serviceImpl.resyncSkillProfiles((com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes>) responseObserver);
          break;
        case METHODID_GET_LAST_SKILL_PROFILE_RESYNC_DATE:
          serviceImpl.getLastSkillProfileResyncDate((com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes>) responseObserver);
          break;
        case METHODID_UPSERT_FORECASTING_PARAMETERS:
          serviceImpl.upsertForecastingParameters((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes>) responseObserver);
          break;
        case METHODID_GET_FORECASTING_PARAMETERS:
          serviceImpl.getForecastingParameters((com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes>) responseObserver);
          break;
        case METHODID_GET_CLIENT_HISTORY_CACHE_INFO:
          serviceImpl.getClientHistoryCacheInfo((com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes>) responseObserver);
          break;
        case METHODID_LIST_HISTORICAL_DATA:
          serviceImpl.listHistoricalData((com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes>) responseObserver);
          break;
        case METHODID_UPSERT_HISTORICAL_DATA_DELTA:
          serviceImpl.upsertHistoricalDataDelta((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes>) responseObserver);
          break;
        case METHODID_UPSERT_HISTORICAL_DATA_DELTAS:
          serviceImpl.upsertHistoricalDataDeltas((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes>) responseObserver);
          break;
        case METHODID_LIST_SKILLS:
          serviceImpl.listSkills((com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes>) responseObserver);
          break;
        case METHODID_BUILD_CALL_PROFILE_TEMPLATE_FOR_SKILL_PROFILE:
          serviceImpl.buildCallProfileTemplateForSkillProfile((com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes>) responseObserver);
          break;
        case METHODID_BUILD_CALL_PROFILE_TEMPLATE:
          serviceImpl.buildCallProfileTemplate((com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes>) responseObserver);
          break;
        case METHODID_CREATE_INACTIVE_SKILL_PROFILE_MAPPING:
          serviceImpl.createInactiveSkillProfileMapping((com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes>) responseObserver);
          break;
        case METHODID_GET_AVAILABLE_REGRESSION_FORECASTER_MODEL_TYPES:
          serviceImpl.getAvailableRegressionForecasterModelTypes((com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes>) responseObserver);
          break;
        case METHODID_DISCONNECT_INACTIVE_SKILL_PROFILE_MAPPING:
          serviceImpl.disconnectInactiveSkillProfileMapping((com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes>) responseObserver);
          break;
        case METHODID_CREATE_SKILL_PROFILE_GROUP:
          serviceImpl.createSkillProfileGroup((com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes>) responseObserver);
          break;
        case METHODID_UPDATE_SKILL_PROFILE_GROUP:
          serviceImpl.updateSkillProfileGroup((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes>) responseObserver);
          break;
        case METHODID_LIST_SKILL_PROFILE_GROUPS:
          serviceImpl.listSkillProfileGroups((com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes>) responseObserver);
          break;
        case METHODID_UPDATE_SKILL_PROFILE_GROUP_ASSOCIATIONS:
          serviceImpl.updateSkillProfileGroupAssociations((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes>) responseObserver);
          break;
        case METHODID_DELETE_HISTORICAL_DATA_DELTAS:
          serviceImpl.deleteHistoricalDataDeltas((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes>) responseObserver);
          break;
        case METHODID_LIST_TOP_SKILL_PROFILES:
          serviceImpl.listTopSkillProfiles((com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes>) responseObserver);
          break;
        case METHODID_GET_SKILL_PROFILES_COUNT:
          serviceImpl.getSkillProfilesCount((com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes>) responseObserver);
          break;
        case METHODID_BUILD_PROFILE_FORECAST_BY_INTERVAL:
          serviceImpl.buildProfileForecastByInterval((com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>) responseObserver);
          break;
        case METHODID_BUILD_PROFILE_FORECAST_BY_INTERVAL_WITH_STATS:
          serviceImpl.buildProfileForecastByIntervalWithStats((com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes>) responseObserver);
          break;
        case METHODID_UPSERT_PROFILE_FORECAST:
          serviceImpl.upsertProfileForecast((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes>) responseObserver);
          break;
        case METHODID_CREATE_CALL_PROFILE_TEMPLATE:
          serviceImpl.createCallProfileTemplate((com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes>) responseObserver);
          break;
        case METHODID_DELETE_CALL_PROFILE_TEMPLATE:
          serviceImpl.deleteCallProfileTemplate((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes>) responseObserver);
          break;
        case METHODID_CREATE_REGRESSION_TEMPLATE:
          serviceImpl.createRegressionTemplate((com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes>) responseObserver);
          break;
        case METHODID_DELETE_REGRESSION_TEMPLATE:
          serviceImpl.deleteRegressionTemplate((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes>) responseObserver);
          break;
        case METHODID_LIST_REGRESSION_TEMPLATES:
          serviceImpl.listRegressionTemplates((com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes>) responseObserver);
          break;
        case METHODID_LIST_FORECAST_INTERVALS_FOR_SKILL_PROFILE:
          serviceImpl.listForecastIntervalsForSkillProfile((com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>) responseObserver);
          break;
        case METHODID_LIST_FORECAST_INTERVALS:
          serviceImpl.listForecastIntervals((com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>) responseObserver);
          break;
        case METHODID_LIST_FORECAST_INTERVALS_V2:
          serviceImpl.listForecastIntervalsV2((com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response>) responseObserver);
          break;
        case METHODID_BUILD_REGRESSION_FORECAST_BY_INTERVAL:
          serviceImpl.buildRegressionForecastByInterval((com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>) responseObserver);
          break;
        case METHODID_BUILD_REGRESSION_FORECAST_BY_INTERVAL_WITH_STATS:
          serviceImpl.buildRegressionForecastByIntervalWithStats((com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes>) responseObserver);
          break;
        case METHODID_LIST_CALL_PROFILE_TEMPLATES:
          serviceImpl.listCallProfileTemplates((com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes>) responseObserver);
          break;
        case METHODID_UPSERT_REGRESSION_FORECAST:
          serviceImpl.upsertRegressionForecast((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes>) responseObserver);
          break;
        case METHODID_UPSERT_FORECAST_DATA_DELTA:
          serviceImpl.upsertForecastDataDelta((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes>) responseObserver);
          break;
        case METHODID_UPSERT_FORECAST_DATA_DELTAS:
          serviceImpl.upsertForecastDataDeltas((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes>) responseObserver);
          break;
        case METHODID_DELETE_FORECAST_INTERVALS:
          serviceImpl.deleteForecastIntervals((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes>) responseObserver);
          break;
        case METHODID_LIST_HISTORICAL_DATA_FOR_ALL_SKILL_PROFILES:
          serviceImpl.listHistoricalDataForAllSkillProfiles((com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes>) responseObserver);
          break;
        case METHODID_BUILD_DOWAND_MOYPROFILES:
          serviceImpl.buildDOWAndMOYProfiles((com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes>) responseObserver);
          break;
        case METHODID_CALCULATE_TRAINING_DATA_AVERAGES_FOR_SKILL_PROFILE:
          serviceImpl.calculateTrainingDataAveragesForSkillProfile((com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes>) responseObserver);
          break;
        case METHODID_UPDATE_SKILL_PROFILE_AVERAGES_USING_HISTORICAL_DATA:
          serviceImpl.updateSkillProfileAveragesUsingHistoricalData((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes>) responseObserver);
          break;
        case METHODID_UPDATE_CALL_CENTER_NODE:
          serviceImpl.updateCallCenterNode((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes>) responseObserver);
          break;
        case METHODID_CREATE_CLIENT_NODE:
          serviceImpl.createClientNode((com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes>) responseObserver);
          break;
        case METHODID_UPDATE_CLIENT_NODE:
          serviceImpl.updateClientNode((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes>) responseObserver);
          break;
        case METHODID_CREATE_LOCATION_NODE:
          serviceImpl.createLocationNode((com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes>) responseObserver);
          break;
        case METHODID_UPDATE_LOCATION_NODE:
          serviceImpl.updateLocationNode((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes>) responseObserver);
          break;
        case METHODID_CREATE_PROGRAM_NODE:
          serviceImpl.createProgramNode((com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes>) responseObserver);
          break;
        case METHODID_UPDATE_PROGRAM_NODE:
          serviceImpl.updateProgramNode((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes>) responseObserver);
          break;
        case METHODID_LIST_PROGRAM_NODES_BY_SID:
          serviceImpl.listProgramNodesBySid((com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes>) responseObserver);
          break;
        case METHODID_CREATE_CONSTRAINT_RULE:
          serviceImpl.createConstraintRule((com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes>) responseObserver);
          break;
        case METHODID_UPDATE_CONSTRAINT_RULE:
          serviceImpl.updateConstraintRule((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes>) responseObserver);
          break;
        case METHODID_DELETE_CONSTRAINT_RULE:
          serviceImpl.deleteConstraintRule((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes>) responseObserver);
          break;
        case METHODID_CREATE_NON_SKILL_ACTIVITY:
          serviceImpl.createNonSkillActivity((com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes>) responseObserver);
          break;
        case METHODID_UPDATE_NON_SKILL_ACTIVITY:
          serviceImpl.updateNonSkillActivity((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes>) responseObserver);
          break;
        case METHODID_LIST_NON_SKILL_ACTIVITIES:
          serviceImpl.listNonSkillActivities((com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes>) responseObserver);
          break;
        case METHODID_LIST_NON_SKILL_ACTIVITY_ASSOCIATIONS:
          serviceImpl.listNonSkillActivityAssociations((com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes>) responseObserver);
          break;
        case METHODID_LIST_CANDIDATE_SCHEDULING_ACTIVITIES:
          serviceImpl.listCandidateSchedulingActivities((com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes>) responseObserver);
          break;
        case METHODID_LIST_SCHEDULING_ACTIVITIES:
          serviceImpl.listSchedulingActivities((com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse>) responseObserver);
          break;
        case METHODID_GET_ON_CALL_SCHEDULING_ACTIVITY:
          serviceImpl.getOnCallSchedulingActivity((com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes>) responseObserver);
          break;
        case METHODID_LIST_PATTERNS_FOR_SCHEDULING_ACTIVITY_CLASSIFICATIONS:
          serviceImpl.listPatternsForSchedulingActivityClassifications((com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse>) responseObserver);
          break;
        case METHODID_GET_TIME_OFF_SCHEDULING_ACTIVITY:
          serviceImpl.getTimeOffSchedulingActivity((com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse>) responseObserver);
          break;
        case METHODID_CREATE_AGENT_GROUP:
          serviceImpl.createAgentGroup((com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes>) responseObserver);
          break;
        case METHODID_LIST_AGENT_SCHEDULE_GROUPS:
          serviceImpl.listAgentScheduleGroups((com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse>) responseObserver);
          break;
        case METHODID_UPDATE_AGENT_GROUP:
          serviceImpl.updateAgentGroup((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes>) responseObserver);
          break;
        case METHODID_CREATE_UNASSIGNED_WFMAGENT:
          serviceImpl.createUnassignedWFMAgent((com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse>) responseObserver);
          break;
        case METHODID_UPDATE_WFMAGENT:
          serviceImpl.updateWFMAgent((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes>) responseObserver);
          break;
        case METHODID_LIST_ALL_WFMAGENTS:
          serviceImpl.listAllWFMAgents((com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes>) responseObserver);
          break;
        case METHODID_LIST_CANDIDATE_WFMAGENTS:
          serviceImpl.listCandidateWFMAgents((com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes>) responseObserver);
          break;
        case METHODID_LIST_UNGROUPED_WFMAGENTS:
          serviceImpl.listUngroupedWFMAgents((com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes>) responseObserver);
          break;
        case METHODID_LIST_WFMAGENT_SIDS:
          serviceImpl.listWFMAgentSids((com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes>) responseObserver);
          break;
        case METHODID_LIST_UNASSIGNED_WFMAGENTS:
          serviceImpl.listUnassignedWFMAgents((com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse>) responseObserver);
          break;
        case METHODID_LIST_WFMAGENTS_ASSOCIATED_WITH_AGENT_GROUP:
          serviceImpl.listWFMAgentsAssociatedWithAgentGroup((com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes>) responseObserver);
          break;
        case METHODID_CREATE_WFMAGENT_MEMBERSHIPS:
          serviceImpl.createWFMAgentMemberships((com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes>) responseObserver);
          break;
        case METHODID_COPY_WFMAGENT_MEMBERSHIPS:
          serviceImpl.copyWFMAgentMemberships((com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse>) responseObserver);
          break;
        case METHODID_DELETE_WFMAGENT_MEMBERSHIPS:
          serviceImpl.deleteWFMAgentMemberships((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes>) responseObserver);
          break;
        case METHODID_DELETE_WFMAGENTS_MEMBERSHIPS:
          serviceImpl.deleteWFMAgentsMemberships((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes>) responseObserver);
          break;
        case METHODID_REMOVE_AGENT_FROM_FUTURE_SHIFTS:
          serviceImpl.removeAgentFromFutureShifts((com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse>) responseObserver);
          break;
        case METHODID_BUILD_AGENT_DIAGNOSTICS:
          serviceImpl.buildAgentDiagnostics((com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes>) responseObserver);
          break;
        case METHODID_CREATE_SHIFT_TEMPLATE:
          serviceImpl.createShiftTemplate((com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes>) responseObserver);
          break;
        case METHODID_UPDATE_SHIFT_TEMPLATE:
          serviceImpl.updateShiftTemplate((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes>) responseObserver);
          break;
        case METHODID_LIST_SHIFT_TEMPLATES_BY_SIDS:
          serviceImpl.listShiftTemplatesBySids((com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes>) responseObserver);
          break;
        case METHODID_BUILD_SHIFT_TEMPLATE_DIAGNOSTICS:
          serviceImpl.buildShiftTemplateDiagnostics((com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes>) responseObserver);
          break;
        case METHODID_CREATE_PLACEMENT_RULE:
          serviceImpl.createPlacementRule((com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes>) responseObserver);
          break;
        case METHODID_UPDATE_PLACEMENT_RULE:
          serviceImpl.updatePlacementRule((com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes>) responseObserver);
          break;
        case METHODID_DELETE_PLACEMENT_RULE:
          serviceImpl.deletePlacementRule((com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes>) responseObserver);
          break;
        case METHODID_CREATE_OPEN_TIMES_PATTERN:
          serviceImpl.createOpenTimesPattern((com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes>) responseObserver);
          break;
        case METHODID_UPDATE_OPEN_TIMES_PATTERN:
          serviceImpl.updateOpenTimesPattern((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes>) responseObserver);
          break;
        case METHODID_DELETE_OPEN_TIMES_PATTERN:
          serviceImpl.deleteOpenTimesPattern((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes>) responseObserver);
          break;
        case METHODID_GET_OPEN_TIMES_BITMAPS:
          serviceImpl.getOpenTimesBitmaps((com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes>) responseObserver);
          break;
        case METHODID_LIST_OPEN_DATE_RANGES_FOR_NODE_OPEN_TIMES_BITMAPS:
          serviceImpl.listOpenDateRangesForNodeOpenTimesBitmaps((com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse>) responseObserver);
          break;
        case METHODID_CREATE_AGENT_AVAILABILITY_PATTERN:
          serviceImpl.createAgentAvailabilityPattern((com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes>) responseObserver);
          break;
        case METHODID_UPDATE_AGENT_AVAILABILITY_PATTERN:
          serviceImpl.updateAgentAvailabilityPattern((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes>) responseObserver);
          break;
        case METHODID_DELETE_AGENT_AVAILABILITY_PATTERN:
          serviceImpl.deleteAgentAvailabilityPattern((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes>) responseObserver);
          break;
        case METHODID_GET_AVAILABILITY_BITMAPS:
          serviceImpl.getAvailabilityBitmaps((com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes>) responseObserver);
          break;
        case METHODID_UPSERT_NON_SKILL_ACTIVITY_ASSOCIATION:
          serviceImpl.upsertNonSkillActivityAssociation((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes>) responseObserver);
          break;
        case METHODID_CREATE_SKILL_PROFICIENCIES:
          serviceImpl.createSkillProficiencies((com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes>) responseObserver);
          break;
        case METHODID_UPDATE_SKILL_PROFICIENCIES:
          serviceImpl.updateSkillProficiencies((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes>) responseObserver);
          break;
        case METHODID_DELETE_SKILL_PROFICIENCY:
          serviceImpl.deleteSkillProficiency((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes>) responseObserver);
          break;
        case METHODID_COPY_SCENARIO:
          serviceImpl.copyScenario((com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes>) responseObserver);
          break;
        case METHODID_CREATE_SCHEDULE_SCENARIO_WITH_NODES:
          serviceImpl.createScheduleScenarioWithNodes((com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes>) responseObserver);
          break;
        case METHODID_UPDATE_SCHEDULE_SCENARIO:
          serviceImpl.updateScheduleScenario((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes>) responseObserver);
          break;
        case METHODID_LIST_CONFIG_ENTITIES:
          serviceImpl.listConfigEntities((com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes>) responseObserver);
          break;
        case METHODID_DELETE_SHIFT_INSTANCES:
          serviceImpl.deleteShiftInstances((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes>) responseObserver);
          break;
        case METHODID_BUILD_NODE_DIAGNOSTICS:
          serviceImpl.buildNodeDiagnostics((com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes>) responseObserver);
          break;
        case METHODID_BUILD_GLOBAL_DIAGNOSTICS:
          serviceImpl.buildGlobalDiagnostics((com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes>) responseObserver);
          break;
        case METHODID_GET_PUBLISHED_SCHEDULE:
          serviceImpl.getPublishedSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes>) responseObserver);
          break;
        case METHODID_GET_PUBLISHED_SCHEDULE_REQUIRED_CALLS:
          serviceImpl.getPublishedScheduleRequiredCalls((com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes>) responseObserver);
          break;
        case METHODID_GET_DRAFT_SCHEDULE_REQUIRED_CALLS:
          serviceImpl.getDraftScheduleRequiredCalls((com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes>) responseObserver);
          break;
        case METHODID_CREATE_DRAFT_SCHEDULE:
          serviceImpl.createDraftSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes>) responseObserver);
          break;
        case METHODID_UPDATE_DRAFT_SCHEDULE:
          serviceImpl.updateDraftSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes>) responseObserver);
          break;
        case METHODID_BUILD_DRAFT_SCHEDULE:
          serviceImpl.buildDraftSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes>) responseObserver);
          break;
        case METHODID_POLL_BUILD_IN_PROGRESS:
          serviceImpl.pollBuildInProgress((com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse>) responseObserver);
          break;
        case METHODID_CANCEL_BUILD_IN_PROGRESS:
          serviceImpl.cancelBuildInProgress((com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse>) responseObserver);
          break;
        case METHODID_PUBLISH_DRAFT_SCHEDULE:
          serviceImpl.publishDraftSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes>) responseObserver);
          break;
        case METHODID_RESET_DRAFT_SCHEDULE:
          serviceImpl.resetDraftSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes>) responseObserver);
          break;
        case METHODID_GET_DRAFT_SCHEDULE:
          serviceImpl.getDraftSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes>) responseObserver);
          break;
        case METHODID_LIST_DRAFT_SCHEDULES:
          serviceImpl.listDraftSchedules((com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes>) responseObserver);
          break;
        case METHODID_CLEAR_SCHEDULE:
          serviceImpl.clearSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes>) responseObserver);
          break;
        case METHODID_DELETE_DRAFT_SCHEDULE:
          serviceImpl.deleteDraftSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes>) responseObserver);
          break;
        case METHODID_LIST_SHIFT_INSTANCES_BY_SID:
          serviceImpl.listShiftInstancesBySid((com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes>) responseObserver);
          break;
        case METHODID_COPY_SCHEDULE_TO_SCHEDULE:
          serviceImpl.copyScheduleToSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes>) responseObserver);
          break;
        case METHODID_CREATE_SHIFT_INSTANCE:
          serviceImpl.createShiftInstance((com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes>) responseObserver);
          break;
        case METHODID_CREATE_SHIFT_INSTANCE_V2:
          serviceImpl.createShiftInstanceV2((com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res>) responseObserver);
          break;
        case METHODID_CREATE_SHIFT_INSTANCE_WITH_SEGMENTS:
          serviceImpl.createShiftInstanceWithSegments((com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse>) responseObserver);
          break;
        case METHODID_SPLIT_SHIFT_INSTANCE:
          serviceImpl.splitShiftInstance((com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes>) responseObserver);
          break;
        case METHODID_SWAP_SHIFT_INSTANCES:
          serviceImpl.swapShiftInstances((com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes>) responseObserver);
          break;
        case METHODID_UPDATE_SHIFT_INSTANCE:
          serviceImpl.updateShiftInstance((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes>) responseObserver);
          break;
        case METHODID_UPDATE_SHIFT_INSTANCE_V2:
          serviceImpl.updateShiftInstanceV2((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res>) responseObserver);
          break;
        case METHODID_UPDATE_SHIFT_INSTANCE_WITH_SEGMENTS:
          serviceImpl.updateShiftInstanceWithSegments((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse>) responseObserver);
          break;
        case METHODID_COPY_SHIFT_INSTANCES_TO_SCHEDULE:
          serviceImpl.copyShiftInstancesToSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes>) responseObserver);
          break;
        case METHODID_LIST_SHIFT_INSTANCE_SIDS_FOR_AGENT:
          serviceImpl.listShiftInstanceSidsForAgent((com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes>) responseObserver);
          break;
        case METHODID_LIST_SHIFT_INSTANCE_SIDS_FOR_SCHEDULE:
          serviceImpl.listShiftInstanceSidsForSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse>) responseObserver);
          break;
        case METHODID_LIST_SHIFT_SEGMENTS_BY_SHIFT_INSTANCE_SIDS:
          serviceImpl.listShiftSegmentsByShiftInstanceSids((com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes>) responseObserver);
          break;
        case METHODID_SET_SCHEDULING_TARGET:
          serviceImpl.setSchedulingTarget((com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes>) responseObserver);
          break;
        case METHODID_GET_SCHEDULING_TARGET:
          serviceImpl.getSchedulingTarget((com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes>) responseObserver);
          break;
        case METHODID_DELETE_SCHEDULING_TARGET:
          serviceImpl.deleteSchedulingTarget((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes>) responseObserver);
          break;
        case METHODID_GET_DEFAULT_SCHEDULING_TARGET:
          serviceImpl.getDefaultSchedulingTarget((com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes>) responseObserver);
          break;
        case METHODID_SET_DEFAULT_SCHEDULING_TARGET:
          serviceImpl.setDefaultSchedulingTarget((com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes>) responseObserver);
          break;
        case METHODID_GET_PERFORMANCE_METRICS:
          serviceImpl.getPerformanceMetrics((com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes>) responseObserver);
          break;
        case METHODID_LIST_REQUIRED_CALLS_INTERVALS:
          serviceImpl.listRequiredCallsIntervals((com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes>) responseObserver);
          break;
        case METHODID_CREATE_TOUR_PATTERN:
          serviceImpl.createTourPattern((com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes>) responseObserver);
          break;
        case METHODID_GET_TOUR_PATTERN_DIAGNOSTICS:
          serviceImpl.getTourPatternDiagnostics((com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes>) responseObserver);
          break;
        case METHODID_UPSERT_TOUR_PATTERN_WITH_MEMBERS:
          serviceImpl.upsertTourPatternWithMembers((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes>) responseObserver);
          break;
        case METHODID_GET_TOUR_PATTERN:
          serviceImpl.getTourPattern((com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes>) responseObserver);
          break;
        case METHODID_GET_TOUR_PATTERN_WITH_MEMBERS:
          serviceImpl.getTourPatternWithMembers((com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes>) responseObserver);
          break;
        case METHODID_DELETE_TOUR_PATTERN:
          serviceImpl.deleteTourPattern((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes>) responseObserver);
          break;
        case METHODID_CREATE_TOUR_WEEK_PATTERN:
          serviceImpl.createTourWeekPattern((com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes>) responseObserver);
          break;
        case METHODID_LIST_TOUR_WEEK_PATTERNS:
          serviceImpl.listTourWeekPatterns((com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes>) responseObserver);
          break;
        case METHODID_DELETE_TOUR_WEEK_PATTERNS:
          serviceImpl.deleteTourWeekPatterns((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes>) responseObserver);
          break;
        case METHODID_CREATE_TOUR_SHIFT_INSTANCE_CONFIG:
          serviceImpl.createTourShiftInstanceConfig((com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes>) responseObserver);
          break;
        case METHODID_UPDATE_TOUR_SHIFT_INSTANCE_CONFIG:
          serviceImpl.updateTourShiftInstanceConfig((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes>) responseObserver);
          break;
        case METHODID_LIST_TOUR_SHIFT_INSTANCE_CONFIGS:
          serviceImpl.listTourShiftInstanceConfigs((com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes>) responseObserver);
          break;
        case METHODID_DELETE_TOUR_SHIFT_INSTANCE_CONFIGS:
          serviceImpl.deleteTourShiftInstanceConfigs((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes>) responseObserver);
          break;
        case METHODID_CREATE_TOUR_SHIFT_SEGMENT_CONFIG:
          serviceImpl.createTourShiftSegmentConfig((com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes>) responseObserver);
          break;
        case METHODID_UPDATE_TOUR_SHIFT_SEGMENT_CONFIG:
          serviceImpl.updateTourShiftSegmentConfig((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes>) responseObserver);
          break;
        case METHODID_LIST_TOUR_SHIFT_SEGMENT_CONFIGS:
          serviceImpl.listTourShiftSegmentConfigs((com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes>) responseObserver);
          break;
        case METHODID_DELETE_TOUR_SHIFT_SEGMENT_CONFIGS:
          serviceImpl.deleteTourShiftSegmentConfigs((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes>) responseObserver);
          break;
        case METHODID_CREATE_TOUR_AGENT_COLLECTION:
          serviceImpl.createTourAgentCollection((com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes>) responseObserver);
          break;
        case METHODID_UPDATE_TOUR_AGENT_COLLECTION:
          serviceImpl.updateTourAgentCollection((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes>) responseObserver);
          break;
        case METHODID_LIST_TOUR_AGENT_COLLECTIONS:
          serviceImpl.listTourAgentCollections((com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes>) responseObserver);
          break;
        case METHODID_DELETE_TOUR_AGENT_COLLECTIONS:
          serviceImpl.deleteTourAgentCollections((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes>) responseObserver);
          break;
        case METHODID_CREATE_TOUR_AGENT_COLLECTION_WFMAGENTS:
          serviceImpl.createTourAgentCollectionWFMAgents((com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes>) responseObserver);
          break;
        case METHODID_LIST_TOUR_AGENT_COLLECTION_WFMAGENTS:
          serviceImpl.listTourAgentCollectionWFMAgents((com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes>) responseObserver);
          break;
        case METHODID_DELETE_TOUR_AGENT_COLLECTION_WFMAGENTS:
          serviceImpl.deleteTourAgentCollectionWFMAgents((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes>) responseObserver);
          break;
        case METHODID_GENERATE_TOUR_WEEK_PATTERNS:
          serviceImpl.generateTourWeekPatterns((com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes>) responseObserver);
          break;
        case METHODID_LIST_VALID_AGENTS_FOR_REPLACEMENT:
          serviceImpl.listValidAgentsForReplacement((com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes>) responseObserver);
          break;
        case METHODID_REPLACE_AGENT_ON_SCHEDULE:
          serviceImpl.replaceAgentOnSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes>) responseObserver);
          break;
        case METHODID_REPLACE_AGENT_ON_SCHEDULE_V1:
          serviceImpl.replaceAgentOnScheduleV1((com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes>) responseObserver);
          break;
        case METHODID_REMOVE_AGENT_FROM_SCHEDULE:
          serviceImpl.removeAgentFromSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse>) responseObserver);
          break;
        case METHODID_CREATE_AGENT_LEAVE_PETITION:
          serviceImpl.createAgentLeavePetition((com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse>) responseObserver);
          break;
        case METHODID_LIST_AGENT_LEAVE_PETITIONS:
          serviceImpl.listAgentLeavePetitions((com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse>) responseObserver);
          break;
        case METHODID_ARCHIVE_AGENT_LEAVE_PETITION:
          serviceImpl.archiveAgentLeavePetition((com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse>) responseObserver);
          break;
        case METHODID_RESOLVE_AGENT_LEAVE_PETITION:
          serviceImpl.resolveAgentLeavePetition((com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse>) responseObserver);
          break;
        case METHODID_CANCEL_AGENT_LEAVE_PETITION:
          serviceImpl.cancelAgentLeavePetition((com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse>) responseObserver);
          break;
        case METHODID_HELLO_WORLD_WFMADHERENCE:
          serviceImpl.helloWorldWFMAdherence((com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse>) responseObserver);
          break;
        case METHODID_LIST_AGENT_STATES_FOR_DAY:
          serviceImpl.listAgentStatesForDay((com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse>) responseObserver);
          break;
        case METHODID_LIST_REAL_TIME_MANAGEMENT_STATES:
          serviceImpl.listRealTimeManagementStates((com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse>) responseObserver);
          break;
        case METHODID_LIST_ADHERENCE_AGENT_STATES:
          serviceImpl.listAdherenceAgentStates((com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse>) responseObserver);
          break;
        case METHODID_UPSERT_REAL_TIME_MANAGEMENT_STATE_COLOR:
          serviceImpl.upsertRealTimeManagementStateColor((com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse>) responseObserver);
          break;
        case METHODID_LIST_REAL_TIME_MANAGEMENT_STATE_COLORS:
          serviceImpl.listRealTimeManagementStateColors((com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse>) responseObserver);
          break;
        case METHODID_DELETE_REAL_TIME_MANAGEMENT_STATE_COLOR:
          serviceImpl.deleteRealTimeManagementStateColor((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse>) responseObserver);
          break;
        case METHODID_CREATE_RGBA_COLOR:
          serviceImpl.createRgbaColor((com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse>) responseObserver);
          break;
        case METHODID_LIST_RGBA_COLORS:
          serviceImpl.listRgbaColors((com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse>) responseObserver);
          break;
        case METHODID_UPDATE_RGBA_COLOR:
          serviceImpl.updateRgbaColor((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse>) responseObserver);
          break;
        case METHODID_DELETE_RGBA_COLOR:
          serviceImpl.deleteRgbaColor((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse>) responseObserver);
          break;
        case METHODID_CREATE_ADHERENCE_RULE_NOTIFICATION_CONFIG:
          serviceImpl.createAdherenceRuleNotificationConfig((com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse>) responseObserver);
          break;
        case METHODID_UPDATE_ADHERENCE_RULE_NOTIFICATION_CONFIG:
          serviceImpl.updateAdherenceRuleNotificationConfig((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse>) responseObserver);
          break;
        case METHODID_CREATE_ADHERENCE_RULE_NOTIFICATION_CONFIG_ENTRY:
          serviceImpl.createAdherenceRuleNotificationConfigEntry((com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse>) responseObserver);
          break;
        case METHODID_UPDATE_ADHERENCE_RULE_NOTIFICATION_CONFIG_ENTRY:
          serviceImpl.updateAdherenceRuleNotificationConfigEntry((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse>) responseObserver);
          break;
        case METHODID_DELETE_ADHERENCE_RULE_NOTIFICATION_CONFIG_ENTRY:
          serviceImpl.deleteAdherenceRuleNotificationConfigEntry((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse>) responseObserver);
          break;
        case METHODID_LIST_ADHERENCE_RULE_NOTIFICATION_CONFIGS:
          serviceImpl.listAdherenceRuleNotificationConfigs((com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse>) responseObserver);
          break;
        case METHODID_CREATE_ADHERENCE_DEPARTMENTAL_RULE:
          serviceImpl.createAdherenceDepartmentalRule((com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse>) responseObserver);
          break;
        case METHODID_UPDATE_ADHERENCE_DEPARTMENTAL_RULE:
          serviceImpl.updateAdherenceDepartmentalRule((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse>) responseObserver);
          break;
        case METHODID_CREATE_ADHERENCE_DEPARTMENTAL_RULE_CLAUSE:
          serviceImpl.createAdherenceDepartmentalRuleClause((com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse>) responseObserver);
          break;
        case METHODID_UPDATE_ADHERENCE_DEPARTMENTAL_RULE_CLAUSE:
          serviceImpl.updateAdherenceDepartmentalRuleClause((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse>) responseObserver);
          break;
        case METHODID_DELETE_ADHERENCE_DEPARTMENTAL_RULE_CLAUSE:
          serviceImpl.deleteAdherenceDepartmentalRuleClause((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse>) responseObserver);
          break;
        case METHODID_LIST_ADHERENCE_DEPARTMENTAL_RULES:
          serviceImpl.listAdherenceDepartmentalRules((com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse>) responseObserver);
          break;
        case METHODID_CREATE_ADHERENCE_AGENT_RULE:
          serviceImpl.createAdherenceAgentRule((com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse>) responseObserver);
          break;
        case METHODID_UPDATE_ADHERENCE_AGENT_RULE:
          serviceImpl.updateAdherenceAgentRule((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse>) responseObserver);
          break;
        case METHODID_CREATE_ADHERENCE_AGENT_RULE_CLAUSE:
          serviceImpl.createAdherenceAgentRuleClause((com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse>) responseObserver);
          break;
        case METHODID_UPDATE_ADHERENCE_AGENT_RULE_CLAUSE:
          serviceImpl.updateAdherenceAgentRuleClause((com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse>) responseObserver);
          break;
        case METHODID_LIST_ADHERENCE_AGENT_RULES:
          serviceImpl.listAdherenceAgentRules((com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse>) responseObserver);
          break;
        case METHODID_DELETE_ADHERENCE_AGENT_RULE_CLAUSE:
          serviceImpl.deleteAdherenceAgentRuleClause((com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse>) responseObserver);
          break;
        case METHODID_AGENT_GET_SCHEDULE:
          serviceImpl.agentGetSchedule((com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse>) responseObserver);
          break;
        case METHODID_AGENT_LIST_LEAVE_PETITIONS:
          serviceImpl.agentListLeavePetitions((com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse>) responseObserver);
          break;
        case METHODID_AGENT_CREATE_LEAVE_PETITION:
          serviceImpl.agentCreateLeavePetition((com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse>) responseObserver);
          break;
        case METHODID_AGENT_CANCEL_LEAVE_PETITION:
          serviceImpl.agentCancelLeavePetition((com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest) request,
              (io.grpc.stub.StreamObserver<com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }

  public static final io.grpc.ServerServiceDefinition bindService(AsyncService service) {
    return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
        .addMethod(
          getPerformInitialClientSetupMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.PerformInitialClientSetupResponse>(
                service, METHODID_PERFORM_INITIAL_CLIENT_SETUP)))
        .addMethod(
          getCreateInitialDemoActivitiesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateInitialDemoActivitiesResponse>(
                service, METHODID_CREATE_INITIAL_DEMO_ACTIVITIES)))
        .addMethod(
          getListSkillProfilesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfilesRes>(
                service, METHODID_LIST_SKILL_PROFILES)))
        .addMethod(
          getUpdateSkillProfileMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileRes>(
                service, METHODID_UPDATE_SKILL_PROFILE)))
        .addMethod(
          getUpdateSkillProfileProficienciesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileProficienciesRes>(
                service, METHODID_UPDATE_SKILL_PROFILE_PROFICIENCIES)))
        .addMethod(
          getGetSkillProfileMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfileRes>(
                service, METHODID_GET_SKILL_PROFILE)))
        .addMethod(
          getResyncSkillProfilesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ResyncSkillProfilesRes>(
                service, METHODID_RESYNC_SKILL_PROFILES)))
        .addMethod(
          getGetLastSkillProfileResyncDateMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetLastSkillProfileResyncDateRes>(
                service, METHODID_GET_LAST_SKILL_PROFILE_RESYNC_DATE)))
        .addMethod(
          getUpsertForecastingParametersMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastingParametersRes>(
                service, METHODID_UPSERT_FORECASTING_PARAMETERS)))
        .addMethod(
          getGetForecastingParametersMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetForecastingParametersRes>(
                service, METHODID_GET_FORECASTING_PARAMETERS)))
        .addMethod(
          getGetClientHistoryCacheInfoMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetClientHistoryCacheInfoRes>(
                service, METHODID_GET_CLIENT_HISTORY_CACHE_INFO)))
        .addMethod(
          getListHistoricalDataMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataRes>(
                service, METHODID_LIST_HISTORICAL_DATA)))
        .addMethod(
          getUpsertHistoricalDataDeltaMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltaRes>(
                service, METHODID_UPSERT_HISTORICAL_DATA_DELTA)))
        .addMethod(
          getUpsertHistoricalDataDeltasMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertHistoricalDataDeltasRes>(
                service, METHODID_UPSERT_HISTORICAL_DATA_DELTAS)))
        .addMethod(
          getListSkillsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillsRes>(
                service, METHODID_LIST_SKILLS)))
        .addMethod(
          getBuildCallProfileTemplateForSkillProfileMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateForSkillProfileRes>(
                service, METHODID_BUILD_CALL_PROFILE_TEMPLATE_FOR_SKILL_PROFILE)))
        .addMethod(
          getBuildCallProfileTemplateMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildCallProfileTemplateRes>(
                service, METHODID_BUILD_CALL_PROFILE_TEMPLATE)))
        .addMethod(
          getCreateInactiveSkillProfileMappingMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateInactiveSkillProfileMappingRes>(
                service, METHODID_CREATE_INACTIVE_SKILL_PROFILE_MAPPING)))
        .addMethod(
          getGetAvailableRegressionForecasterModelTypesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailableRegressionForecasterModelTypesRes>(
                service, METHODID_GET_AVAILABLE_REGRESSION_FORECASTER_MODEL_TYPES)))
        .addMethod(
          getDisconnectInactiveSkillProfileMappingMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DisconnectInactiveSkillProfileMappingRes>(
                service, METHODID_DISCONNECT_INACTIVE_SKILL_PROFILE_MAPPING)))
        .addMethod(
          getCreateSkillProfileGroupMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProfileGroupRes>(
                service, METHODID_CREATE_SKILL_PROFILE_GROUP)))
        .addMethod(
          getUpdateSkillProfileGroupMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupRes>(
                service, METHODID_UPDATE_SKILL_PROFILE_GROUP)))
        .addMethod(
          getListSkillProfileGroupsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListSkillProfileGroupsRes>(
                service, METHODID_LIST_SKILL_PROFILE_GROUPS)))
        .addMethod(
          getUpdateSkillProfileGroupAssociationsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileGroupAssociationsRes>(
                service, METHODID_UPDATE_SKILL_PROFILE_GROUP_ASSOCIATIONS)))
        .addMethod(
          getDeleteHistoricalDataDeltasMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteHistoricalDataDeltasRes>(
                service, METHODID_DELETE_HISTORICAL_DATA_DELTAS)))
        .addMethod(
          getListTopSkillProfilesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTopSkillProfilesRes>(
                service, METHODID_LIST_TOP_SKILL_PROFILES)))
        .addMethod(
          getGetSkillProfilesCountMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetSkillProfilesCountRes>(
                service, METHODID_GET_SKILL_PROFILES_COUNT)))
        .addMethod(
          getBuildProfileForecastByIntervalMethod(),
          io.grpc.stub.ServerCalls.asyncServerStreamingCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>(
                service, METHODID_BUILD_PROFILE_FORECAST_BY_INTERVAL)))
        .addMethod(
          getBuildProfileForecastByIntervalWithStatsMethod(),
          io.grpc.stub.ServerCalls.asyncServerStreamingCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildProfileForecastByIntervalWithStatsRes>(
                service, METHODID_BUILD_PROFILE_FORECAST_BY_INTERVAL_WITH_STATS)))
        .addMethod(
          getUpsertProfileForecastMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertProfileForecastRes>(
                service, METHODID_UPSERT_PROFILE_FORECAST)))
        .addMethod(
          getCreateCallProfileTemplateMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateCallProfileTemplateRes>(
                service, METHODID_CREATE_CALL_PROFILE_TEMPLATE)))
        .addMethod(
          getDeleteCallProfileTemplateMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteCallProfileTemplateRes>(
                service, METHODID_DELETE_CALL_PROFILE_TEMPLATE)))
        .addMethod(
          getCreateRegressionTemplateMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateRegressionTemplateRes>(
                service, METHODID_CREATE_REGRESSION_TEMPLATE)))
        .addMethod(
          getDeleteRegressionTemplateMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRegressionTemplateRes>(
                service, METHODID_DELETE_REGRESSION_TEMPLATE)))
        .addMethod(
          getListRegressionTemplatesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRegressionTemplatesRes>(
                service, METHODID_LIST_REGRESSION_TEMPLATES)))
        .addMethod(
          getListForecastIntervalsForSkillProfileMethod(),
          io.grpc.stub.ServerCalls.asyncServerStreamingCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsForSkillProfileReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>(
                service, METHODID_LIST_FORECAST_INTERVALS_FOR_SKILL_PROFILE)))
        .addMethod(
          getListForecastIntervalsMethod(),
          io.grpc.stub.ServerCalls.asyncServerStreamingCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>(
                service, METHODID_LIST_FORECAST_INTERVALS)))
        .addMethod(
          getListForecastIntervalsV2Method(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Request,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListForecastIntervalsV2Response>(
                service, METHODID_LIST_FORECAST_INTERVALS_V2)))
        .addMethod(
          getBuildRegressionForecastByIntervalMethod(),
          io.grpc.stub.ServerCalls.asyncServerStreamingCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CallDataByInterval>(
                service, METHODID_BUILD_REGRESSION_FORECAST_BY_INTERVAL)))
        .addMethod(
          getBuildRegressionForecastByIntervalWithStatsMethod(),
          io.grpc.stub.ServerCalls.asyncServerStreamingCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildRegressionForecastByIntervalWithStatsRes>(
                service, METHODID_BUILD_REGRESSION_FORECAST_BY_INTERVAL_WITH_STATS)))
        .addMethod(
          getListCallProfileTemplatesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListCallProfileTemplatesRes>(
                service, METHODID_LIST_CALL_PROFILE_TEMPLATES)))
        .addMethod(
          getUpsertRegressionForecastMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRegressionForecastRes>(
                service, METHODID_UPSERT_REGRESSION_FORECAST)))
        .addMethod(
          getUpsertForecastDataDeltaMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltaRes>(
                service, METHODID_UPSERT_FORECAST_DATA_DELTA)))
        .addMethod(
          getUpsertForecastDataDeltasMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertForecastDataDeltasRes>(
                service, METHODID_UPSERT_FORECAST_DATA_DELTAS)))
        .addMethod(
          getDeleteForecastIntervalsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteForecastIntervalsRes>(
                service, METHODID_DELETE_FORECAST_INTERVALS)))
        .addMethod(
          getListHistoricalDataForAllSkillProfilesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListHistoricalDataForAllSkillProfilesRes>(
                service, METHODID_LIST_HISTORICAL_DATA_FOR_ALL_SKILL_PROFILES)))
        .addMethod(
          getBuildDOWAndMOYProfilesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildDOWAndMOYProfilesRes>(
                service, METHODID_BUILD_DOWAND_MOYPROFILES)))
        .addMethod(
          getCalculateTrainingDataAveragesForSkillProfileMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CalculateTrainingDataAveragesForSkillProfileRes>(
                service, METHODID_CALCULATE_TRAINING_DATA_AVERAGES_FOR_SKILL_PROFILE)))
        .addMethod(
          getUpdateSkillProfileAveragesUsingHistoricalDataMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProfileAveragesUsingHistoricalDataRes>(
                service, METHODID_UPDATE_SKILL_PROFILE_AVERAGES_USING_HISTORICAL_DATA)))
        .addMethod(
          getUpdateCallCenterNodeMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateCallCenterNodeRes>(
                service, METHODID_UPDATE_CALL_CENTER_NODE)))
        .addMethod(
          getCreateClientNodeMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateClientNodeRes>(
                service, METHODID_CREATE_CLIENT_NODE)))
        .addMethod(
          getUpdateClientNodeMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateClientNodeRes>(
                service, METHODID_UPDATE_CLIENT_NODE)))
        .addMethod(
          getCreateLocationNodeMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateLocationNodeRes>(
                service, METHODID_CREATE_LOCATION_NODE)))
        .addMethod(
          getUpdateLocationNodeMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateLocationNodeRes>(
                service, METHODID_UPDATE_LOCATION_NODE)))
        .addMethod(
          getCreateProgramNodeMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateProgramNodeRes>(
                service, METHODID_CREATE_PROGRAM_NODE)))
        .addMethod(
          getUpdateProgramNodeMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateProgramNodeRes>(
                service, METHODID_UPDATE_PROGRAM_NODE)))
        .addMethod(
          getListProgramNodesBySidMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListProgramNodesBySidRes>(
                service, METHODID_LIST_PROGRAM_NODES_BY_SID)))
        .addMethod(
          getCreateConstraintRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateConstraintRuleRes>(
                service, METHODID_CREATE_CONSTRAINT_RULE)))
        .addMethod(
          getUpdateConstraintRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateConstraintRuleRes>(
                service, METHODID_UPDATE_CONSTRAINT_RULE)))
        .addMethod(
          getDeleteConstraintRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteConstraintRuleRes>(
                service, METHODID_DELETE_CONSTRAINT_RULE)))
        .addMethod(
          getCreateNonSkillActivityMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateNonSkillActivityRes>(
                service, METHODID_CREATE_NON_SKILL_ACTIVITY)))
        .addMethod(
          getUpdateNonSkillActivityMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateNonSkillActivityRes>(
                service, METHODID_UPDATE_NON_SKILL_ACTIVITY)))
        .addMethod(
          getListNonSkillActivitiesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivitiesRes>(
                service, METHODID_LIST_NON_SKILL_ACTIVITIES)))
        .addMethod(
          getListNonSkillActivityAssociationsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListNonSkillActivityAssociationsRes>(
                service, METHODID_LIST_NON_SKILL_ACTIVITY_ASSOCIATIONS)))
        .addMethod(
          getListCandidateSchedulingActivitiesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateSchedulingActivitiesRes>(
                service, METHODID_LIST_CANDIDATE_SCHEDULING_ACTIVITIES)))
        .addMethod(
          getListSchedulingActivitiesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListSchedulingActivitiesResponse>(
                service, METHODID_LIST_SCHEDULING_ACTIVITIES)))
        .addMethod(
          getGetOnCallSchedulingActivityMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetOnCallSchedulingActivityRes>(
                service, METHODID_GET_ON_CALL_SCHEDULING_ACTIVITY)))
        .addMethod(
          getListPatternsForSchedulingActivityClassificationsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListPatternsForSchedulingActivityClassificationsResponse>(
                service, METHODID_LIST_PATTERNS_FOR_SCHEDULING_ACTIVITY_CLASSIFICATIONS)))
        .addMethod(
          getGetTimeOffSchedulingActivityMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetTimeOffSchedulingActivityResponse>(
                service, METHODID_GET_TIME_OFF_SCHEDULING_ACTIVITY)))
        .addMethod(
          getCreateAgentGroupMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentGroupRes>(
                service, METHODID_CREATE_AGENT_GROUP)))
        .addMethod(
          getListAgentScheduleGroupsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentScheduleGroupsResponse>(
                service, METHODID_LIST_AGENT_SCHEDULE_GROUPS)))
        .addMethod(
          getUpdateAgentGroupMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentGroupRes>(
                service, METHODID_UPDATE_AGENT_GROUP)))
        .addMethod(
          getCreateUnassignedWFMAgentMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateUnassignedWFMAgentResponse>(
                service, METHODID_CREATE_UNASSIGNED_WFMAGENT)))
        .addMethod(
          getUpdateWFMAgentMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateWFMAgentRes>(
                service, METHODID_UPDATE_WFMAGENT)))
        .addMethod(
          getListAllWFMAgentsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAllWFMAgentsRes>(
                service, METHODID_LIST_ALL_WFMAGENTS)))
        .addMethod(
          getListCandidateWFMAgentsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListCandidateWFMAgentsRes>(
                service, METHODID_LIST_CANDIDATE_WFMAGENTS)))
        .addMethod(
          getListUngroupedWFMAgentsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListUngroupedWFMAgentsRes>(
                service, METHODID_LIST_UNGROUPED_WFMAGENTS)))
        .addMethod(
          getListWFMAgentSidsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentSidsRes>(
                service, METHODID_LIST_WFMAGENT_SIDS)))
        .addMethod(
          getListUnassignedWFMAgentsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListUnassignedWFMAgentsResponse>(
                service, METHODID_LIST_UNASSIGNED_WFMAGENTS)))
        .addMethod(
          getListWFMAgentsAssociatedWithAgentGroupMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListWFMAgentsAssociatedWithAgentGroupRes>(
                service, METHODID_LIST_WFMAGENTS_ASSOCIATED_WITH_AGENT_GROUP)))
        .addMethod(
          getCreateWFMAgentMembershipsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateWFMAgentMembershipsRes>(
                service, METHODID_CREATE_WFMAGENT_MEMBERSHIPS)))
        .addMethod(
          getCopyWFMAgentMembershipsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CopyWFMAgentMembershipsResponse>(
                service, METHODID_COPY_WFMAGENT_MEMBERSHIPS)))
        .addMethod(
          getDeleteWFMAgentMembershipsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentMembershipsRes>(
                service, METHODID_DELETE_WFMAGENT_MEMBERSHIPS)))
        .addMethod(
          getDeleteWFMAgentsMembershipsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteWFMAgentsMembershipsRes>(
                service, METHODID_DELETE_WFMAGENTS_MEMBERSHIPS)))
        .addMethod(
          getRemoveAgentFromFutureShiftsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromFutureShiftsResponse>(
                service, METHODID_REMOVE_AGENT_FROM_FUTURE_SHIFTS)))
        .addMethod(
          getBuildAgentDiagnosticsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildAgentDiagnosticsRes>(
                service, METHODID_BUILD_AGENT_DIAGNOSTICS)))
        .addMethod(
          getCreateShiftTemplateMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftTemplateRes>(
                service, METHODID_CREATE_SHIFT_TEMPLATE)))
        .addMethod(
          getUpdateShiftTemplateMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftTemplateRes>(
                service, METHODID_UPDATE_SHIFT_TEMPLATE)))
        .addMethod(
          getListShiftTemplatesBySidsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftTemplatesBySidsRes>(
                service, METHODID_LIST_SHIFT_TEMPLATES_BY_SIDS)))
        .addMethod(
          getBuildShiftTemplateDiagnosticsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildShiftTemplateDiagnosticsRes>(
                service, METHODID_BUILD_SHIFT_TEMPLATE_DIAGNOSTICS)))
        .addMethod(
          getCreatePlacementRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreatePlacementRuleRes>(
                service, METHODID_CREATE_PLACEMENT_RULE)))
        .addMethod(
          getUpdatePlacementRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdatePlacementRuleRes>(
                service, METHODID_UPDATE_PLACEMENT_RULE)))
        .addMethod(
          getDeletePlacementRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeletePlacementRuleRes>(
                service, METHODID_DELETE_PLACEMENT_RULE)))
        .addMethod(
          getCreateOpenTimesPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateOpenTimesPatternRes>(
                service, METHODID_CREATE_OPEN_TIMES_PATTERN)))
        .addMethod(
          getUpdateOpenTimesPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateOpenTimesPatternRes>(
                service, METHODID_UPDATE_OPEN_TIMES_PATTERN)))
        .addMethod(
          getDeleteOpenTimesPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteOpenTimesPatternRes>(
                service, METHODID_DELETE_OPEN_TIMES_PATTERN)))
        .addMethod(
          getGetOpenTimesBitmapsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetOpenTimesBitmapsRes>(
                service, METHODID_GET_OPEN_TIMES_BITMAPS)))
        .addMethod(
          getListOpenDateRangesForNodeOpenTimesBitmapsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListOpenDateRangesForNodeOpenTimesBitmapsResponse>(
                service, METHODID_LIST_OPEN_DATE_RANGES_FOR_NODE_OPEN_TIMES_BITMAPS)))
        .addMethod(
          getCreateAgentAvailabilityPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentAvailabilityPatternRes>(
                service, METHODID_CREATE_AGENT_AVAILABILITY_PATTERN)))
        .addMethod(
          getUpdateAgentAvailabilityPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAgentAvailabilityPatternRes>(
                service, METHODID_UPDATE_AGENT_AVAILABILITY_PATTERN)))
        .addMethod(
          getDeleteAgentAvailabilityPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAgentAvailabilityPatternRes>(
                service, METHODID_DELETE_AGENT_AVAILABILITY_PATTERN)))
        .addMethod(
          getGetAvailabilityBitmapsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetAvailabilityBitmapsRes>(
                service, METHODID_GET_AVAILABILITY_BITMAPS)))
        .addMethod(
          getUpsertNonSkillActivityAssociationMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertNonSkillActivityAssociationRes>(
                service, METHODID_UPSERT_NON_SKILL_ACTIVITY_ASSOCIATION)))
        .addMethod(
          getCreateSkillProficienciesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateSkillProficienciesRes>(
                service, METHODID_CREATE_SKILL_PROFICIENCIES)))
        .addMethod(
          getUpdateSkillProficienciesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateSkillProficienciesRes>(
                service, METHODID_UPDATE_SKILL_PROFICIENCIES)))
        .addMethod(
          getDeleteSkillProficiencyMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSkillProficiencyRes>(
                service, METHODID_DELETE_SKILL_PROFICIENCY)))
        .addMethod(
          getCopyScenarioMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CopyScenarioRes>(
                service, METHODID_COPY_SCENARIO)))
        .addMethod(
          getCreateScheduleScenarioWithNodesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateScheduleScenarioWithNodesRes>(
                service, METHODID_CREATE_SCHEDULE_SCENARIO_WITH_NODES)))
        .addMethod(
          getUpdateScheduleScenarioMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateScheduleScenarioRes>(
                service, METHODID_UPDATE_SCHEDULE_SCENARIO)))
        .addMethod(
          getListConfigEntitiesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListConfigEntitiesRes>(
                service, METHODID_LIST_CONFIG_ENTITIES)))
        .addMethod(
          getDeleteShiftInstancesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteShiftInstancesRes>(
                service, METHODID_DELETE_SHIFT_INSTANCES)))
        .addMethod(
          getBuildNodeDiagnosticsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildNodeDiagnosticsRes>(
                service, METHODID_BUILD_NODE_DIAGNOSTICS)))
        .addMethod(
          getBuildGlobalDiagnosticsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildGlobalDiagnosticsRes>(
                service, METHODID_BUILD_GLOBAL_DIAGNOSTICS)))
        .addMethod(
          getGetPublishedScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRes>(
                service, METHODID_GET_PUBLISHED_SCHEDULE)))
        .addMethod(
          getGetPublishedScheduleRequiredCallsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetPublishedScheduleRequiredCallsRes>(
                service, METHODID_GET_PUBLISHED_SCHEDULE_REQUIRED_CALLS)))
        .addMethod(
          getGetDraftScheduleRequiredCallsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRequiredCallsRes>(
                service, METHODID_GET_DRAFT_SCHEDULE_REQUIRED_CALLS)))
        .addMethod(
          getCreateDraftScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateDraftScheduleRes>(
                service, METHODID_CREATE_DRAFT_SCHEDULE)))
        .addMethod(
          getUpdateDraftScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateDraftScheduleRes>(
                service, METHODID_UPDATE_DRAFT_SCHEDULE)))
        .addMethod(
          getBuildDraftScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.BuildDraftScheduleRes>(
                service, METHODID_BUILD_DRAFT_SCHEDULE)))
        .addMethod(
          getPollBuildInProgressMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.PollBuildInProgressResponse>(
                service, METHODID_POLL_BUILD_IN_PROGRESS)))
        .addMethod(
          getCancelBuildInProgressMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CancelBuildInProgressResponse>(
                service, METHODID_CANCEL_BUILD_IN_PROGRESS)))
        .addMethod(
          getPublishDraftScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.PublishDraftScheduleRes>(
                service, METHODID_PUBLISH_DRAFT_SCHEDULE)))
        .addMethod(
          getResetDraftScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ResetDraftScheduleRes>(
                service, METHODID_RESET_DRAFT_SCHEDULE)))
        .addMethod(
          getGetDraftScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetDraftScheduleRes>(
                service, METHODID_GET_DRAFT_SCHEDULE)))
        .addMethod(
          getListDraftSchedulesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListDraftSchedulesRes>(
                service, METHODID_LIST_DRAFT_SCHEDULES)))
        .addMethod(
          getClearScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ClearScheduleRes>(
                service, METHODID_CLEAR_SCHEDULE)))
        .addMethod(
          getDeleteDraftScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteDraftScheduleRes>(
                service, METHODID_DELETE_DRAFT_SCHEDULE)))
        .addMethod(
          getListShiftInstancesBySidMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstancesBySidRes>(
                service, METHODID_LIST_SHIFT_INSTANCES_BY_SID)))
        .addMethod(
          getCopyScheduleToScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CopyScheduleToScheduleRes>(
                service, METHODID_COPY_SCHEDULE_TO_SCHEDULE)))
        .addMethod(
          getCreateShiftInstanceMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceRes>(
                service, METHODID_CREATE_SHIFT_INSTANCE)))
        .addMethod(
          getCreateShiftInstanceV2Method(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Req,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceV2Res>(
                service, METHODID_CREATE_SHIFT_INSTANCE_V2)))
        .addMethod(
          getCreateShiftInstanceWithSegmentsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateShiftInstanceWithSegmentsResponse>(
                service, METHODID_CREATE_SHIFT_INSTANCE_WITH_SEGMENTS)))
        .addMethod(
          getSplitShiftInstanceMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.SplitShiftInstanceRes>(
                service, METHODID_SPLIT_SHIFT_INSTANCE)))
        .addMethod(
          getSwapShiftInstancesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.SwapShiftInstancesRes>(
                service, METHODID_SWAP_SHIFT_INSTANCES)))
        .addMethod(
          getUpdateShiftInstanceMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceRes>(
                service, METHODID_UPDATE_SHIFT_INSTANCE)))
        .addMethod(
          getUpdateShiftInstanceV2Method(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Req,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceV2Res>(
                service, METHODID_UPDATE_SHIFT_INSTANCE_V2)))
        .addMethod(
          getUpdateShiftInstanceWithSegmentsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateShiftInstanceWithSegmentsResponse>(
                service, METHODID_UPDATE_SHIFT_INSTANCE_WITH_SEGMENTS)))
        .addMethod(
          getCopyShiftInstancesToScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CopyShiftInstancesToScheduleRes>(
                service, METHODID_COPY_SHIFT_INSTANCES_TO_SCHEDULE)))
        .addMethod(
          getListShiftInstanceSidsForAgentMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForAgentRes>(
                service, METHODID_LIST_SHIFT_INSTANCE_SIDS_FOR_AGENT)))
        .addMethod(
          getListShiftInstanceSidsForScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftInstanceSidsForScheduleResponse>(
                service, METHODID_LIST_SHIFT_INSTANCE_SIDS_FOR_SCHEDULE)))
        .addMethod(
          getListShiftSegmentsByShiftInstanceSidsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListShiftSegmentsByShiftInstanceSidsRes>(
                service, METHODID_LIST_SHIFT_SEGMENTS_BY_SHIFT_INSTANCE_SIDS)))
        .addMethod(
          getSetSchedulingTargetMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.SetSchedulingTargetRes>(
                service, METHODID_SET_SCHEDULING_TARGET)))
        .addMethod(
          getGetSchedulingTargetMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetSchedulingTargetRes>(
                service, METHODID_GET_SCHEDULING_TARGET)))
        .addMethod(
          getDeleteSchedulingTargetMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteSchedulingTargetRes>(
                service, METHODID_DELETE_SCHEDULING_TARGET)))
        .addMethod(
          getGetDefaultSchedulingTargetMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetDefaultSchedulingTargetRes>(
                service, METHODID_GET_DEFAULT_SCHEDULING_TARGET)))
        .addMethod(
          getSetDefaultSchedulingTargetMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.SetDefaultSchedulingTargetRes>(
                service, METHODID_SET_DEFAULT_SCHEDULING_TARGET)))
        .addMethod(
          getGetPerformanceMetricsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetPerformanceMetricsRes>(
                service, METHODID_GET_PERFORMANCE_METRICS)))
        .addMethod(
          getListRequiredCallsIntervalsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRequiredCallsIntervalsRes>(
                service, METHODID_LIST_REQUIRED_CALLS_INTERVALS)))
        .addMethod(
          getCreateTourPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourPatternRes>(
                service, METHODID_CREATE_TOUR_PATTERN)))
        .addMethod(
          getGetTourPatternDiagnosticsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternDiagnosticsRes>(
                service, METHODID_GET_TOUR_PATTERN_DIAGNOSTICS)))
        .addMethod(
          getUpsertTourPatternWithMembersMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertTourPatternWithMembersRes>(
                service, METHODID_UPSERT_TOUR_PATTERN_WITH_MEMBERS)))
        .addMethod(
          getGetTourPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternRes>(
                service, METHODID_GET_TOUR_PATTERN)))
        .addMethod(
          getGetTourPatternWithMembersMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GetTourPatternWithMembersRes>(
                service, METHODID_GET_TOUR_PATTERN_WITH_MEMBERS)))
        .addMethod(
          getDeleteTourPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourPatternRes>(
                service, METHODID_DELETE_TOUR_PATTERN)))
        .addMethod(
          getCreateTourWeekPatternMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourWeekPatternRes>(
                service, METHODID_CREATE_TOUR_WEEK_PATTERN)))
        .addMethod(
          getListTourWeekPatternsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourWeekPatternsRes>(
                service, METHODID_LIST_TOUR_WEEK_PATTERNS)))
        .addMethod(
          getDeleteTourWeekPatternsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourWeekPatternsRes>(
                service, METHODID_DELETE_TOUR_WEEK_PATTERNS)))
        .addMethod(
          getCreateTourShiftInstanceConfigMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftInstanceConfigRes>(
                service, METHODID_CREATE_TOUR_SHIFT_INSTANCE_CONFIG)))
        .addMethod(
          getUpdateTourShiftInstanceConfigMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftInstanceConfigRes>(
                service, METHODID_UPDATE_TOUR_SHIFT_INSTANCE_CONFIG)))
        .addMethod(
          getListTourShiftInstanceConfigsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftInstanceConfigsRes>(
                service, METHODID_LIST_TOUR_SHIFT_INSTANCE_CONFIGS)))
        .addMethod(
          getDeleteTourShiftInstanceConfigsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftInstanceConfigsRes>(
                service, METHODID_DELETE_TOUR_SHIFT_INSTANCE_CONFIGS)))
        .addMethod(
          getCreateTourShiftSegmentConfigMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourShiftSegmentConfigRes>(
                service, METHODID_CREATE_TOUR_SHIFT_SEGMENT_CONFIG)))
        .addMethod(
          getUpdateTourShiftSegmentConfigMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourShiftSegmentConfigRes>(
                service, METHODID_UPDATE_TOUR_SHIFT_SEGMENT_CONFIG)))
        .addMethod(
          getListTourShiftSegmentConfigsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourShiftSegmentConfigsRes>(
                service, METHODID_LIST_TOUR_SHIFT_SEGMENT_CONFIGS)))
        .addMethod(
          getDeleteTourShiftSegmentConfigsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourShiftSegmentConfigsRes>(
                service, METHODID_DELETE_TOUR_SHIFT_SEGMENT_CONFIGS)))
        .addMethod(
          getCreateTourAgentCollectionMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionRes>(
                service, METHODID_CREATE_TOUR_AGENT_COLLECTION)))
        .addMethod(
          getUpdateTourAgentCollectionMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateTourAgentCollectionRes>(
                service, METHODID_UPDATE_TOUR_AGENT_COLLECTION)))
        .addMethod(
          getListTourAgentCollectionsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionsRes>(
                service, METHODID_LIST_TOUR_AGENT_COLLECTIONS)))
        .addMethod(
          getDeleteTourAgentCollectionsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionsRes>(
                service, METHODID_DELETE_TOUR_AGENT_COLLECTIONS)))
        .addMethod(
          getCreateTourAgentCollectionWFMAgentsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateTourAgentCollectionWFMAgentsRes>(
                service, METHODID_CREATE_TOUR_AGENT_COLLECTION_WFMAGENTS)))
        .addMethod(
          getListTourAgentCollectionWFMAgentsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListTourAgentCollectionWFMAgentsRes>(
                service, METHODID_LIST_TOUR_AGENT_COLLECTION_WFMAGENTS)))
        .addMethod(
          getDeleteTourAgentCollectionWFMAgentsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteTourAgentCollectionWFMAgentsRes>(
                service, METHODID_DELETE_TOUR_AGENT_COLLECTION_WFMAGENTS)))
        .addMethod(
          getGenerateTourWeekPatternsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.GenerateTourWeekPatternsRes>(
                service, METHODID_GENERATE_TOUR_WEEK_PATTERNS)))
        .addMethod(
          getListValidAgentsForReplacementMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListValidAgentsForReplacementRes>(
                service, METHODID_LIST_VALID_AGENTS_FOR_REPLACEMENT)))
        .addMethod(
          getReplaceAgentOnScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes,
              com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes>(
                service, METHODID_REPLACE_AGENT_ON_SCHEDULE)))
        .addMethod(
          getReplaceAgentOnScheduleV1Method(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleReq,
              com.tcn.cloud.api.api.v1alpha1.wfm.ReplaceAgentOnScheduleRes>(
                service, METHODID_REPLACE_AGENT_ON_SCHEDULE_V1)))
        .addMethod(
          getRemoveAgentFromScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.RemoveAgentFromScheduleResponse>(
                service, METHODID_REMOVE_AGENT_FROM_SCHEDULE)))
        .addMethod(
          getCreateAgentLeavePetitionMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAgentLeavePetitionResponse>(
                service, METHODID_CREATE_AGENT_LEAVE_PETITION)))
        .addMethod(
          getListAgentLeavePetitionsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentLeavePetitionsResponse>(
                service, METHODID_LIST_AGENT_LEAVE_PETITIONS)))
        .addMethod(
          getArchiveAgentLeavePetitionMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ArchiveAgentLeavePetitionResponse>(
                service, METHODID_ARCHIVE_AGENT_LEAVE_PETITION)))
        .addMethod(
          getResolveAgentLeavePetitionMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ResolveAgentLeavePetitionResponse>(
                service, METHODID_RESOLVE_AGENT_LEAVE_PETITION)))
        .addMethod(
          getCancelAgentLeavePetitionMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CancelAgentLeavePetitionResponse>(
                service, METHODID_CANCEL_AGENT_LEAVE_PETITION)))
        .addMethod(
          getHelloWorldWFMAdherenceMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.HelloWorldWFMAdherenceResponse>(
                service, METHODID_HELLO_WORLD_WFMADHERENCE)))
        .addMethod(
          getListAgentStatesForDayMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAgentStatesForDayResponse>(
                service, METHODID_LIST_AGENT_STATES_FOR_DAY)))
        .addMethod(
          getListRealTimeManagementStatesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStatesResponse>(
                service, METHODID_LIST_REAL_TIME_MANAGEMENT_STATES)))
        .addMethod(
          getListAdherenceAgentStatesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentStatesResponse>(
                service, METHODID_LIST_ADHERENCE_AGENT_STATES)))
        .addMethod(
          getUpsertRealTimeManagementStateColorMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpsertRealTimeManagementStateColorResponse>(
                service, METHODID_UPSERT_REAL_TIME_MANAGEMENT_STATE_COLOR)))
        .addMethod(
          getListRealTimeManagementStateColorsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRealTimeManagementStateColorsResponse>(
                service, METHODID_LIST_REAL_TIME_MANAGEMENT_STATE_COLORS)))
        .addMethod(
          getDeleteRealTimeManagementStateColorMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRealTimeManagementStateColorResponse>(
                service, METHODID_DELETE_REAL_TIME_MANAGEMENT_STATE_COLOR)))
        .addMethod(
          getCreateRgbaColorMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateRgbaColorResponse>(
                service, METHODID_CREATE_RGBA_COLOR)))
        .addMethod(
          getListRgbaColorsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListRgbaColorsResponse>(
                service, METHODID_LIST_RGBA_COLORS)))
        .addMethod(
          getUpdateRgbaColorMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateRgbaColorResponse>(
                service, METHODID_UPDATE_RGBA_COLOR)))
        .addMethod(
          getDeleteRgbaColorMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteRgbaColorResponse>(
                service, METHODID_DELETE_RGBA_COLOR)))
        .addMethod(
          getCreateAdherenceRuleNotificationConfigMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigResponse>(
                service, METHODID_CREATE_ADHERENCE_RULE_NOTIFICATION_CONFIG)))
        .addMethod(
          getUpdateAdherenceRuleNotificationConfigMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigResponse>(
                service, METHODID_UPDATE_ADHERENCE_RULE_NOTIFICATION_CONFIG)))
        .addMethod(
          getCreateAdherenceRuleNotificationConfigEntryMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceRuleNotificationConfigEntryResponse>(
                service, METHODID_CREATE_ADHERENCE_RULE_NOTIFICATION_CONFIG_ENTRY)))
        .addMethod(
          getUpdateAdherenceRuleNotificationConfigEntryMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceRuleNotificationConfigEntryResponse>(
                service, METHODID_UPDATE_ADHERENCE_RULE_NOTIFICATION_CONFIG_ENTRY)))
        .addMethod(
          getDeleteAdherenceRuleNotificationConfigEntryMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceRuleNotificationConfigEntryResponse>(
                service, METHODID_DELETE_ADHERENCE_RULE_NOTIFICATION_CONFIG_ENTRY)))
        .addMethod(
          getListAdherenceRuleNotificationConfigsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceRuleNotificationConfigsResponse>(
                service, METHODID_LIST_ADHERENCE_RULE_NOTIFICATION_CONFIGS)))
        .addMethod(
          getCreateAdherenceDepartmentalRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleResponse>(
                service, METHODID_CREATE_ADHERENCE_DEPARTMENTAL_RULE)))
        .addMethod(
          getUpdateAdherenceDepartmentalRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleResponse>(
                service, METHODID_UPDATE_ADHERENCE_DEPARTMENTAL_RULE)))
        .addMethod(
          getCreateAdherenceDepartmentalRuleClauseMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceDepartmentalRuleClauseResponse>(
                service, METHODID_CREATE_ADHERENCE_DEPARTMENTAL_RULE_CLAUSE)))
        .addMethod(
          getUpdateAdherenceDepartmentalRuleClauseMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceDepartmentalRuleClauseResponse>(
                service, METHODID_UPDATE_ADHERENCE_DEPARTMENTAL_RULE_CLAUSE)))
        .addMethod(
          getDeleteAdherenceDepartmentalRuleClauseMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceDepartmentalRuleClauseResponse>(
                service, METHODID_DELETE_ADHERENCE_DEPARTMENTAL_RULE_CLAUSE)))
        .addMethod(
          getListAdherenceDepartmentalRulesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceDepartmentalRulesResponse>(
                service, METHODID_LIST_ADHERENCE_DEPARTMENTAL_RULES)))
        .addMethod(
          getCreateAdherenceAgentRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleResponse>(
                service, METHODID_CREATE_ADHERENCE_AGENT_RULE)))
        .addMethod(
          getUpdateAdherenceAgentRuleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleResponse>(
                service, METHODID_UPDATE_ADHERENCE_AGENT_RULE)))
        .addMethod(
          getCreateAdherenceAgentRuleClauseMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.CreateAdherenceAgentRuleClauseResponse>(
                service, METHODID_CREATE_ADHERENCE_AGENT_RULE_CLAUSE)))
        .addMethod(
          getUpdateAdherenceAgentRuleClauseMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.UpdateAdherenceAgentRuleClauseResponse>(
                service, METHODID_UPDATE_ADHERENCE_AGENT_RULE_CLAUSE)))
        .addMethod(
          getListAdherenceAgentRulesMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.ListAdherenceAgentRulesResponse>(
                service, METHODID_LIST_ADHERENCE_AGENT_RULES)))
        .addMethod(
          getDeleteAdherenceAgentRuleClauseMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.DeleteAdherenceAgentRuleClauseResponse>(
                service, METHODID_DELETE_ADHERENCE_AGENT_RULE_CLAUSE)))
        .addMethod(
          getAgentGetScheduleMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.AgentGetScheduleResponse>(
                service, METHODID_AGENT_GET_SCHEDULE)))
        .addMethod(
          getAgentListLeavePetitionsMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.AgentListLeavePetitionsResponse>(
                service, METHODID_AGENT_LIST_LEAVE_PETITIONS)))
        .addMethod(
          getAgentCreateLeavePetitionMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.AgentCreateLeavePetitionResponse>(
                service, METHODID_AGENT_CREATE_LEAVE_PETITION)))
        .addMethod(
          getAgentCancelLeavePetitionMethod(),
          io.grpc.stub.ServerCalls.asyncUnaryCall(
            new MethodHandlers<
              com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionRequest,
              com.tcn.cloud.api.api.v1alpha1.wfm.AgentCancelLeavePetitionResponse>(
                service, METHODID_AGENT_CANCEL_LEAVE_PETITION)))
        .build();
  }

  private static abstract class WFMBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoFileDescriptorSupplier, io.grpc.protobuf.ProtoServiceDescriptorSupplier {
    WFMBaseDescriptorSupplier() {}

    @java.lang.Override
    public com.google.protobuf.Descriptors.FileDescriptor getFileDescriptor() {
      return com.tcn.cloud.api.api.v1alpha1.wfm.WfmProto.getDescriptor();
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.ServiceDescriptor getServiceDescriptor() {
      return getFileDescriptor().findServiceByName("WFM");
    }
  }

  private static final class WFMFileDescriptorSupplier
      extends WFMBaseDescriptorSupplier {
    WFMFileDescriptorSupplier() {}
  }

  private static final class WFMMethodDescriptorSupplier
      extends WFMBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
    private final java.lang.String methodName;

    WFMMethodDescriptorSupplier(java.lang.String methodName) {
      this.methodName = methodName;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.MethodDescriptor getMethodDescriptor() {
      return getServiceDescriptor().findMethodByName(methodName);
    }
  }

  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;

  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (WFMGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
              .setSchemaDescriptor(new WFMFileDescriptorSupplier())
              .addMethod(getPerformInitialClientSetupMethod())
              .addMethod(getCreateInitialDemoActivitiesMethod())
              .addMethod(getListSkillProfilesMethod())
              .addMethod(getUpdateSkillProfileMethod())
              .addMethod(getUpdateSkillProfileProficienciesMethod())
              .addMethod(getGetSkillProfileMethod())
              .addMethod(getResyncSkillProfilesMethod())
              .addMethod(getGetLastSkillProfileResyncDateMethod())
              .addMethod(getUpsertForecastingParametersMethod())
              .addMethod(getGetForecastingParametersMethod())
              .addMethod(getGetClientHistoryCacheInfoMethod())
              .addMethod(getListHistoricalDataMethod())
              .addMethod(getUpsertHistoricalDataDeltaMethod())
              .addMethod(getUpsertHistoricalDataDeltasMethod())
              .addMethod(getListSkillsMethod())
              .addMethod(getBuildCallProfileTemplateForSkillProfileMethod())
              .addMethod(getBuildCallProfileTemplateMethod())
              .addMethod(getCreateInactiveSkillProfileMappingMethod())
              .addMethod(getGetAvailableRegressionForecasterModelTypesMethod())
              .addMethod(getDisconnectInactiveSkillProfileMappingMethod())
              .addMethod(getCreateSkillProfileGroupMethod())
              .addMethod(getUpdateSkillProfileGroupMethod())
              .addMethod(getListSkillProfileGroupsMethod())
              .addMethod(getUpdateSkillProfileGroupAssociationsMethod())
              .addMethod(getDeleteHistoricalDataDeltasMethod())
              .addMethod(getListTopSkillProfilesMethod())
              .addMethod(getGetSkillProfilesCountMethod())
              .addMethod(getBuildProfileForecastByIntervalMethod())
              .addMethod(getBuildProfileForecastByIntervalWithStatsMethod())
              .addMethod(getUpsertProfileForecastMethod())
              .addMethod(getCreateCallProfileTemplateMethod())
              .addMethod(getDeleteCallProfileTemplateMethod())
              .addMethod(getCreateRegressionTemplateMethod())
              .addMethod(getDeleteRegressionTemplateMethod())
              .addMethod(getListRegressionTemplatesMethod())
              .addMethod(getListForecastIntervalsForSkillProfileMethod())
              .addMethod(getListForecastIntervalsMethod())
              .addMethod(getListForecastIntervalsV2Method())
              .addMethod(getBuildRegressionForecastByIntervalMethod())
              .addMethod(getBuildRegressionForecastByIntervalWithStatsMethod())
              .addMethod(getListCallProfileTemplatesMethod())
              .addMethod(getUpsertRegressionForecastMethod())
              .addMethod(getUpsertForecastDataDeltaMethod())
              .addMethod(getUpsertForecastDataDeltasMethod())
              .addMethod(getDeleteForecastIntervalsMethod())
              .addMethod(getListHistoricalDataForAllSkillProfilesMethod())
              .addMethod(getBuildDOWAndMOYProfilesMethod())
              .addMethod(getCalculateTrainingDataAveragesForSkillProfileMethod())
              .addMethod(getUpdateSkillProfileAveragesUsingHistoricalDataMethod())
              .addMethod(getUpdateCallCenterNodeMethod())
              .addMethod(getCreateClientNodeMethod())
              .addMethod(getUpdateClientNodeMethod())
              .addMethod(getCreateLocationNodeMethod())
              .addMethod(getUpdateLocationNodeMethod())
              .addMethod(getCreateProgramNodeMethod())
              .addMethod(getUpdateProgramNodeMethod())
              .addMethod(getListProgramNodesBySidMethod())
              .addMethod(getCreateConstraintRuleMethod())
              .addMethod(getUpdateConstraintRuleMethod())
              .addMethod(getDeleteConstraintRuleMethod())
              .addMethod(getCreateNonSkillActivityMethod())
              .addMethod(getUpdateNonSkillActivityMethod())
              .addMethod(getListNonSkillActivitiesMethod())
              .addMethod(getListNonSkillActivityAssociationsMethod())
              .addMethod(getListCandidateSchedulingActivitiesMethod())
              .addMethod(getListSchedulingActivitiesMethod())
              .addMethod(getGetOnCallSchedulingActivityMethod())
              .addMethod(getListPatternsForSchedulingActivityClassificationsMethod())
              .addMethod(getGetTimeOffSchedulingActivityMethod())
              .addMethod(getCreateAgentGroupMethod())
              .addMethod(getListAgentScheduleGroupsMethod())
              .addMethod(getUpdateAgentGroupMethod())
              .addMethod(getCreateUnassignedWFMAgentMethod())
              .addMethod(getUpdateWFMAgentMethod())
              .addMethod(getListAllWFMAgentsMethod())
              .addMethod(getListCandidateWFMAgentsMethod())
              .addMethod(getListUngroupedWFMAgentsMethod())
              .addMethod(getListWFMAgentSidsMethod())
              .addMethod(getListUnassignedWFMAgentsMethod())
              .addMethod(getListWFMAgentsAssociatedWithAgentGroupMethod())
              .addMethod(getCreateWFMAgentMembershipsMethod())
              .addMethod(getCopyWFMAgentMembershipsMethod())
              .addMethod(getDeleteWFMAgentMembershipsMethod())
              .addMethod(getDeleteWFMAgentsMembershipsMethod())
              .addMethod(getRemoveAgentFromFutureShiftsMethod())
              .addMethod(getBuildAgentDiagnosticsMethod())
              .addMethod(getCreateShiftTemplateMethod())
              .addMethod(getUpdateShiftTemplateMethod())
              .addMethod(getListShiftTemplatesBySidsMethod())
              .addMethod(getBuildShiftTemplateDiagnosticsMethod())
              .addMethod(getCreatePlacementRuleMethod())
              .addMethod(getUpdatePlacementRuleMethod())
              .addMethod(getDeletePlacementRuleMethod())
              .addMethod(getCreateOpenTimesPatternMethod())
              .addMethod(getUpdateOpenTimesPatternMethod())
              .addMethod(getDeleteOpenTimesPatternMethod())
              .addMethod(getGetOpenTimesBitmapsMethod())
              .addMethod(getListOpenDateRangesForNodeOpenTimesBitmapsMethod())
              .addMethod(getCreateAgentAvailabilityPatternMethod())
              .addMethod(getUpdateAgentAvailabilityPatternMethod())
              .addMethod(getDeleteAgentAvailabilityPatternMethod())
              .addMethod(getGetAvailabilityBitmapsMethod())
              .addMethod(getUpsertNonSkillActivityAssociationMethod())
              .addMethod(getCreateSkillProficienciesMethod())
              .addMethod(getUpdateSkillProficienciesMethod())
              .addMethod(getDeleteSkillProficiencyMethod())
              .addMethod(getCopyScenarioMethod())
              .addMethod(getCreateScheduleScenarioWithNodesMethod())
              .addMethod(getUpdateScheduleScenarioMethod())
              .addMethod(getListConfigEntitiesMethod())
              .addMethod(getDeleteShiftInstancesMethod())
              .addMethod(getBuildNodeDiagnosticsMethod())
              .addMethod(getBuildGlobalDiagnosticsMethod())
              .addMethod(getGetPublishedScheduleMethod())
              .addMethod(getGetPublishedScheduleRequiredCallsMethod())
              .addMethod(getGetDraftScheduleRequiredCallsMethod())
              .addMethod(getCreateDraftScheduleMethod())
              .addMethod(getUpdateDraftScheduleMethod())
              .addMethod(getBuildDraftScheduleMethod())
              .addMethod(getPollBuildInProgressMethod())
              .addMethod(getCancelBuildInProgressMethod())
              .addMethod(getPublishDraftScheduleMethod())
              .addMethod(getResetDraftScheduleMethod())
              .addMethod(getGetDraftScheduleMethod())
              .addMethod(getListDraftSchedulesMethod())
              .addMethod(getClearScheduleMethod())
              .addMethod(getDeleteDraftScheduleMethod())
              .addMethod(getListShiftInstancesBySidMethod())
              .addMethod(getCopyScheduleToScheduleMethod())
              .addMethod(getCreateShiftInstanceMethod())
              .addMethod(getCreateShiftInstanceV2Method())
              .addMethod(getCreateShiftInstanceWithSegmentsMethod())
              .addMethod(getSplitShiftInstanceMethod())
              .addMethod(getSwapShiftInstancesMethod())
              .addMethod(getUpdateShiftInstanceMethod())
              .addMethod(getUpdateShiftInstanceV2Method())
              .addMethod(getUpdateShiftInstanceWithSegmentsMethod())
              .addMethod(getCopyShiftInstancesToScheduleMethod())
              .addMethod(getListShiftInstanceSidsForAgentMethod())
              .addMethod(getListShiftInstanceSidsForScheduleMethod())
              .addMethod(getListShiftSegmentsByShiftInstanceSidsMethod())
              .addMethod(getSetSchedulingTargetMethod())
              .addMethod(getGetSchedulingTargetMethod())
              .addMethod(getDeleteSchedulingTargetMethod())
              .addMethod(getGetDefaultSchedulingTargetMethod())
              .addMethod(getSetDefaultSchedulingTargetMethod())
              .addMethod(getGetPerformanceMetricsMethod())
              .addMethod(getListRequiredCallsIntervalsMethod())
              .addMethod(getCreateTourPatternMethod())
              .addMethod(getGetTourPatternDiagnosticsMethod())
              .addMethod(getUpsertTourPatternWithMembersMethod())
              .addMethod(getGetTourPatternMethod())
              .addMethod(getGetTourPatternWithMembersMethod())
              .addMethod(getDeleteTourPatternMethod())
              .addMethod(getCreateTourWeekPatternMethod())
              .addMethod(getListTourWeekPatternsMethod())
              .addMethod(getDeleteTourWeekPatternsMethod())
              .addMethod(getCreateTourShiftInstanceConfigMethod())
              .addMethod(getUpdateTourShiftInstanceConfigMethod())
              .addMethod(getListTourShiftInstanceConfigsMethod())
              .addMethod(getDeleteTourShiftInstanceConfigsMethod())
              .addMethod(getCreateTourShiftSegmentConfigMethod())
              .addMethod(getUpdateTourShiftSegmentConfigMethod())
              .addMethod(getListTourShiftSegmentConfigsMethod())
              .addMethod(getDeleteTourShiftSegmentConfigsMethod())
              .addMethod(getCreateTourAgentCollectionMethod())
              .addMethod(getUpdateTourAgentCollectionMethod())
              .addMethod(getListTourAgentCollectionsMethod())
              .addMethod(getDeleteTourAgentCollectionsMethod())
              .addMethod(getCreateTourAgentCollectionWFMAgentsMethod())
              .addMethod(getListTourAgentCollectionWFMAgentsMethod())
              .addMethod(getDeleteTourAgentCollectionWFMAgentsMethod())
              .addMethod(getGenerateTourWeekPatternsMethod())
              .addMethod(getListValidAgentsForReplacementMethod())
              .addMethod(getReplaceAgentOnScheduleMethod())
              .addMethod(getReplaceAgentOnScheduleV1Method())
              .addMethod(getRemoveAgentFromScheduleMethod())
              .addMethod(getCreateAgentLeavePetitionMethod())
              .addMethod(getListAgentLeavePetitionsMethod())
              .addMethod(getArchiveAgentLeavePetitionMethod())
              .addMethod(getResolveAgentLeavePetitionMethod())
              .addMethod(getCancelAgentLeavePetitionMethod())
              .addMethod(getHelloWorldWFMAdherenceMethod())
              .addMethod(getListAgentStatesForDayMethod())
              .addMethod(getListRealTimeManagementStatesMethod())
              .addMethod(getListAdherenceAgentStatesMethod())
              .addMethod(getUpsertRealTimeManagementStateColorMethod())
              .addMethod(getListRealTimeManagementStateColorsMethod())
              .addMethod(getDeleteRealTimeManagementStateColorMethod())
              .addMethod(getCreateRgbaColorMethod())
              .addMethod(getListRgbaColorsMethod())
              .addMethod(getUpdateRgbaColorMethod())
              .addMethod(getDeleteRgbaColorMethod())
              .addMethod(getCreateAdherenceRuleNotificationConfigMethod())
              .addMethod(getUpdateAdherenceRuleNotificationConfigMethod())
              .addMethod(getCreateAdherenceRuleNotificationConfigEntryMethod())
              .addMethod(getUpdateAdherenceRuleNotificationConfigEntryMethod())
              .addMethod(getDeleteAdherenceRuleNotificationConfigEntryMethod())
              .addMethod(getListAdherenceRuleNotificationConfigsMethod())
              .addMethod(getCreateAdherenceDepartmentalRuleMethod())
              .addMethod(getUpdateAdherenceDepartmentalRuleMethod())
              .addMethod(getCreateAdherenceDepartmentalRuleClauseMethod())
              .addMethod(getUpdateAdherenceDepartmentalRuleClauseMethod())
              .addMethod(getDeleteAdherenceDepartmentalRuleClauseMethod())
              .addMethod(getListAdherenceDepartmentalRulesMethod())
              .addMethod(getCreateAdherenceAgentRuleMethod())
              .addMethod(getUpdateAdherenceAgentRuleMethod())
              .addMethod(getCreateAdherenceAgentRuleClauseMethod())
              .addMethod(getUpdateAdherenceAgentRuleClauseMethod())
              .addMethod(getListAdherenceAgentRulesMethod())
              .addMethod(getDeleteAdherenceAgentRuleClauseMethod())
              .addMethod(getAgentGetScheduleMethod())
              .addMethod(getAgentListLeavePetitionsMethod())
              .addMethod(getAgentCreateLeavePetitionMethod())
              .addMethod(getAgentCancelLeavePetitionMethod())
              .build();
        }
      }
    }
    return result;
  }
}
