// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/v0alpha/lms.proto

package com.tcn.cloud.api.api.v0alpha;

public interface EpicEntrypointOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.v0alpha.EpicEntrypoint)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * how often this event needs to run.
   * this cron string will be restricted differently depending
   * on the specific operation being run. For example, Epic
   * only allows calls once per 24 hours.
   * </pre>
   *
   * <code>string cron = 2 [json_name = "cron"];</code>
   * @return The cron.
   */
  java.lang.String getCron();
  /**
   * <pre>
   * how often this event needs to run.
   * this cron string will be restricted differently depending
   * on the specific operation being run. For example, Epic
   * only allows calls once per 24 hours.
   * </pre>
   *
   * <code>string cron = 2 [json_name = "cron"];</code>
   * @return The bytes for cron.
   */
  com.google.protobuf.ByteString
      getCronBytes();

  /**
   * <pre>
   * how long in minutes we will wait with the entrypoint
   * in the CHECK state. 0 is interpreted as wait indefinitely.
   * </pre>
   *
   * <code>double max_wait_time = 3 [json_name = "maxWaitTime"];</code>
   * @return The maxWaitTime.
   */
  double getMaxWaitTime();

  /**
   * <pre>
   * the types of entities we want retrieved
   * </pre>
   *
   * <code>repeated .api.v0alpha.EpicEntityType entity_types = 4 [json_name = "entityTypes"];</code>
   * @return A list containing the entityTypes.
   */
  java.util.List<com.tcn.cloud.api.api.v0alpha.EpicEntityType> getEntityTypesList();
  /**
   * <pre>
   * the types of entities we want retrieved
   * </pre>
   *
   * <code>repeated .api.v0alpha.EpicEntityType entity_types = 4 [json_name = "entityTypes"];</code>
   * @return The count of entityTypes.
   */
  int getEntityTypesCount();
  /**
   * <pre>
   * the types of entities we want retrieved
   * </pre>
   *
   * <code>repeated .api.v0alpha.EpicEntityType entity_types = 4 [json_name = "entityTypes"];</code>
   * @param index The index of the element to return.
   * @return The entityTypes at the given index.
   */
  com.tcn.cloud.api.api.v0alpha.EpicEntityType getEntityTypes(int index);
  /**
   * <pre>
   * the types of entities we want retrieved
   * </pre>
   *
   * <code>repeated .api.v0alpha.EpicEntityType entity_types = 4 [json_name = "entityTypes"];</code>
   * @return A list containing the enum numeric values on the wire for entityTypes.
   */
  java.util.List<java.lang.Integer>
  getEntityTypesValueList();
  /**
   * <pre>
   * the types of entities we want retrieved
   * </pre>
   *
   * <code>repeated .api.v0alpha.EpicEntityType entity_types = 4 [json_name = "entityTypes"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of entityTypes at the given index.
   */
  int getEntityTypesValue(int index);

  /**
   * <pre>
   * the base url that points to the group of entites we are querying.
   * Each group can be contacted once every 24 hours max.
   * Example: https://apporchard.epic.com/interconnect-aocurprd-oauth/api/FHIR/R4
   * </pre>
   *
   * <code>string group_base_url = 5 [json_name = "groupBaseUrl"];</code>
   * @return The groupBaseUrl.
   */
  java.lang.String getGroupBaseUrl();
  /**
   * <pre>
   * the base url that points to the group of entites we are querying.
   * Each group can be contacted once every 24 hours max.
   * Example: https://apporchard.epic.com/interconnect-aocurprd-oauth/api/FHIR/R4
   * </pre>
   *
   * <code>string group_base_url = 5 [json_name = "groupBaseUrl"];</code>
   * @return The bytes for groupBaseUrl.
   */
  com.google.protobuf.ByteString
      getGroupBaseUrlBytes();

  /**
   * <pre>
   * the id for the group we are matching.
   * Example: eIscQb2HmqkT.aPxBKDR1mIj3721CpVk1suC7rlu3yX83
   * </pre>
   *
   * <code>string group_fhir_id = 6 [json_name = "groupFhirId"];</code>
   * @return The groupFhirId.
   */
  java.lang.String getGroupFhirId();
  /**
   * <pre>
   * the id for the group we are matching.
   * Example: eIscQb2HmqkT.aPxBKDR1mIj3721CpVk1suC7rlu3yX83
   * </pre>
   *
   * <code>string group_fhir_id = 6 [json_name = "groupFhirId"];</code>
   * @return The bytes for groupFhirId.
   */
  com.google.protobuf.ByteString
      getGroupFhirIdBytes();

  /**
   * <pre>
   * values during event processing.
   * Not visible to user.
   * </pre>
   *
   * <code>.api.v0alpha.RuntimeValues runtime_values = 7 [json_name = "runtimeValues"];</code>
   * @return Whether the runtimeValues field is set.
   */
  boolean hasRuntimeValues();
  /**
   * <pre>
   * values during event processing.
   * Not visible to user.
   * </pre>
   *
   * <code>.api.v0alpha.RuntimeValues runtime_values = 7 [json_name = "runtimeValues"];</code>
   * @return The runtimeValues.
   */
  com.tcn.cloud.api.api.v0alpha.RuntimeValues getRuntimeValues();
  /**
   * <pre>
   * values during event processing.
   * Not visible to user.
   * </pre>
   *
   * <code>.api.v0alpha.RuntimeValues runtime_values = 7 [json_name = "runtimeValues"];</code>
   */
  com.tcn.cloud.api.api.v0alpha.RuntimeValuesOrBuilder getRuntimeValuesOrBuilder();

  /**
   * <pre>
   * how many pages we should save before aggregating the data and sending downstream
   * default is 100. Max is 10000.
   * If a termination state hasn't been reached, the event will be re-queued and continue
   * where it left off.
   * </pre>
   *
   * <code>int64 flush_page_count = 8 [json_name = "flushPageCount"];</code>
   * @return The flushPageCount.
   */
  long getFlushPageCount();

  /**
   * <pre>
   * how much total elapsed time (in minutes) we want to wait before flushing records.
   * if total time spent aggregating the data goes over this many minutes, we will flush
   * the current records downstream.
   * default is 20. Max is 120. Min is 1.
   * If a termination state hasn't been reached, the event will be re-queued and continue
   * where it left off.
   * </pre>
   *
   * <code>int64 flush_minute_count = 9 [json_name = "flushMinuteCount"];</code>
   * @return The flushMinuteCount.
   */
  long getFlushMinuteCount();

  /**
   * <pre>
   * if true, we will switch to processing mode when we have enough records to flush
   * even if we haven't downloaded all the pages yet.
   * after the current records are flushed, we switch back to downloading the remaining records.
   * If false (default), we download all the pages before we start processing any records.
   * </pre>
   *
   * <code>bool flush_during_check = 10 [json_name = "flushDuringCheck"];</code>
   * @return The flushDuringCheck.
   */
  boolean getFlushDuringCheck();

  /**
   * <pre>
   * Specifies the timezone to be used by the cron
   * </pre>
   *
   * <code>string timezone = 11 [json_name = "timezone"];</code>
   * @return The timezone.
   */
  java.lang.String getTimezone();
  /**
   * <pre>
   * Specifies the timezone to be used by the cron
   * </pre>
   *
   * <code>string timezone = 11 [json_name = "timezone"];</code>
   * @return The bytes for timezone.
   */
  com.google.protobuf.ByteString
      getTimezoneBytes();

  /**
   * <pre>
   * If process is enabled
   * </pre>
   *
   * <code>bool enabled = 12 [json_name = "enabled"];</code>
   * @return The enabled.
   */
  boolean getEnabled();

  /**
   * <pre>
   * The fields the user wants retrieved from the raw json response
   * </pre>
   *
   * <code>repeated .api.v0alpha.Field fields = 13 [json_name = "fields"];</code>
   */
  java.util.List<com.tcn.cloud.api.api.v0alpha.Field> 
      getFieldsList();
  /**
   * <pre>
   * The fields the user wants retrieved from the raw json response
   * </pre>
   *
   * <code>repeated .api.v0alpha.Field fields = 13 [json_name = "fields"];</code>
   */
  com.tcn.cloud.api.api.v0alpha.Field getFields(int index);
  /**
   * <pre>
   * The fields the user wants retrieved from the raw json response
   * </pre>
   *
   * <code>repeated .api.v0alpha.Field fields = 13 [json_name = "fields"];</code>
   */
  int getFieldsCount();
  /**
   * <pre>
   * The fields the user wants retrieved from the raw json response
   * </pre>
   *
   * <code>repeated .api.v0alpha.Field fields = 13 [json_name = "fields"];</code>
   */
  java.util.List<? extends com.tcn.cloud.api.api.v0alpha.FieldOrBuilder> 
      getFieldsOrBuilderList();
  /**
   * <pre>
   * The fields the user wants retrieved from the raw json response
   * </pre>
   *
   * <code>repeated .api.v0alpha.Field fields = 13 [json_name = "fields"];</code>
   */
  com.tcn.cloud.api.api.v0alpha.FieldOrBuilder getFieldsOrBuilder(
      int index);

  /**
   * <pre>
   * If we should return one column as raw json and not any specified fields for file template
   * </pre>
   *
   * <code>bool raw_json = 14 [json_name = "rawJson"];</code>
   * @return The rawJson.
   */
  boolean getRawJson();
}
